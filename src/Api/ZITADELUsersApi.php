<?php
/**
 * ZITADELUsersApi
 * PHP version 7.2
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ArthurHlt\Zitadel\Api;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use ArthurHlt\Zitadel\ApiException;
use ArthurHlt\Zitadel\Configuration;
use ArthurHlt\Zitadel\DebugPlugin;
use ArthurHlt\Zitadel\HeaderSelector;
use ArthurHlt\Zitadel\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * ZITADELUsersApi Class Doc Comment
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ZITADELUsersApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://zitadel.cloud/management/v1');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation zITADELUsersActivateUser
     *
     * Activate a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaActivateUserResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersActivateUser($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersActivateUserWithHttpInfo($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersActivateUserWithHttpInfo
     *
     * Activate a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaActivateUserResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersActivateUserWithHttpInfo($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersActivateUserRequest($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaActivateUserResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaActivateUserResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaActivateUserResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaActivateUserResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersActivateUserAsync
     *
     * Activate a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersActivateUserAsync($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersActivateUserAsyncWithHttpInfo($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersActivateUserAsyncWithHttpInfo
     *
     * Activate a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersActivateUserAsyncWithHttpInfo($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaActivateUserResponse';
        $request = $this->zITADELUsersActivateUserRequest($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersActivateUser'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersActivateUserRequest($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersActivateUser'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/_activate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersAddIDPAuthenticator
     *
     * Add an IDP authenticator to a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\V3alphaIDPAuthenticator $authenticator authenticator (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaAddIDPAuthenticatorResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersAddIDPAuthenticator($id, $authenticator, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersAddIDPAuthenticatorWithHttpInfo($id, $authenticator, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersAddIDPAuthenticatorWithHttpInfo
     *
     * Add an IDP authenticator to a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\V3alphaIDPAuthenticator $authenticator (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaAddIDPAuthenticatorResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersAddIDPAuthenticatorWithHttpInfo($id, $authenticator, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersAddIDPAuthenticatorRequest($id, $authenticator, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaAddIDPAuthenticatorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaAddIDPAuthenticatorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaAddIDPAuthenticatorResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaAddIDPAuthenticatorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersAddIDPAuthenticatorAsync
     *
     * Add an IDP authenticator to a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\V3alphaIDPAuthenticator $authenticator (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersAddIDPAuthenticatorAsync($id, $authenticator, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersAddIDPAuthenticatorAsyncWithHttpInfo($id, $authenticator, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersAddIDPAuthenticatorAsyncWithHttpInfo
     *
     * Add an IDP authenticator to a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\V3alphaIDPAuthenticator $authenticator (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersAddIDPAuthenticatorAsyncWithHttpInfo($id, $authenticator, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaAddIDPAuthenticatorResponse';
        $request = $this->zITADELUsersAddIDPAuthenticatorRequest($id, $authenticator, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersAddIDPAuthenticator'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\V3alphaIDPAuthenticator $authenticator (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersAddIDPAuthenticatorRequest($id, $authenticator, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersAddIDPAuthenticator'
            );
        }
        // verify the required parameter 'authenticator' is set
        if ($authenticator === null || (is_array($authenticator) && count($authenticator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authenticator when calling zITADELUsersAddIDPAuthenticator'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/idps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($authenticator)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($authenticator));
            } else {
                $httpBody = $authenticator;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersAddOTPEmailAuthenticator
     *
     * Add a OTP Email authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetEmail $email Set the user&#39;s email for the OTP Email authenticator and it&#39;s verification state. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaAddOTPEmailAuthenticatorResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersAddOTPEmailAuthenticator($id, $email, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersAddOTPEmailAuthenticatorWithHttpInfo($id, $email, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersAddOTPEmailAuthenticatorWithHttpInfo
     *
     * Add a OTP Email authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetEmail $email Set the user&#39;s email for the OTP Email authenticator and it&#39;s verification state. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaAddOTPEmailAuthenticatorResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersAddOTPEmailAuthenticatorWithHttpInfo($id, $email, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersAddOTPEmailAuthenticatorRequest($id, $email, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaAddOTPEmailAuthenticatorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaAddOTPEmailAuthenticatorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaAddOTPEmailAuthenticatorResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaAddOTPEmailAuthenticatorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersAddOTPEmailAuthenticatorAsync
     *
     * Add a OTP Email authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetEmail $email Set the user&#39;s email for the OTP Email authenticator and it&#39;s verification state. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersAddOTPEmailAuthenticatorAsync($id, $email, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersAddOTPEmailAuthenticatorAsyncWithHttpInfo($id, $email, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersAddOTPEmailAuthenticatorAsyncWithHttpInfo
     *
     * Add a OTP Email authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetEmail $email Set the user&#39;s email for the OTP Email authenticator and it&#39;s verification state. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersAddOTPEmailAuthenticatorAsyncWithHttpInfo($id, $email, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaAddOTPEmailAuthenticatorResponse';
        $request = $this->zITADELUsersAddOTPEmailAuthenticatorRequest($id, $email, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersAddOTPEmailAuthenticator'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetEmail $email Set the user&#39;s email for the OTP Email authenticator and it&#39;s verification state. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersAddOTPEmailAuthenticatorRequest($id, $email, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersAddOTPEmailAuthenticator'
            );
        }
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling zITADELUsersAddOTPEmailAuthenticator'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/otp_email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($email)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($email));
            } else {
                $httpBody = $email;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersAddOTPSMSAuthenticator
     *
     * Add a OTP SMS authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetPhone $phone Set the user&#39;s phone for the OTP SMS authenticator and it&#39;s verification state. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaAddOTPSMSAuthenticatorResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersAddOTPSMSAuthenticator($id, $phone, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersAddOTPSMSAuthenticatorWithHttpInfo($id, $phone, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersAddOTPSMSAuthenticatorWithHttpInfo
     *
     * Add a OTP SMS authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetPhone $phone Set the user&#39;s phone for the OTP SMS authenticator and it&#39;s verification state. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaAddOTPSMSAuthenticatorResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersAddOTPSMSAuthenticatorWithHttpInfo($id, $phone, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersAddOTPSMSAuthenticatorRequest($id, $phone, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaAddOTPSMSAuthenticatorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaAddOTPSMSAuthenticatorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaAddOTPSMSAuthenticatorResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaAddOTPSMSAuthenticatorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersAddOTPSMSAuthenticatorAsync
     *
     * Add a OTP SMS authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetPhone $phone Set the user&#39;s phone for the OTP SMS authenticator and it&#39;s verification state. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersAddOTPSMSAuthenticatorAsync($id, $phone, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersAddOTPSMSAuthenticatorAsyncWithHttpInfo($id, $phone, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersAddOTPSMSAuthenticatorAsyncWithHttpInfo
     *
     * Add a OTP SMS authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetPhone $phone Set the user&#39;s phone for the OTP SMS authenticator and it&#39;s verification state. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersAddOTPSMSAuthenticatorAsyncWithHttpInfo($id, $phone, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaAddOTPSMSAuthenticatorResponse';
        $request = $this->zITADELUsersAddOTPSMSAuthenticatorRequest($id, $phone, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersAddOTPSMSAuthenticator'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetPhone $phone Set the user&#39;s phone for the OTP SMS authenticator and it&#39;s verification state. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersAddOTPSMSAuthenticatorRequest($id, $phone, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersAddOTPSMSAuthenticator'
            );
        }
        // verify the required parameter 'phone' is set
        if ($phone === null || (is_array($phone) && count($phone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone when calling zITADELUsersAddOTPSMSAuthenticator'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/otp_sms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($phone)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($phone));
            } else {
                $httpBody = $phone;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersAddUsername
     *
     * Add a username
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\V3alphaSetUsername $username Set the user&#39;s new username. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaAddUsernameResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersAddUsername($id, $username, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersAddUsernameWithHttpInfo($id, $username, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersAddUsernameWithHttpInfo
     *
     * Add a username
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\V3alphaSetUsername $username Set the user&#39;s new username. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaAddUsernameResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersAddUsernameWithHttpInfo($id, $username, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersAddUsernameRequest($id, $username, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaAddUsernameResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaAddUsernameResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaAddUsernameResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaAddUsernameResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersAddUsernameAsync
     *
     * Add a username
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\V3alphaSetUsername $username Set the user&#39;s new username. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersAddUsernameAsync($id, $username, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersAddUsernameAsyncWithHttpInfo($id, $username, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersAddUsernameAsyncWithHttpInfo
     *
     * Add a username
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\V3alphaSetUsername $username Set the user&#39;s new username. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersAddUsernameAsyncWithHttpInfo($id, $username, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaAddUsernameResponse';
        $request = $this->zITADELUsersAddUsernameRequest($id, $username, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersAddUsername'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\V3alphaSetUsername $username Set the user&#39;s new username. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersAddUsernameRequest($id, $username, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersAddUsername'
            );
        }
        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling zITADELUsersAddUsername'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/username';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($username)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($username));
            } else {
                $httpBody = $username;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersCreateUser
     *
     * Create a user
     *
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaCreateUser $user user (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaCreateUserResponse|\ArthurHlt\Zitadel\Model\V3alphaCreateUserResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersCreateUser($user, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersCreateUserWithHttpInfo($user, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersCreateUserWithHttpInfo
     *
     * Create a user
     *
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaCreateUser $user (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaCreateUserResponse|\ArthurHlt\Zitadel\Model\V3alphaCreateUserResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersCreateUserWithHttpInfo($user, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersCreateUserRequest($user, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaCreateUserResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaCreateUserResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaCreateUserResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaCreateUserResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaCreateUserResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaCreateUserResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaCreateUserResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersCreateUserAsync
     *
     * Create a user
     *
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaCreateUser $user (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersCreateUserAsync($user, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersCreateUserAsyncWithHttpInfo($user, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersCreateUserAsyncWithHttpInfo
     *
     * Create a user
     *
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaCreateUser $user (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersCreateUserAsyncWithHttpInfo($user, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaCreateUserResponse';
        $request = $this->zITADELUsersCreateUserRequest($user, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersCreateUser'
     *
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaCreateUser $user (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersCreateUserRequest($user, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling zITADELUsersCreateUser'
            );
        }

        $resourcePath = '/resources/v3alpha/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($user)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($user));
            } else {
                $httpBody = $user;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersCreateWebAuthNRegistrationLink
     *
     * Create a WebAuthN registration link
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\ZITADELUsersCreateWebAuthNRegistrationLinkBody $body body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaCreateWebAuthNRegistrationLinkResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersCreateWebAuthNRegistrationLink($id, $body)
    {
        list($response) = $this->zITADELUsersCreateWebAuthNRegistrationLinkWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation zITADELUsersCreateWebAuthNRegistrationLinkWithHttpInfo
     *
     * Create a WebAuthN registration link
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\ZITADELUsersCreateWebAuthNRegistrationLinkBody $body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaCreateWebAuthNRegistrationLinkResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersCreateWebAuthNRegistrationLinkWithHttpInfo($id, $body)
    {
        $request = $this->zITADELUsersCreateWebAuthNRegistrationLinkRequest($id, $body);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaCreateWebAuthNRegistrationLinkResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaCreateWebAuthNRegistrationLinkResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaCreateWebAuthNRegistrationLinkResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaCreateWebAuthNRegistrationLinkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersCreateWebAuthNRegistrationLinkAsync
     *
     * Create a WebAuthN registration link
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\ZITADELUsersCreateWebAuthNRegistrationLinkBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersCreateWebAuthNRegistrationLinkAsync($id, $body)
    {
        return $this->zITADELUsersCreateWebAuthNRegistrationLinkAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersCreateWebAuthNRegistrationLinkAsyncWithHttpInfo
     *
     * Create a WebAuthN registration link
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\ZITADELUsersCreateWebAuthNRegistrationLinkBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersCreateWebAuthNRegistrationLinkAsyncWithHttpInfo($id, $body)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaCreateWebAuthNRegistrationLinkResponse';
        $request = $this->zITADELUsersCreateWebAuthNRegistrationLinkRequest($id, $body);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersCreateWebAuthNRegistrationLink'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\ZITADELUsersCreateWebAuthNRegistrationLinkBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersCreateWebAuthNRegistrationLinkRequest($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersCreateWebAuthNRegistrationLink'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling zITADELUsersCreateWebAuthNRegistrationLink'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/webauthn/registration_link';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersDeactivateUser
     *
     * Deactivate a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Userv3alphaDeactivateUserResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersDeactivateUser($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersDeactivateUserWithHttpInfo($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersDeactivateUserWithHttpInfo
     *
     * Deactivate a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Userv3alphaDeactivateUserResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersDeactivateUserWithHttpInfo($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersDeactivateUserRequest($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Userv3alphaDeactivateUserResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Userv3alphaDeactivateUserResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Userv3alphaDeactivateUserResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Userv3alphaDeactivateUserResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersDeactivateUserAsync
     *
     * Deactivate a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersDeactivateUserAsync($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersDeactivateUserAsyncWithHttpInfo($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersDeactivateUserAsyncWithHttpInfo
     *
     * Deactivate a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersDeactivateUserAsyncWithHttpInfo($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Userv3alphaDeactivateUserResponse';
        $request = $this->zITADELUsersDeactivateUserRequest($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersDeactivateUser'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersDeactivateUserRequest($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersDeactivateUser'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/_deactivate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersDeleteUser
     *
     * Delete a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Userv3alphaDeleteUserResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersDeleteUser($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersDeleteUserWithHttpInfo($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersDeleteUserWithHttpInfo
     *
     * Delete a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Userv3alphaDeleteUserResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersDeleteUserWithHttpInfo($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersDeleteUserRequest($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Userv3alphaDeleteUserResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Userv3alphaDeleteUserResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Userv3alphaDeleteUserResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Userv3alphaDeleteUserResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersDeleteUserAsync
     *
     * Delete a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersDeleteUserAsync($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersDeleteUserAsyncWithHttpInfo($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersDeleteUserAsyncWithHttpInfo
     *
     * Delete a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersDeleteUserAsyncWithHttpInfo($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Userv3alphaDeleteUserResponse';
        $request = $this->zITADELUsersDeleteUserRequest($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersDeleteUser'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersDeleteUserRequest($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersDeleteUser'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersGetIdentityProviderIntent
     *
     * Get the information of the IDP authentication intent
     *
     * @param  string $idpIntentId ID of the identity provider (IDP) intent, previously returned on the success response of the start identity provider intent. (required)
     * @param  string $idpIntentToken Token of the identity provider (IDP) intent, previously returned on the success response of the start identity provider intent. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaGetIdentityProviderIntentResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersGetIdentityProviderIntent($idpIntentId, $idpIntentToken, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersGetIdentityProviderIntentWithHttpInfo($idpIntentId, $idpIntentToken, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersGetIdentityProviderIntentWithHttpInfo
     *
     * Get the information of the IDP authentication intent
     *
     * @param  string $idpIntentId ID of the identity provider (IDP) intent, previously returned on the success response of the start identity provider intent. (required)
     * @param  string $idpIntentToken Token of the identity provider (IDP) intent, previously returned on the success response of the start identity provider intent. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaGetIdentityProviderIntentResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersGetIdentityProviderIntentWithHttpInfo($idpIntentId, $idpIntentToken, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersGetIdentityProviderIntentRequest($idpIntentId, $idpIntentToken, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaGetIdentityProviderIntentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaGetIdentityProviderIntentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaGetIdentityProviderIntentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaGetIdentityProviderIntentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersGetIdentityProviderIntentAsync
     *
     * Get the information of the IDP authentication intent
     *
     * @param  string $idpIntentId ID of the identity provider (IDP) intent, previously returned on the success response of the start identity provider intent. (required)
     * @param  string $idpIntentToken Token of the identity provider (IDP) intent, previously returned on the success response of the start identity provider intent. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersGetIdentityProviderIntentAsync($idpIntentId, $idpIntentToken, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersGetIdentityProviderIntentAsyncWithHttpInfo($idpIntentId, $idpIntentToken, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersGetIdentityProviderIntentAsyncWithHttpInfo
     *
     * Get the information of the IDP authentication intent
     *
     * @param  string $idpIntentId ID of the identity provider (IDP) intent, previously returned on the success response of the start identity provider intent. (required)
     * @param  string $idpIntentToken Token of the identity provider (IDP) intent, previously returned on the success response of the start identity provider intent. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersGetIdentityProviderIntentAsyncWithHttpInfo($idpIntentId, $idpIntentToken, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaGetIdentityProviderIntentResponse';
        $request = $this->zITADELUsersGetIdentityProviderIntentRequest($idpIntentId, $idpIntentToken, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersGetIdentityProviderIntent'
     *
     * @param  string $idpIntentId ID of the identity provider (IDP) intent, previously returned on the success response of the start identity provider intent. (required)
     * @param  string $idpIntentToken Token of the identity provider (IDP) intent, previously returned on the success response of the start identity provider intent. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersGetIdentityProviderIntentRequest($idpIntentId, $idpIntentToken, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'idpIntentId' is set
        if ($idpIntentId === null || (is_array($idpIntentId) && count($idpIntentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idpIntentId when calling zITADELUsersGetIdentityProviderIntent'
            );
        }
        // verify the required parameter 'idpIntentToken' is set
        if ($idpIntentToken === null || (is_array($idpIntentToken) && count($idpIntentToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idpIntentToken when calling zITADELUsersGetIdentityProviderIntent'
            );
        }

        $resourcePath = '/resources/v3alpha/idp_intents/{idpIntentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }
        // query params
        if (is_array($idpIntentToken)) {
            $idpIntentToken = ObjectSerializer::serializeCollection($idpIntentToken, '', true);
        }
        if ($idpIntentToken !== null) {
            $queryParams['idpIntentToken'] = $idpIntentToken;
        }


        // path params
        if ($idpIntentId !== null) {
            $resourcePath = str_replace(
                '{' . 'idpIntentId' . '}',
                ObjectSerializer::toPathValue($idpIntentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersGetUser
     *
     * User by ID
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaGetUserResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersGetUser($id, $instanceId = null, $instanceDomain = null)
    {
        list($response) = $this->zITADELUsersGetUserWithHttpInfo($id, $instanceId, $instanceDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersGetUserWithHttpInfo
     *
     * User by ID
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaGetUserResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersGetUserWithHttpInfo($id, $instanceId = null, $instanceDomain = null)
    {
        $request = $this->zITADELUsersGetUserRequest($id, $instanceId, $instanceDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaGetUserResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaGetUserResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaGetUserResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaGetUserResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersGetUserAsync
     *
     * User by ID
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersGetUserAsync($id, $instanceId = null, $instanceDomain = null)
    {
        return $this->zITADELUsersGetUserAsyncWithHttpInfo($id, $instanceId, $instanceDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersGetUserAsyncWithHttpInfo
     *
     * User by ID
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersGetUserAsyncWithHttpInfo($id, $instanceId = null, $instanceDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaGetUserResponse';
        $request = $this->zITADELUsersGetUserRequest($id, $instanceId, $instanceDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersGetUser'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersGetUserRequest($id, $instanceId = null, $instanceDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersGetUser'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersLockUser
     *
     * Lock a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Userv3alphaLockUserResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersLockUser($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersLockUserWithHttpInfo($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersLockUserWithHttpInfo
     *
     * Lock a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Userv3alphaLockUserResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersLockUserWithHttpInfo($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersLockUserRequest($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Userv3alphaLockUserResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Userv3alphaLockUserResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Userv3alphaLockUserResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Userv3alphaLockUserResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersLockUserAsync
     *
     * Lock a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersLockUserAsync($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersLockUserAsyncWithHttpInfo($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersLockUserAsyncWithHttpInfo
     *
     * Lock a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersLockUserAsyncWithHttpInfo($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Userv3alphaLockUserResponse';
        $request = $this->zITADELUsersLockUserRequest($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersLockUser'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersLockUserRequest($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersLockUser'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/_lock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersPatchUser
     *
     * Patch a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaPatchUser $user user (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaPatchUserResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersPatchUser($id, $user, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersPatchUserWithHttpInfo($id, $user, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersPatchUserWithHttpInfo
     *
     * Patch a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaPatchUser $user (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaPatchUserResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersPatchUserWithHttpInfo($id, $user, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersPatchUserRequest($id, $user, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaPatchUserResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaPatchUserResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaPatchUserResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaPatchUserResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersPatchUserAsync
     *
     * Patch a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaPatchUser $user (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersPatchUserAsync($id, $user, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersPatchUserAsyncWithHttpInfo($id, $user, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersPatchUserAsyncWithHttpInfo
     *
     * Patch a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaPatchUser $user (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersPatchUserAsyncWithHttpInfo($id, $user, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaPatchUserResponse';
        $request = $this->zITADELUsersPatchUserRequest($id, $user, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersPatchUser'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaPatchUser $user (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersPatchUserRequest($id, $user, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersPatchUser'
            );
        }
        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling zITADELUsersPatchUser'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($user)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($user));
            } else {
                $httpBody = $user;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PATCH', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersRemoveIDPAuthenticator
     *
     * Remove an IDP authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $idpId unique identifier of the identity provider (IDP) authenticator. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaRemoveIDPAuthenticatorResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersRemoveIDPAuthenticator($id, $idpId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersRemoveIDPAuthenticatorWithHttpInfo($id, $idpId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersRemoveIDPAuthenticatorWithHttpInfo
     *
     * Remove an IDP authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $idpId unique identifier of the identity provider (IDP) authenticator. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaRemoveIDPAuthenticatorResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersRemoveIDPAuthenticatorWithHttpInfo($id, $idpId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersRemoveIDPAuthenticatorRequest($id, $idpId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaRemoveIDPAuthenticatorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaRemoveIDPAuthenticatorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaRemoveIDPAuthenticatorResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaRemoveIDPAuthenticatorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersRemoveIDPAuthenticatorAsync
     *
     * Remove an IDP authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $idpId unique identifier of the identity provider (IDP) authenticator. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersRemoveIDPAuthenticatorAsync($id, $idpId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersRemoveIDPAuthenticatorAsyncWithHttpInfo($id, $idpId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersRemoveIDPAuthenticatorAsyncWithHttpInfo
     *
     * Remove an IDP authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $idpId unique identifier of the identity provider (IDP) authenticator. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersRemoveIDPAuthenticatorAsyncWithHttpInfo($id, $idpId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaRemoveIDPAuthenticatorResponse';
        $request = $this->zITADELUsersRemoveIDPAuthenticatorRequest($id, $idpId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersRemoveIDPAuthenticator'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $idpId unique identifier of the identity provider (IDP) authenticator. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersRemoveIDPAuthenticatorRequest($id, $idpId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersRemoveIDPAuthenticator'
            );
        }
        // verify the required parameter 'idpId' is set
        if ($idpId === null || (is_array($idpId) && count($idpId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idpId when calling zITADELUsersRemoveIDPAuthenticator'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/idps/{idpId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($idpId !== null) {
            $resourcePath = str_replace(
                '{' . 'idpId' . '}',
                ObjectSerializer::toPathValue($idpId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersRemoveOTPEmailAuthenticator
     *
     * Remove a OTP Email authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $otpEmailId unique identifier of the OTP Email authenticator. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaRemoveOTPEmailAuthenticatorResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersRemoveOTPEmailAuthenticator($id, $otpEmailId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersRemoveOTPEmailAuthenticatorWithHttpInfo($id, $otpEmailId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersRemoveOTPEmailAuthenticatorWithHttpInfo
     *
     * Remove a OTP Email authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $otpEmailId unique identifier of the OTP Email authenticator. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaRemoveOTPEmailAuthenticatorResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersRemoveOTPEmailAuthenticatorWithHttpInfo($id, $otpEmailId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersRemoveOTPEmailAuthenticatorRequest($id, $otpEmailId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaRemoveOTPEmailAuthenticatorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaRemoveOTPEmailAuthenticatorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaRemoveOTPEmailAuthenticatorResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaRemoveOTPEmailAuthenticatorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersRemoveOTPEmailAuthenticatorAsync
     *
     * Remove a OTP Email authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $otpEmailId unique identifier of the OTP Email authenticator. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersRemoveOTPEmailAuthenticatorAsync($id, $otpEmailId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersRemoveOTPEmailAuthenticatorAsyncWithHttpInfo($id, $otpEmailId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersRemoveOTPEmailAuthenticatorAsyncWithHttpInfo
     *
     * Remove a OTP Email authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $otpEmailId unique identifier of the OTP Email authenticator. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersRemoveOTPEmailAuthenticatorAsyncWithHttpInfo($id, $otpEmailId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaRemoveOTPEmailAuthenticatorResponse';
        $request = $this->zITADELUsersRemoveOTPEmailAuthenticatorRequest($id, $otpEmailId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersRemoveOTPEmailAuthenticator'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $otpEmailId unique identifier of the OTP Email authenticator. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersRemoveOTPEmailAuthenticatorRequest($id, $otpEmailId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersRemoveOTPEmailAuthenticator'
            );
        }
        // verify the required parameter 'otpEmailId' is set
        if ($otpEmailId === null || (is_array($otpEmailId) && count($otpEmailId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $otpEmailId when calling zITADELUsersRemoveOTPEmailAuthenticator'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/otp_email/{otpEmailId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($otpEmailId !== null) {
            $resourcePath = str_replace(
                '{' . 'otpEmailId' . '}',
                ObjectSerializer::toPathValue($otpEmailId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersRemoveOTPSMSAuthenticator
     *
     * Remove a OTP SMS authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $otpSmsId unique identifier of the OTP SMS authenticator. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaRemoveOTPSMSAuthenticatorResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersRemoveOTPSMSAuthenticator($id, $otpSmsId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersRemoveOTPSMSAuthenticatorWithHttpInfo($id, $otpSmsId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersRemoveOTPSMSAuthenticatorWithHttpInfo
     *
     * Remove a OTP SMS authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $otpSmsId unique identifier of the OTP SMS authenticator. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaRemoveOTPSMSAuthenticatorResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersRemoveOTPSMSAuthenticatorWithHttpInfo($id, $otpSmsId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersRemoveOTPSMSAuthenticatorRequest($id, $otpSmsId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaRemoveOTPSMSAuthenticatorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaRemoveOTPSMSAuthenticatorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaRemoveOTPSMSAuthenticatorResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaRemoveOTPSMSAuthenticatorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersRemoveOTPSMSAuthenticatorAsync
     *
     * Remove a OTP SMS authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $otpSmsId unique identifier of the OTP SMS authenticator. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersRemoveOTPSMSAuthenticatorAsync($id, $otpSmsId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersRemoveOTPSMSAuthenticatorAsyncWithHttpInfo($id, $otpSmsId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersRemoveOTPSMSAuthenticatorAsyncWithHttpInfo
     *
     * Remove a OTP SMS authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $otpSmsId unique identifier of the OTP SMS authenticator. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersRemoveOTPSMSAuthenticatorAsyncWithHttpInfo($id, $otpSmsId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaRemoveOTPSMSAuthenticatorResponse';
        $request = $this->zITADELUsersRemoveOTPSMSAuthenticatorRequest($id, $otpSmsId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersRemoveOTPSMSAuthenticator'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $otpSmsId unique identifier of the OTP SMS authenticator. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersRemoveOTPSMSAuthenticatorRequest($id, $otpSmsId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersRemoveOTPSMSAuthenticator'
            );
        }
        // verify the required parameter 'otpSmsId' is set
        if ($otpSmsId === null || (is_array($otpSmsId) && count($otpSmsId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $otpSmsId when calling zITADELUsersRemoveOTPSMSAuthenticator'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/otp_sms/{otpSmsId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($otpSmsId !== null) {
            $resourcePath = str_replace(
                '{' . 'otpSmsId' . '}',
                ObjectSerializer::toPathValue($otpSmsId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersRemoveTOTPAuthenticator
     *
     * Remove a TOTP authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $totpId unique identifier of the TOTP authenticator. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaRemoveTOTPAuthenticatorResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersRemoveTOTPAuthenticator($id, $totpId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersRemoveTOTPAuthenticatorWithHttpInfo($id, $totpId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersRemoveTOTPAuthenticatorWithHttpInfo
     *
     * Remove a TOTP authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $totpId unique identifier of the TOTP authenticator. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaRemoveTOTPAuthenticatorResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersRemoveTOTPAuthenticatorWithHttpInfo($id, $totpId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersRemoveTOTPAuthenticatorRequest($id, $totpId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaRemoveTOTPAuthenticatorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaRemoveTOTPAuthenticatorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaRemoveTOTPAuthenticatorResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaRemoveTOTPAuthenticatorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersRemoveTOTPAuthenticatorAsync
     *
     * Remove a TOTP authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $totpId unique identifier of the TOTP authenticator. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersRemoveTOTPAuthenticatorAsync($id, $totpId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersRemoveTOTPAuthenticatorAsyncWithHttpInfo($id, $totpId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersRemoveTOTPAuthenticatorAsyncWithHttpInfo
     *
     * Remove a TOTP authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $totpId unique identifier of the TOTP authenticator. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersRemoveTOTPAuthenticatorAsyncWithHttpInfo($id, $totpId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaRemoveTOTPAuthenticatorResponse';
        $request = $this->zITADELUsersRemoveTOTPAuthenticatorRequest($id, $totpId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersRemoveTOTPAuthenticator'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $totpId unique identifier of the TOTP authenticator. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersRemoveTOTPAuthenticatorRequest($id, $totpId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersRemoveTOTPAuthenticator'
            );
        }
        // verify the required parameter 'totpId' is set
        if ($totpId === null || (is_array($totpId) && count($totpId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $totpId when calling zITADELUsersRemoveTOTPAuthenticator'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/totp/{totpId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($totpId !== null) {
            $resourcePath = str_replace(
                '{' . 'totpId' . '}',
                ObjectSerializer::toPathValue($totpId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersRemoveUsername
     *
     * Remove a username
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $usernameId unique identifier of the username. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaRemoveUsernameResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersRemoveUsername($id, $usernameId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersRemoveUsernameWithHttpInfo($id, $usernameId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersRemoveUsernameWithHttpInfo
     *
     * Remove a username
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $usernameId unique identifier of the username. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaRemoveUsernameResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersRemoveUsernameWithHttpInfo($id, $usernameId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersRemoveUsernameRequest($id, $usernameId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaRemoveUsernameResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaRemoveUsernameResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaRemoveUsernameResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaRemoveUsernameResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersRemoveUsernameAsync
     *
     * Remove a username
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $usernameId unique identifier of the username. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersRemoveUsernameAsync($id, $usernameId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersRemoveUsernameAsyncWithHttpInfo($id, $usernameId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersRemoveUsernameAsyncWithHttpInfo
     *
     * Remove a username
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $usernameId unique identifier of the username. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersRemoveUsernameAsyncWithHttpInfo($id, $usernameId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaRemoveUsernameResponse';
        $request = $this->zITADELUsersRemoveUsernameRequest($id, $usernameId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersRemoveUsername'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $usernameId unique identifier of the username. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersRemoveUsernameRequest($id, $usernameId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersRemoveUsername'
            );
        }
        // verify the required parameter 'usernameId' is set
        if ($usernameId === null || (is_array($usernameId) && count($usernameId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usernameId when calling zITADELUsersRemoveUsername'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/username/{usernameId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($usernameId !== null) {
            $resourcePath = str_replace(
                '{' . 'usernameId' . '}',
                ObjectSerializer::toPathValue($usernameId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersRemoveWebAuthNAuthenticator
     *
     * Remove a WebAuthN authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $webAuthNId unique identifier of the WebAuthN authenticator. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaRemoveWebAuthNAuthenticatorResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersRemoveWebAuthNAuthenticator($id, $webAuthNId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersRemoveWebAuthNAuthenticatorWithHttpInfo($id, $webAuthNId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersRemoveWebAuthNAuthenticatorWithHttpInfo
     *
     * Remove a WebAuthN authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $webAuthNId unique identifier of the WebAuthN authenticator. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaRemoveWebAuthNAuthenticatorResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersRemoveWebAuthNAuthenticatorWithHttpInfo($id, $webAuthNId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersRemoveWebAuthNAuthenticatorRequest($id, $webAuthNId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaRemoveWebAuthNAuthenticatorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaRemoveWebAuthNAuthenticatorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaRemoveWebAuthNAuthenticatorResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaRemoveWebAuthNAuthenticatorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersRemoveWebAuthNAuthenticatorAsync
     *
     * Remove a WebAuthN authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $webAuthNId unique identifier of the WebAuthN authenticator. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersRemoveWebAuthNAuthenticatorAsync($id, $webAuthNId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersRemoveWebAuthNAuthenticatorAsyncWithHttpInfo($id, $webAuthNId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersRemoveWebAuthNAuthenticatorAsyncWithHttpInfo
     *
     * Remove a WebAuthN authenticator
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $webAuthNId unique identifier of the WebAuthN authenticator. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersRemoveWebAuthNAuthenticatorAsyncWithHttpInfo($id, $webAuthNId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaRemoveWebAuthNAuthenticatorResponse';
        $request = $this->zITADELUsersRemoveWebAuthNAuthenticatorRequest($id, $webAuthNId, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersRemoveWebAuthNAuthenticator'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $webAuthNId unique identifier of the WebAuthN authenticator. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersRemoveWebAuthNAuthenticatorRequest($id, $webAuthNId, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersRemoveWebAuthNAuthenticator'
            );
        }
        // verify the required parameter 'webAuthNId' is set
        if ($webAuthNId === null || (is_array($webAuthNId) && count($webAuthNId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webAuthNId when calling zITADELUsersRemoveWebAuthNAuthenticator'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/webauthn/{webAuthNId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($webAuthNId !== null) {
            $resourcePath = str_replace(
                '{' . 'webAuthNId' . '}',
                ObjectSerializer::toPathValue($webAuthNId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersRequestPasswordReset
     *
     * Request password reset
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\ZITADELUsersRequestPasswordResetBody $body body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaRequestPasswordResetResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersRequestPasswordReset($id, $body)
    {
        list($response) = $this->zITADELUsersRequestPasswordResetWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation zITADELUsersRequestPasswordResetWithHttpInfo
     *
     * Request password reset
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\ZITADELUsersRequestPasswordResetBody $body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaRequestPasswordResetResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersRequestPasswordResetWithHttpInfo($id, $body)
    {
        $request = $this->zITADELUsersRequestPasswordResetRequest($id, $body);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaRequestPasswordResetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaRequestPasswordResetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaRequestPasswordResetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaRequestPasswordResetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersRequestPasswordResetAsync
     *
     * Request password reset
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\ZITADELUsersRequestPasswordResetBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersRequestPasswordResetAsync($id, $body)
    {
        return $this->zITADELUsersRequestPasswordResetAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersRequestPasswordResetAsyncWithHttpInfo
     *
     * Request password reset
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\ZITADELUsersRequestPasswordResetBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersRequestPasswordResetAsyncWithHttpInfo($id, $body)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaRequestPasswordResetResponse';
        $request = $this->zITADELUsersRequestPasswordResetRequest($id, $body);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersRequestPasswordReset'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\ZITADELUsersRequestPasswordResetBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersRequestPasswordResetRequest($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersRequestPasswordReset'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling zITADELUsersRequestPasswordReset'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/password/_reset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersResendContactEmailCode
     *
     * Resend the contact email code
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\ZITADELUsersResendContactEmailCodeBody $body body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaResendContactEmailCodeResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersResendContactEmailCode($id, $body)
    {
        list($response) = $this->zITADELUsersResendContactEmailCodeWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation zITADELUsersResendContactEmailCodeWithHttpInfo
     *
     * Resend the contact email code
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\ZITADELUsersResendContactEmailCodeBody $body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaResendContactEmailCodeResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersResendContactEmailCodeWithHttpInfo($id, $body)
    {
        $request = $this->zITADELUsersResendContactEmailCodeRequest($id, $body);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaResendContactEmailCodeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaResendContactEmailCodeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaResendContactEmailCodeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaResendContactEmailCodeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersResendContactEmailCodeAsync
     *
     * Resend the contact email code
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\ZITADELUsersResendContactEmailCodeBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersResendContactEmailCodeAsync($id, $body)
    {
        return $this->zITADELUsersResendContactEmailCodeAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersResendContactEmailCodeAsyncWithHttpInfo
     *
     * Resend the contact email code
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\ZITADELUsersResendContactEmailCodeBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersResendContactEmailCodeAsyncWithHttpInfo($id, $body)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaResendContactEmailCodeResponse';
        $request = $this->zITADELUsersResendContactEmailCodeRequest($id, $body);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersResendContactEmailCode'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\ZITADELUsersResendContactEmailCodeBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersResendContactEmailCodeRequest($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersResendContactEmailCode'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling zITADELUsersResendContactEmailCode'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/email/_resend';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersResendContactPhoneCode
     *
     * Resend the contact phone code
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\ZITADELUsersResendContactPhoneCodeBody $body body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaResendContactPhoneCodeResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersResendContactPhoneCode($id, $body)
    {
        list($response) = $this->zITADELUsersResendContactPhoneCodeWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation zITADELUsersResendContactPhoneCodeWithHttpInfo
     *
     * Resend the contact phone code
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\ZITADELUsersResendContactPhoneCodeBody $body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaResendContactPhoneCodeResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersResendContactPhoneCodeWithHttpInfo($id, $body)
    {
        $request = $this->zITADELUsersResendContactPhoneCodeRequest($id, $body);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaResendContactPhoneCodeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaResendContactPhoneCodeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaResendContactPhoneCodeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaResendContactPhoneCodeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersResendContactPhoneCodeAsync
     *
     * Resend the contact phone code
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\ZITADELUsersResendContactPhoneCodeBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersResendContactPhoneCodeAsync($id, $body)
    {
        return $this->zITADELUsersResendContactPhoneCodeAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersResendContactPhoneCodeAsyncWithHttpInfo
     *
     * Resend the contact phone code
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\ZITADELUsersResendContactPhoneCodeBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersResendContactPhoneCodeAsyncWithHttpInfo($id, $body)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaResendContactPhoneCodeResponse';
        $request = $this->zITADELUsersResendContactPhoneCodeRequest($id, $body);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersResendContactPhoneCode'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\ZITADELUsersResendContactPhoneCodeBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersResendContactPhoneCodeRequest($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersResendContactPhoneCode'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling zITADELUsersResendContactPhoneCode'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/phone/_resend';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersSearchUsers
     *
     * Search users
     *
     * @param  \ArthurHlt\Zitadel\Model\Resourcesuserv3alphaSearchFilter[] $filters Define the criteria to query for. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $queryOffset queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error. (optional)
     * @param  bool $queryDesc default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results. (optional)
     * @param  string $sortingColumn the field the result is sorted. (optional, default to 'FIELD_NAME_UNSPECIFIED')
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaSearchUsersResponse|\ArthurHlt\Zitadel\Model\RpcStatus|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersSearchUsers($filters, $instanceId = null, $instanceDomain = null, $queryOffset = null, $queryLimit = null, $queryDesc = null, $sortingColumn = 'FIELD_NAME_UNSPECIFIED')
    {
        list($response) = $this->zITADELUsersSearchUsersWithHttpInfo($filters, $instanceId, $instanceDomain, $queryOffset, $queryLimit, $queryDesc, $sortingColumn);
        return $response;
    }

    /**
     * Operation zITADELUsersSearchUsersWithHttpInfo
     *
     * Search users
     *
     * @param  \ArthurHlt\Zitadel\Model\Resourcesuserv3alphaSearchFilter[] $filters Define the criteria to query for. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error. (optional)
     * @param  bool $queryDesc default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results. (optional)
     * @param  string $sortingColumn the field the result is sorted. (optional, default to 'FIELD_NAME_UNSPECIFIED')
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaSearchUsersResponse|\ArthurHlt\Zitadel\Model\RpcStatus|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersSearchUsersWithHttpInfo($filters, $instanceId = null, $instanceDomain = null, $queryOffset = null, $queryLimit = null, $queryDesc = null, $sortingColumn = 'FIELD_NAME_UNSPECIFIED')
    {
        $request = $this->zITADELUsersSearchUsersRequest($filters, $instanceId, $instanceDomain, $queryOffset, $queryLimit, $queryDesc, $sortingColumn);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaSearchUsersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaSearchUsersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaSearchUsersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaSearchUsersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersSearchUsersAsync
     *
     * Search users
     *
     * @param  \ArthurHlt\Zitadel\Model\Resourcesuserv3alphaSearchFilter[] $filters Define the criteria to query for. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error. (optional)
     * @param  bool $queryDesc default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results. (optional)
     * @param  string $sortingColumn the field the result is sorted. (optional, default to 'FIELD_NAME_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersSearchUsersAsync($filters, $instanceId = null, $instanceDomain = null, $queryOffset = null, $queryLimit = null, $queryDesc = null, $sortingColumn = 'FIELD_NAME_UNSPECIFIED')
    {
        return $this->zITADELUsersSearchUsersAsyncWithHttpInfo($filters, $instanceId, $instanceDomain, $queryOffset, $queryLimit, $queryDesc, $sortingColumn)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersSearchUsersAsyncWithHttpInfo
     *
     * Search users
     *
     * @param  \ArthurHlt\Zitadel\Model\Resourcesuserv3alphaSearchFilter[] $filters Define the criteria to query for. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error. (optional)
     * @param  bool $queryDesc default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results. (optional)
     * @param  string $sortingColumn the field the result is sorted. (optional, default to 'FIELD_NAME_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersSearchUsersAsyncWithHttpInfo($filters, $instanceId = null, $instanceDomain = null, $queryOffset = null, $queryLimit = null, $queryDesc = null, $sortingColumn = 'FIELD_NAME_UNSPECIFIED')
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaSearchUsersResponse';
        $request = $this->zITADELUsersSearchUsersRequest($filters, $instanceId, $instanceDomain, $queryOffset, $queryLimit, $queryDesc, $sortingColumn);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersSearchUsers'
     *
     * @param  \ArthurHlt\Zitadel\Model\Resourcesuserv3alphaSearchFilter[] $filters Define the criteria to query for. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error. (optional)
     * @param  bool $queryDesc default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results. (optional)
     * @param  string $sortingColumn the field the result is sorted. (optional, default to 'FIELD_NAME_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersSearchUsersRequest($filters, $instanceId = null, $instanceDomain = null, $queryOffset = null, $queryLimit = null, $queryDesc = null, $sortingColumn = 'FIELD_NAME_UNSPECIFIED')
    {
        // verify the required parameter 'filters' is set
        if ($filters === null || (is_array($filters) && count($filters) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filters when calling zITADELUsersSearchUsers'
            );
        }

        $resourcePath = '/resources/v3alpha/users/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($queryOffset)) {
            $queryOffset = ObjectSerializer::serializeCollection($queryOffset, '', true);
        }
        if ($queryOffset !== null) {
            $queryParams['query.offset'] = $queryOffset;
        }
        // query params
        if (is_array($queryLimit)) {
            $queryLimit = ObjectSerializer::serializeCollection($queryLimit, '', true);
        }
        if ($queryLimit !== null) {
            $queryParams['query.limit'] = $queryLimit;
        }
        // query params
        if (is_array($queryDesc)) {
            $queryDesc = ObjectSerializer::serializeCollection($queryDesc, '', true);
        }
        if ($queryDesc !== null) {
            $queryParams['query.desc'] = $queryDesc;
        }
        // query params
        if (is_array($sortingColumn)) {
            $sortingColumn = ObjectSerializer::serializeCollection($sortingColumn, '', true);
        }
        if ($sortingColumn !== null) {
            $queryParams['sortingColumn'] = $sortingColumn;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($filters)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($filters));
            } else {
                $httpBody = $filters;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersSetContactEmail
     *
     * Set contact email
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetEmail $email Set the user&#39;s contact email and it&#39;s verification state. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaSetContactEmailResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersSetContactEmail($id, $email, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersSetContactEmailWithHttpInfo($id, $email, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersSetContactEmailWithHttpInfo
     *
     * Set contact email
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetEmail $email Set the user&#39;s contact email and it&#39;s verification state. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaSetContactEmailResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersSetContactEmailWithHttpInfo($id, $email, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersSetContactEmailRequest($id, $email, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaSetContactEmailResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaSetContactEmailResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaSetContactEmailResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaSetContactEmailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersSetContactEmailAsync
     *
     * Set contact email
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetEmail $email Set the user&#39;s contact email and it&#39;s verification state. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersSetContactEmailAsync($id, $email, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersSetContactEmailAsyncWithHttpInfo($id, $email, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersSetContactEmailAsyncWithHttpInfo
     *
     * Set contact email
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetEmail $email Set the user&#39;s contact email and it&#39;s verification state. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersSetContactEmailAsyncWithHttpInfo($id, $email, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaSetContactEmailResponse';
        $request = $this->zITADELUsersSetContactEmailRequest($id, $email, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersSetContactEmail'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetEmail $email Set the user&#39;s contact email and it&#39;s verification state. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersSetContactEmailRequest($id, $email, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersSetContactEmail'
            );
        }
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling zITADELUsersSetContactEmail'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($email)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($email));
            } else {
                $httpBody = $email;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersSetContactPhone
     *
     * Set contact phone
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetPhone $phone Set the user&#39;s contact phone and it&#39;s verification state. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaSetContactPhoneResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersSetContactPhone($id, $phone, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersSetContactPhoneWithHttpInfo($id, $phone, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersSetContactPhoneWithHttpInfo
     *
     * Set contact phone
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetPhone $phone Set the user&#39;s contact phone and it&#39;s verification state. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaSetContactPhoneResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersSetContactPhoneWithHttpInfo($id, $phone, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersSetContactPhoneRequest($id, $phone, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaSetContactPhoneResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaSetContactPhoneResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaSetContactPhoneResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaSetContactPhoneResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersSetContactPhoneAsync
     *
     * Set contact phone
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetPhone $phone Set the user&#39;s contact phone and it&#39;s verification state. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersSetContactPhoneAsync($id, $phone, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersSetContactPhoneAsyncWithHttpInfo($id, $phone, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersSetContactPhoneAsyncWithHttpInfo
     *
     * Set contact phone
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetPhone $phone Set the user&#39;s contact phone and it&#39;s verification state. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersSetContactPhoneAsyncWithHttpInfo($id, $phone, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaSetContactPhoneResponse';
        $request = $this->zITADELUsersSetContactPhoneRequest($id, $phone, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersSetContactPhone'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetPhone $phone Set the user&#39;s contact phone and it&#39;s verification state. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersSetContactPhoneRequest($id, $phone, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersSetContactPhone'
            );
        }
        // verify the required parameter 'phone' is set
        if ($phone === null || (is_array($phone) && count($phone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone when calling zITADELUsersSetContactPhone'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/phone';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($phone)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($phone));
            } else {
                $httpBody = $phone;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersSetPassword
     *
     * Set a password
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetPassword $newPassword Provide the new password (in plain text or as hash). (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Userv3alphaSetPasswordResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersSetPassword($id, $newPassword, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersSetPasswordWithHttpInfo($id, $newPassword, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersSetPasswordWithHttpInfo
     *
     * Set a password
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetPassword $newPassword Provide the new password (in plain text or as hash). (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Userv3alphaSetPasswordResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersSetPasswordWithHttpInfo($id, $newPassword, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersSetPasswordRequest($id, $newPassword, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Userv3alphaSetPasswordResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Userv3alphaSetPasswordResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Userv3alphaSetPasswordResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Userv3alphaSetPasswordResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersSetPasswordAsync
     *
     * Set a password
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetPassword $newPassword Provide the new password (in plain text or as hash). (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersSetPasswordAsync($id, $newPassword, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersSetPasswordAsyncWithHttpInfo($id, $newPassword, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersSetPasswordAsyncWithHttpInfo
     *
     * Set a password
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetPassword $newPassword Provide the new password (in plain text or as hash). (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersSetPasswordAsyncWithHttpInfo($id, $newPassword, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Userv3alphaSetPasswordResponse';
        $request = $this->zITADELUsersSetPasswordRequest($id, $newPassword, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersSetPassword'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaSetPassword $newPassword Provide the new password (in plain text or as hash). (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersSetPasswordRequest($id, $newPassword, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersSetPassword'
            );
        }
        // verify the required parameter 'newPassword' is set
        if ($newPassword === null || (is_array($newPassword) && count($newPassword) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newPassword when calling zITADELUsersSetPassword'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/password';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($newPassword)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($newPassword));
            } else {
                $httpBody = $newPassword;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersStartIdentityProviderIntent
     *
     * Start an IDP authentication intent
     *
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaStartIdentityProviderIntentRequest $body body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Userv3alphaStartIdentityProviderIntentResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersStartIdentityProviderIntent($body)
    {
        list($response) = $this->zITADELUsersStartIdentityProviderIntentWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation zITADELUsersStartIdentityProviderIntentWithHttpInfo
     *
     * Start an IDP authentication intent
     *
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaStartIdentityProviderIntentRequest $body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Userv3alphaStartIdentityProviderIntentResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersStartIdentityProviderIntentWithHttpInfo($body)
    {
        $request = $this->zITADELUsersStartIdentityProviderIntentRequest($body);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Userv3alphaStartIdentityProviderIntentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Userv3alphaStartIdentityProviderIntentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Userv3alphaStartIdentityProviderIntentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Userv3alphaStartIdentityProviderIntentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersStartIdentityProviderIntentAsync
     *
     * Start an IDP authentication intent
     *
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaStartIdentityProviderIntentRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersStartIdentityProviderIntentAsync($body)
    {
        return $this->zITADELUsersStartIdentityProviderIntentAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersStartIdentityProviderIntentAsyncWithHttpInfo
     *
     * Start an IDP authentication intent
     *
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaStartIdentityProviderIntentRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersStartIdentityProviderIntentAsyncWithHttpInfo($body)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Userv3alphaStartIdentityProviderIntentResponse';
        $request = $this->zITADELUsersStartIdentityProviderIntentRequest($body);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersStartIdentityProviderIntent'
     *
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaStartIdentityProviderIntentRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersStartIdentityProviderIntentRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling zITADELUsersStartIdentityProviderIntent'
            );
        }

        $resourcePath = '/resources/v3alpha/idp_intents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersStartTOTPRegistration
     *
     * Start a TOTP registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaStartTOTPRegistrationResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersStartTOTPRegistration($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersStartTOTPRegistrationWithHttpInfo($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersStartTOTPRegistrationWithHttpInfo
     *
     * Start a TOTP registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaStartTOTPRegistrationResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersStartTOTPRegistrationWithHttpInfo($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersStartTOTPRegistrationRequest($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaStartTOTPRegistrationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaStartTOTPRegistrationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaStartTOTPRegistrationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaStartTOTPRegistrationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersStartTOTPRegistrationAsync
     *
     * Start a TOTP registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersStartTOTPRegistrationAsync($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersStartTOTPRegistrationAsyncWithHttpInfo($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersStartTOTPRegistrationAsyncWithHttpInfo
     *
     * Start a TOTP registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersStartTOTPRegistrationAsyncWithHttpInfo($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaStartTOTPRegistrationResponse';
        $request = $this->zITADELUsersStartTOTPRegistrationRequest($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersStartTOTPRegistration'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersStartTOTPRegistrationRequest($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersStartTOTPRegistration'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/totp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersStartWebAuthNRegistration
     *
     * Start a WebAuthN registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaStartWebAuthNRegistration $registration registration (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaStartWebAuthNRegistrationResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersStartWebAuthNRegistration($id, $registration, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersStartWebAuthNRegistrationWithHttpInfo($id, $registration, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersStartWebAuthNRegistrationWithHttpInfo
     *
     * Start a WebAuthN registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaStartWebAuthNRegistration $registration (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaStartWebAuthNRegistrationResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersStartWebAuthNRegistrationWithHttpInfo($id, $registration, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersStartWebAuthNRegistrationRequest($id, $registration, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaStartWebAuthNRegistrationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaStartWebAuthNRegistrationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaStartWebAuthNRegistrationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaStartWebAuthNRegistrationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersStartWebAuthNRegistrationAsync
     *
     * Start a WebAuthN registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaStartWebAuthNRegistration $registration (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersStartWebAuthNRegistrationAsync($id, $registration, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersStartWebAuthNRegistrationAsyncWithHttpInfo($id, $registration, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersStartWebAuthNRegistrationAsyncWithHttpInfo
     *
     * Start a WebAuthN registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaStartWebAuthNRegistration $registration (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersStartWebAuthNRegistrationAsyncWithHttpInfo($id, $registration, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaStartWebAuthNRegistrationResponse';
        $request = $this->zITADELUsersStartWebAuthNRegistrationRequest($id, $registration, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersStartWebAuthNRegistration'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaStartWebAuthNRegistration $registration (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersStartWebAuthNRegistrationRequest($id, $registration, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersStartWebAuthNRegistration'
            );
        }
        // verify the required parameter 'registration' is set
        if ($registration === null || (is_array($registration) && count($registration) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $registration when calling zITADELUsersStartWebAuthNRegistration'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/webauthn';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($registration)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($registration));
            } else {
                $httpBody = $registration;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersUnlockUser
     *
     * Unlock a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Userv3alphaUnlockUserResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersUnlockUser($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersUnlockUserWithHttpInfo($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersUnlockUserWithHttpInfo
     *
     * Unlock a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Userv3alphaUnlockUserResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersUnlockUserWithHttpInfo($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersUnlockUserRequest($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Userv3alphaUnlockUserResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Userv3alphaUnlockUserResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Userv3alphaUnlockUserResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Userv3alphaUnlockUserResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersUnlockUserAsync
     *
     * Unlock a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersUnlockUserAsync($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersUnlockUserAsyncWithHttpInfo($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersUnlockUserAsyncWithHttpInfo
     *
     * Unlock a user
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersUnlockUserAsyncWithHttpInfo($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Userv3alphaUnlockUserResponse';
        $request = $this->zITADELUsersUnlockUserRequest($id, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersUnlockUser'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersUnlockUserRequest($id, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersUnlockUser'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/_unlock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersVerifyContactEmail
     *
     * Verify the contact email
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $verificationCode Set the verification code generated during the set contact email request. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaVerifyContactEmailResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersVerifyContactEmail($id, $verificationCode, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersVerifyContactEmailWithHttpInfo($id, $verificationCode, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersVerifyContactEmailWithHttpInfo
     *
     * Verify the contact email
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $verificationCode Set the verification code generated during the set contact email request. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaVerifyContactEmailResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersVerifyContactEmailWithHttpInfo($id, $verificationCode, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersVerifyContactEmailRequest($id, $verificationCode, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaVerifyContactEmailResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaVerifyContactEmailResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaVerifyContactEmailResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaVerifyContactEmailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersVerifyContactEmailAsync
     *
     * Verify the contact email
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $verificationCode Set the verification code generated during the set contact email request. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersVerifyContactEmailAsync($id, $verificationCode, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersVerifyContactEmailAsyncWithHttpInfo($id, $verificationCode, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersVerifyContactEmailAsyncWithHttpInfo
     *
     * Verify the contact email
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $verificationCode Set the verification code generated during the set contact email request. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersVerifyContactEmailAsyncWithHttpInfo($id, $verificationCode, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaVerifyContactEmailResponse';
        $request = $this->zITADELUsersVerifyContactEmailRequest($id, $verificationCode, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersVerifyContactEmail'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $verificationCode Set the verification code generated during the set contact email request. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersVerifyContactEmailRequest($id, $verificationCode, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersVerifyContactEmail'
            );
        }
        // verify the required parameter 'verificationCode' is set
        if ($verificationCode === null || (is_array($verificationCode) && count($verificationCode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verificationCode when calling zITADELUsersVerifyContactEmail'
            );
        }
        if (strlen($verificationCode) > 20) {
            throw new \InvalidArgumentException('invalid length for "$verificationCode" when calling ZITADELUsersApi.zITADELUsersVerifyContactEmail, must be smaller than or equal to 20.');
        }
        if (strlen($verificationCode) < 1) {
            throw new \InvalidArgumentException('invalid length for "$verificationCode" when calling ZITADELUsersApi.zITADELUsersVerifyContactEmail, must be bigger than or equal to 1.');
        }


        $resourcePath = '/resources/v3alpha/users/{id}/email/_verify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($verificationCode)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($verificationCode));
            } else {
                $httpBody = $verificationCode;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersVerifyContactPhone
     *
     * Verify the contact phone
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $verificationCode Set the verification code generated during the set contact phone request. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaVerifyContactPhoneResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersVerifyContactPhone($id, $verificationCode, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersVerifyContactPhoneWithHttpInfo($id, $verificationCode, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersVerifyContactPhoneWithHttpInfo
     *
     * Verify the contact phone
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $verificationCode Set the verification code generated during the set contact phone request. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaVerifyContactPhoneResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersVerifyContactPhoneWithHttpInfo($id, $verificationCode, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersVerifyContactPhoneRequest($id, $verificationCode, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaVerifyContactPhoneResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaVerifyContactPhoneResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaVerifyContactPhoneResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaVerifyContactPhoneResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersVerifyContactPhoneAsync
     *
     * Verify the contact phone
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $verificationCode Set the verification code generated during the set contact phone request. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersVerifyContactPhoneAsync($id, $verificationCode, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersVerifyContactPhoneAsyncWithHttpInfo($id, $verificationCode, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersVerifyContactPhoneAsyncWithHttpInfo
     *
     * Verify the contact phone
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $verificationCode Set the verification code generated during the set contact phone request. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersVerifyContactPhoneAsyncWithHttpInfo($id, $verificationCode, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaVerifyContactPhoneResponse';
        $request = $this->zITADELUsersVerifyContactPhoneRequest($id, $verificationCode, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersVerifyContactPhone'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $verificationCode Set the verification code generated during the set contact phone request. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersVerifyContactPhoneRequest($id, $verificationCode, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersVerifyContactPhone'
            );
        }
        // verify the required parameter 'verificationCode' is set
        if ($verificationCode === null || (is_array($verificationCode) && count($verificationCode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verificationCode when calling zITADELUsersVerifyContactPhone'
            );
        }
        if (strlen($verificationCode) > 20) {
            throw new \InvalidArgumentException('invalid length for "$verificationCode" when calling ZITADELUsersApi.zITADELUsersVerifyContactPhone, must be smaller than or equal to 20.');
        }
        if (strlen($verificationCode) < 1) {
            throw new \InvalidArgumentException('invalid length for "$verificationCode" when calling ZITADELUsersApi.zITADELUsersVerifyContactPhone, must be bigger than or equal to 1.');
        }


        $resourcePath = '/resources/v3alpha/users/{id}/phone/_verify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($verificationCode)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($verificationCode));
            } else {
                $httpBody = $verificationCode;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersVerifyOTPEmailRegistration
     *
     * Verify OTP Email registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $otpEmailId unique identifier of the OTP Email registration, which was returned in the add OTP Email. (required)
     * @param  string $code Set the verification code generated during the add OTP Email request. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaVerifyOTPEmailRegistrationResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersVerifyOTPEmailRegistration($id, $otpEmailId, $code, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersVerifyOTPEmailRegistrationWithHttpInfo($id, $otpEmailId, $code, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersVerifyOTPEmailRegistrationWithHttpInfo
     *
     * Verify OTP Email registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $otpEmailId unique identifier of the OTP Email registration, which was returned in the add OTP Email. (required)
     * @param  string $code Set the verification code generated during the add OTP Email request. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaVerifyOTPEmailRegistrationResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersVerifyOTPEmailRegistrationWithHttpInfo($id, $otpEmailId, $code, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersVerifyOTPEmailRegistrationRequest($id, $otpEmailId, $code, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaVerifyOTPEmailRegistrationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaVerifyOTPEmailRegistrationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaVerifyOTPEmailRegistrationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaVerifyOTPEmailRegistrationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersVerifyOTPEmailRegistrationAsync
     *
     * Verify OTP Email registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $otpEmailId unique identifier of the OTP Email registration, which was returned in the add OTP Email. (required)
     * @param  string $code Set the verification code generated during the add OTP Email request. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersVerifyOTPEmailRegistrationAsync($id, $otpEmailId, $code, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersVerifyOTPEmailRegistrationAsyncWithHttpInfo($id, $otpEmailId, $code, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersVerifyOTPEmailRegistrationAsyncWithHttpInfo
     *
     * Verify OTP Email registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $otpEmailId unique identifier of the OTP Email registration, which was returned in the add OTP Email. (required)
     * @param  string $code Set the verification code generated during the add OTP Email request. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersVerifyOTPEmailRegistrationAsyncWithHttpInfo($id, $otpEmailId, $code, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaVerifyOTPEmailRegistrationResponse';
        $request = $this->zITADELUsersVerifyOTPEmailRegistrationRequest($id, $otpEmailId, $code, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersVerifyOTPEmailRegistration'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $otpEmailId unique identifier of the OTP Email registration, which was returned in the add OTP Email. (required)
     * @param  string $code Set the verification code generated during the add OTP Email request. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersVerifyOTPEmailRegistrationRequest($id, $otpEmailId, $code, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersVerifyOTPEmailRegistration'
            );
        }
        // verify the required parameter 'otpEmailId' is set
        if ($otpEmailId === null || (is_array($otpEmailId) && count($otpEmailId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $otpEmailId when calling zITADELUsersVerifyOTPEmailRegistration'
            );
        }
        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling zITADELUsersVerifyOTPEmailRegistration'
            );
        }
        if (strlen($code) > 200) {
            throw new \InvalidArgumentException('invalid length for "$code" when calling ZITADELUsersApi.zITADELUsersVerifyOTPEmailRegistration, must be smaller than or equal to 200.');
        }
        if (strlen($code) < 1) {
            throw new \InvalidArgumentException('invalid length for "$code" when calling ZITADELUsersApi.zITADELUsersVerifyOTPEmailRegistration, must be bigger than or equal to 1.');
        }


        $resourcePath = '/resources/v3alpha/users/{id}/otp_email/{otpEmailId}/_verify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($otpEmailId !== null) {
            $resourcePath = str_replace(
                '{' . 'otpEmailId' . '}',
                ObjectSerializer::toPathValue($otpEmailId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($code)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($code));
            } else {
                $httpBody = $code;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersVerifyOTPSMSRegistration
     *
     * Verify OTP SMS registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $otpSmsId unique identifier of the OTP SMS registration, which was returned in the add OTP SMS. (required)
     * @param  string $code Set the verification code generated during the add OTP SMS request. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaVerifyOTPSMSRegistrationResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersVerifyOTPSMSRegistration($id, $otpSmsId, $code, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersVerifyOTPSMSRegistrationWithHttpInfo($id, $otpSmsId, $code, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersVerifyOTPSMSRegistrationWithHttpInfo
     *
     * Verify OTP SMS registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $otpSmsId unique identifier of the OTP SMS registration, which was returned in the add OTP SMS. (required)
     * @param  string $code Set the verification code generated during the add OTP SMS request. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaVerifyOTPSMSRegistrationResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersVerifyOTPSMSRegistrationWithHttpInfo($id, $otpSmsId, $code, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersVerifyOTPSMSRegistrationRequest($id, $otpSmsId, $code, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaVerifyOTPSMSRegistrationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaVerifyOTPSMSRegistrationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaVerifyOTPSMSRegistrationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaVerifyOTPSMSRegistrationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersVerifyOTPSMSRegistrationAsync
     *
     * Verify OTP SMS registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $otpSmsId unique identifier of the OTP SMS registration, which was returned in the add OTP SMS. (required)
     * @param  string $code Set the verification code generated during the add OTP SMS request. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersVerifyOTPSMSRegistrationAsync($id, $otpSmsId, $code, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersVerifyOTPSMSRegistrationAsyncWithHttpInfo($id, $otpSmsId, $code, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersVerifyOTPSMSRegistrationAsyncWithHttpInfo
     *
     * Verify OTP SMS registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $otpSmsId unique identifier of the OTP SMS registration, which was returned in the add OTP SMS. (required)
     * @param  string $code Set the verification code generated during the add OTP SMS request. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersVerifyOTPSMSRegistrationAsyncWithHttpInfo($id, $otpSmsId, $code, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaVerifyOTPSMSRegistrationResponse';
        $request = $this->zITADELUsersVerifyOTPSMSRegistrationRequest($id, $otpSmsId, $code, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersVerifyOTPSMSRegistration'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $otpSmsId unique identifier of the OTP SMS registration, which was returned in the add OTP SMS. (required)
     * @param  string $code Set the verification code generated during the add OTP SMS request. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersVerifyOTPSMSRegistrationRequest($id, $otpSmsId, $code, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersVerifyOTPSMSRegistration'
            );
        }
        // verify the required parameter 'otpSmsId' is set
        if ($otpSmsId === null || (is_array($otpSmsId) && count($otpSmsId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $otpSmsId when calling zITADELUsersVerifyOTPSMSRegistration'
            );
        }
        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling zITADELUsersVerifyOTPSMSRegistration'
            );
        }
        if (strlen($code) > 200) {
            throw new \InvalidArgumentException('invalid length for "$code" when calling ZITADELUsersApi.zITADELUsersVerifyOTPSMSRegistration, must be smaller than or equal to 200.');
        }
        if (strlen($code) < 1) {
            throw new \InvalidArgumentException('invalid length for "$code" when calling ZITADELUsersApi.zITADELUsersVerifyOTPSMSRegistration, must be bigger than or equal to 1.');
        }


        $resourcePath = '/resources/v3alpha/users/{id}/otp_sms/{otpSmsId}/_verify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($otpSmsId !== null) {
            $resourcePath = str_replace(
                '{' . 'otpSmsId' . '}',
                ObjectSerializer::toPathValue($otpSmsId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($code)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($code));
            } else {
                $httpBody = $code;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersVerifyTOTPRegistration
     *
     * Verify a TOTP registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $totpId unique identifier of the TOTP registration, which was returned in the start TOTP registration. (required)
     * @param  string $code Code generated by TOTP app or device. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Userv3alphaVerifyTOTPRegistrationResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersVerifyTOTPRegistration($id, $totpId, $code, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersVerifyTOTPRegistrationWithHttpInfo($id, $totpId, $code, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersVerifyTOTPRegistrationWithHttpInfo
     *
     * Verify a TOTP registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $totpId unique identifier of the TOTP registration, which was returned in the start TOTP registration. (required)
     * @param  string $code Code generated by TOTP app or device. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Userv3alphaVerifyTOTPRegistrationResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersVerifyTOTPRegistrationWithHttpInfo($id, $totpId, $code, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersVerifyTOTPRegistrationRequest($id, $totpId, $code, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Userv3alphaVerifyTOTPRegistrationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Userv3alphaVerifyTOTPRegistrationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Userv3alphaVerifyTOTPRegistrationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Userv3alphaVerifyTOTPRegistrationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersVerifyTOTPRegistrationAsync
     *
     * Verify a TOTP registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $totpId unique identifier of the TOTP registration, which was returned in the start TOTP registration. (required)
     * @param  string $code Code generated by TOTP app or device. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersVerifyTOTPRegistrationAsync($id, $totpId, $code, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersVerifyTOTPRegistrationAsyncWithHttpInfo($id, $totpId, $code, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersVerifyTOTPRegistrationAsyncWithHttpInfo
     *
     * Verify a TOTP registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $totpId unique identifier of the TOTP registration, which was returned in the start TOTP registration. (required)
     * @param  string $code Code generated by TOTP app or device. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersVerifyTOTPRegistrationAsyncWithHttpInfo($id, $totpId, $code, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Userv3alphaVerifyTOTPRegistrationResponse';
        $request = $this->zITADELUsersVerifyTOTPRegistrationRequest($id, $totpId, $code, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersVerifyTOTPRegistration'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $totpId unique identifier of the TOTP registration, which was returned in the start TOTP registration. (required)
     * @param  string $code Code generated by TOTP app or device. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersVerifyTOTPRegistrationRequest($id, $totpId, $code, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersVerifyTOTPRegistration'
            );
        }
        // verify the required parameter 'totpId' is set
        if ($totpId === null || (is_array($totpId) && count($totpId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $totpId when calling zITADELUsersVerifyTOTPRegistration'
            );
        }
        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling zITADELUsersVerifyTOTPRegistration'
            );
        }
        if (strlen($code) > 9) {
            throw new \InvalidArgumentException('invalid length for "$code" when calling ZITADELUsersApi.zITADELUsersVerifyTOTPRegistration, must be smaller than or equal to 9.');
        }
        if (strlen($code) < 6) {
            throw new \InvalidArgumentException('invalid length for "$code" when calling ZITADELUsersApi.zITADELUsersVerifyTOTPRegistration, must be bigger than or equal to 6.');
        }


        $resourcePath = '/resources/v3alpha/users/{id}/totp/{totpId}/_verify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($totpId !== null) {
            $resourcePath = str_replace(
                '{' . 'totpId' . '}',
                ObjectSerializer::toPathValue($totpId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($code)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($code));
            } else {
                $httpBody = $code;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUsersVerifyWebAuthNRegistration
     *
     * Verify a WebAuthN registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $webAuthNId unique identifier of the WebAuthN registration, which was returned in the start webauthn registration. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaVerifyWebAuthNRegistration $verify verify (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $organizationOrgId organizationOrgId (optional)
     * @param  string $organizationOrgDomain organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaVerifyWebAuthNRegistrationResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUsersVerifyWebAuthNRegistration($id, $webAuthNId, $verify, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        list($response) = $this->zITADELUsersVerifyWebAuthNRegistrationWithHttpInfo($id, $webAuthNId, $verify, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);
        return $response;
    }

    /**
     * Operation zITADELUsersVerifyWebAuthNRegistrationWithHttpInfo
     *
     * Verify a WebAuthN registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $webAuthNId unique identifier of the WebAuthN registration, which was returned in the start webauthn registration. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaVerifyWebAuthNRegistration $verify (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaVerifyWebAuthNRegistrationResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUsersVerifyWebAuthNRegistrationWithHttpInfo($id, $webAuthNId, $verify, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $request = $this->zITADELUsersVerifyWebAuthNRegistrationRequest($id, $webAuthNId, $verify, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaVerifyWebAuthNRegistrationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaVerifyWebAuthNRegistrationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaVerifyWebAuthNRegistrationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaVerifyWebAuthNRegistrationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUsersVerifyWebAuthNRegistrationAsync
     *
     * Verify a WebAuthN registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $webAuthNId unique identifier of the WebAuthN registration, which was returned in the start webauthn registration. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaVerifyWebAuthNRegistration $verify (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersVerifyWebAuthNRegistrationAsync($id, $webAuthNId, $verify, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        return $this->zITADELUsersVerifyWebAuthNRegistrationAsyncWithHttpInfo($id, $webAuthNId, $verify, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUsersVerifyWebAuthNRegistrationAsyncWithHttpInfo
     *
     * Verify a WebAuthN registration
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $webAuthNId unique identifier of the WebAuthN registration, which was returned in the start webauthn registration. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaVerifyWebAuthNRegistration $verify (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUsersVerifyWebAuthNRegistrationAsyncWithHttpInfo($id, $webAuthNId, $verify, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaVerifyWebAuthNRegistrationResponse';
        $request = $this->zITADELUsersVerifyWebAuthNRegistrationRequest($id, $webAuthNId, $verify, $instanceId, $instanceDomain, $organizationOrgId, $organizationOrgDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUsersVerifyWebAuthNRegistration'
     *
     * @param  string $id unique identifier of the user. (required)
     * @param  string $webAuthNId unique identifier of the WebAuthN registration, which was returned in the start webauthn registration. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userv3alphaVerifyWebAuthNRegistration $verify (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $organizationOrgId (optional)
     * @param  string $organizationOrgDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUsersVerifyWebAuthNRegistrationRequest($id, $webAuthNId, $verify, $instanceId = null, $instanceDomain = null, $organizationOrgId = null, $organizationOrgDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUsersVerifyWebAuthNRegistration'
            );
        }
        // verify the required parameter 'webAuthNId' is set
        if ($webAuthNId === null || (is_array($webAuthNId) && count($webAuthNId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webAuthNId when calling zITADELUsersVerifyWebAuthNRegistration'
            );
        }
        // verify the required parameter 'verify' is set
        if ($verify === null || (is_array($verify) && count($verify) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verify when calling zITADELUsersVerifyWebAuthNRegistration'
            );
        }

        $resourcePath = '/resources/v3alpha/users/{id}/webauthn/{webAuthNId}/_verify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($organizationOrgId)) {
            $organizationOrgId = ObjectSerializer::serializeCollection($organizationOrgId, '', true);
        }
        if ($organizationOrgId !== null) {
            $queryParams['organization.orgId'] = $organizationOrgId;
        }
        // query params
        if (is_array($organizationOrgDomain)) {
            $organizationOrgDomain = ObjectSerializer::serializeCollection($organizationOrgDomain, '', true);
        }
        if ($organizationOrgDomain !== null) {
            $queryParams['organization.orgDomain'] = $organizationOrgDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($webAuthNId !== null) {
            $resourcePath = str_replace(
                '{' . 'webAuthNId' . '}',
                ObjectSerializer::toPathValue($webAuthNId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($verify)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($verify));
            } else {
                $httpBody = $verify;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
