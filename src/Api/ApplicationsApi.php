<?php
/**
 * ApplicationsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ArthurHlt\Zitadel\Api;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use ArthurHlt\Zitadel\ApiException;
use ArthurHlt\Zitadel\Configuration;
use ArthurHlt\Zitadel\DebugPlugin;
use ArthurHlt\Zitadel\HeaderSelector;
use ArthurHlt\Zitadel\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * ApplicationsApi Class Doc Comment
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ApplicationsApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://zitadel.cloud/management/v1');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation managementServiceAddAPIApp
     *
     * Create Application (API)
     *
     * @param  string $projectId projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddAPIAppBody $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1AddAPIAppResponse|\ArthurHlt\Zitadel\Model\V1AddAPIAppResponse|\ArthurHlt\Zitadel\Model\V1AddAPIAppResponse|\ArthurHlt\Zitadel\Model\V1AddAPIAppResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceAddAPIApp($projectId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceAddAPIAppWithHttpInfo($projectId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceAddAPIAppWithHttpInfo
     *
     * Create Application (API)
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddAPIAppBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1AddAPIAppResponse|\ArthurHlt\Zitadel\Model\V1AddAPIAppResponse|\ArthurHlt\Zitadel\Model\V1AddAPIAppResponse|\ArthurHlt\Zitadel\Model\V1AddAPIAppResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceAddAPIAppWithHttpInfo($projectId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceAddAPIAppRequest($projectId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1AddAPIAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddAPIAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1AddAPIAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddAPIAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1AddAPIAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddAPIAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1AddAPIAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddAPIAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1AddAPIAppResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddAPIAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddAPIAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddAPIAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddAPIAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceAddAPIAppAsync
     *
     * Create Application (API)
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddAPIAppBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceAddAPIAppAsync($projectId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceAddAPIAppAsyncWithHttpInfo($projectId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceAddAPIAppAsyncWithHttpInfo
     *
     * Create Application (API)
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddAPIAppBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceAddAPIAppAsyncWithHttpInfo($projectId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1AddAPIAppResponse';
        $request = $this->managementServiceAddAPIAppRequest($projectId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceAddAPIApp'
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddAPIAppBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceAddAPIAppRequest($projectId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceAddAPIApp'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceAddAPIApp'
            );
        }

        $resourcePath = '/projects/{projectId}/apps/api';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceAddAppKey
     *
     * Create Application Key
     *
     * @param  string $projectId projectId (required)
     * @param  string $appId appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddAppKeyBody $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1AddAppKeyResponse|\ArthurHlt\Zitadel\Model\V1AddAppKeyResponse|\ArthurHlt\Zitadel\Model\V1AddAppKeyResponse|\ArthurHlt\Zitadel\Model\V1AddAppKeyResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceAddAppKey($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceAddAppKeyWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceAddAppKeyWithHttpInfo
     *
     * Create Application Key
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddAppKeyBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1AddAppKeyResponse|\ArthurHlt\Zitadel\Model\V1AddAppKeyResponse|\ArthurHlt\Zitadel\Model\V1AddAppKeyResponse|\ArthurHlt\Zitadel\Model\V1AddAppKeyResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceAddAppKeyWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceAddAppKeyRequest($projectId, $appId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1AddAppKeyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddAppKeyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1AddAppKeyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddAppKeyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1AddAppKeyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddAppKeyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1AddAppKeyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddAppKeyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1AddAppKeyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddAppKeyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddAppKeyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddAppKeyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddAppKeyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceAddAppKeyAsync
     *
     * Create Application Key
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddAppKeyBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceAddAppKeyAsync($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceAddAppKeyAsyncWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceAddAppKeyAsyncWithHttpInfo
     *
     * Create Application Key
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddAppKeyBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceAddAppKeyAsyncWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1AddAppKeyResponse';
        $request = $this->managementServiceAddAppKeyRequest($projectId, $appId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceAddAppKey'
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddAppKeyBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceAddAppKeyRequest($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceAddAppKey'
            );
        }
        // verify the required parameter 'appId' is set
        if ($appId === null || (is_array($appId) && count($appId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appId when calling managementServiceAddAppKey'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceAddAppKey'
            );
        }

        $resourcePath = '/projects/{projectId}/apps/{appId}/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($appId !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($appId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceAddOIDCApp
     *
     * Create Application (OIDC)
     *
     * @param  string $projectId projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddOIDCAppBody $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse|\ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse|\ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse|\ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceAddOIDCApp($projectId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceAddOIDCAppWithHttpInfo($projectId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceAddOIDCAppWithHttpInfo
     *
     * Create Application (OIDC)
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddOIDCAppBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse|\ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse|\ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse|\ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceAddOIDCAppWithHttpInfo($projectId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceAddOIDCAppRequest($projectId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceAddOIDCAppAsync
     *
     * Create Application (OIDC)
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddOIDCAppBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceAddOIDCAppAsync($projectId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceAddOIDCAppAsyncWithHttpInfo($projectId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceAddOIDCAppAsyncWithHttpInfo
     *
     * Create Application (OIDC)
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddOIDCAppBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceAddOIDCAppAsyncWithHttpInfo($projectId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1AddOIDCAppResponse';
        $request = $this->managementServiceAddOIDCAppRequest($projectId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceAddOIDCApp'
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddOIDCAppBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceAddOIDCAppRequest($projectId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceAddOIDCApp'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceAddOIDCApp'
            );
        }

        $resourcePath = '/projects/{projectId}/apps/oidc';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceAddSAMLApp
     *
     * Create Application (SAML)
     *
     * @param  string $projectId projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddSAMLAppBody $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse|\ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse|\ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse|\ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceAddSAMLApp($projectId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceAddSAMLAppWithHttpInfo($projectId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceAddSAMLAppWithHttpInfo
     *
     * Create Application (SAML)
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddSAMLAppBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse|\ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse|\ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse|\ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceAddSAMLAppWithHttpInfo($projectId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceAddSAMLAppRequest($projectId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceAddSAMLAppAsync
     *
     * Create Application (SAML)
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddSAMLAppBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceAddSAMLAppAsync($projectId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceAddSAMLAppAsyncWithHttpInfo($projectId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceAddSAMLAppAsyncWithHttpInfo
     *
     * Create Application (SAML)
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddSAMLAppBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceAddSAMLAppAsyncWithHttpInfo($projectId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1AddSAMLAppResponse';
        $request = $this->managementServiceAddSAMLAppRequest($projectId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceAddSAMLApp'
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddSAMLAppBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceAddSAMLAppRequest($projectId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceAddSAMLApp'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceAddSAMLApp'
            );
        }

        $resourcePath = '/projects/{projectId}/apps/saml';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceDeactivateApp
     *
     * Deactivate Application
     *
     * @param  string $projectId projectId (required)
     * @param  string $appId appId (required)
     * @param  object $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1DeactivateAppResponse|\ArthurHlt\Zitadel\Model\V1DeactivateAppResponse|\ArthurHlt\Zitadel\Model\V1DeactivateAppResponse|\ArthurHlt\Zitadel\Model\V1DeactivateAppResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceDeactivateApp($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceDeactivateAppWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceDeactivateAppWithHttpInfo
     *
     * Deactivate Application
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1DeactivateAppResponse|\ArthurHlt\Zitadel\Model\V1DeactivateAppResponse|\ArthurHlt\Zitadel\Model\V1DeactivateAppResponse|\ArthurHlt\Zitadel\Model\V1DeactivateAppResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceDeactivateAppWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceDeactivateAppRequest($projectId, $appId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1DeactivateAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1DeactivateAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1DeactivateAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1DeactivateAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1DeactivateAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1DeactivateAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1DeactivateAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1DeactivateAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1DeactivateAppResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1DeactivateAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1DeactivateAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1DeactivateAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1DeactivateAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceDeactivateAppAsync
     *
     * Deactivate Application
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceDeactivateAppAsync($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceDeactivateAppAsyncWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceDeactivateAppAsyncWithHttpInfo
     *
     * Deactivate Application
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceDeactivateAppAsyncWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1DeactivateAppResponse';
        $request = $this->managementServiceDeactivateAppRequest($projectId, $appId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceDeactivateApp'
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceDeactivateAppRequest($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceDeactivateApp'
            );
        }
        // verify the required parameter 'appId' is set
        if ($appId === null || (is_array($appId) && count($appId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appId when calling managementServiceDeactivateApp'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceDeactivateApp'
            );
        }

        $resourcePath = '/projects/{projectId}/apps/{appId}/_deactivate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($appId !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($appId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceGetAppByID
     *
     * Get Application By ID
     *
     * @param  string $projectId projectId (required)
     * @param  string $appId appId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1GetAppByIDResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceGetAppByID($projectId, $appId, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceGetAppByIDWithHttpInfo($projectId, $appId, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceGetAppByIDWithHttpInfo
     *
     * Get Application By ID
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1GetAppByIDResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceGetAppByIDWithHttpInfo($projectId, $appId, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceGetAppByIDRequest($projectId, $appId, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1GetAppByIDResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1GetAppByIDResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1GetAppByIDResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1GetAppByIDResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceGetAppByIDAsync
     *
     * Get Application By ID
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceGetAppByIDAsync($projectId, $appId, $xZitadelOrgid = null)
    {
        return $this->managementServiceGetAppByIDAsyncWithHttpInfo($projectId, $appId, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceGetAppByIDAsyncWithHttpInfo
     *
     * Get Application By ID
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceGetAppByIDAsyncWithHttpInfo($projectId, $appId, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1GetAppByIDResponse';
        $request = $this->managementServiceGetAppByIDRequest($projectId, $appId, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceGetAppByID'
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceGetAppByIDRequest($projectId, $appId, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceGetAppByID'
            );
        }
        // verify the required parameter 'appId' is set
        if ($appId === null || (is_array($appId) && count($appId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appId when calling managementServiceGetAppByID'
            );
        }

        $resourcePath = '/projects/{projectId}/apps/{appId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($appId !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($appId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceGetAppKey
     *
     * Get Application Key By ID
     *
     * @param  string $projectId projectId (required)
     * @param  string $appId appId (required)
     * @param  string $keyId keyId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1GetAppKeyResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceGetAppKey($projectId, $appId, $keyId, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceGetAppKeyWithHttpInfo($projectId, $appId, $keyId, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceGetAppKeyWithHttpInfo
     *
     * Get Application Key By ID
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  string $keyId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1GetAppKeyResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceGetAppKeyWithHttpInfo($projectId, $appId, $keyId, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceGetAppKeyRequest($projectId, $appId, $keyId, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1GetAppKeyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1GetAppKeyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1GetAppKeyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1GetAppKeyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceGetAppKeyAsync
     *
     * Get Application Key By ID
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  string $keyId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceGetAppKeyAsync($projectId, $appId, $keyId, $xZitadelOrgid = null)
    {
        return $this->managementServiceGetAppKeyAsyncWithHttpInfo($projectId, $appId, $keyId, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceGetAppKeyAsyncWithHttpInfo
     *
     * Get Application Key By ID
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  string $keyId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceGetAppKeyAsyncWithHttpInfo($projectId, $appId, $keyId, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1GetAppKeyResponse';
        $request = $this->managementServiceGetAppKeyRequest($projectId, $appId, $keyId, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceGetAppKey'
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  string $keyId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceGetAppKeyRequest($projectId, $appId, $keyId, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceGetAppKey'
            );
        }
        // verify the required parameter 'appId' is set
        if ($appId === null || (is_array($appId) && count($appId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appId when calling managementServiceGetAppKey'
            );
        }
        // verify the required parameter 'keyId' is set
        if ($keyId === null || (is_array($keyId) && count($keyId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $keyId when calling managementServiceGetAppKey'
            );
        }

        $resourcePath = '/projects/{projectId}/apps/{appId}/keys/{keyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($appId !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($appId),
                $resourcePath
            );
        }
        // path params
        if ($keyId !== null) {
            $resourcePath = str_replace(
                '{' . 'keyId' . '}',
                ObjectSerializer::toPathValue($keyId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceListAppChanges
     *
     * Application History
     *
     * @param  string $projectId projectId (required)
     * @param  string $appId appId (required)
     * @param  string $querySequence sequence represents the order of events. It&#39;s always counting (optional)
     * @param  int $queryLimit Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If no limit is set or the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool $queryAsc default is descending (optional)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1ListAppChangesResponse|\ArthurHlt\Zitadel\Model\V1ListAppChangesResponse|\ArthurHlt\Zitadel\Model\V1ListAppChangesResponse|\ArthurHlt\Zitadel\Model\V1ListAppChangesResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceListAppChanges($projectId, $appId, $querySequence = null, $queryLimit = null, $queryAsc = null, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceListAppChangesWithHttpInfo($projectId, $appId, $querySequence, $queryLimit, $queryAsc, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceListAppChangesWithHttpInfo
     *
     * Application History
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  string $querySequence sequence represents the order of events. It&#39;s always counting (optional)
     * @param  int $queryLimit Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If no limit is set or the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool $queryAsc default is descending (optional)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1ListAppChangesResponse|\ArthurHlt\Zitadel\Model\V1ListAppChangesResponse|\ArthurHlt\Zitadel\Model\V1ListAppChangesResponse|\ArthurHlt\Zitadel\Model\V1ListAppChangesResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceListAppChangesWithHttpInfo($projectId, $appId, $querySequence = null, $queryLimit = null, $queryAsc = null, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceListAppChangesRequest($projectId, $appId, $querySequence, $queryLimit, $queryAsc, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1ListAppChangesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListAppChangesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1ListAppChangesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListAppChangesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1ListAppChangesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListAppChangesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1ListAppChangesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListAppChangesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1ListAppChangesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListAppChangesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListAppChangesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListAppChangesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListAppChangesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceListAppChangesAsync
     *
     * Application History
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  string $querySequence sequence represents the order of events. It&#39;s always counting (optional)
     * @param  int $queryLimit Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If no limit is set or the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool $queryAsc default is descending (optional)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListAppChangesAsync($projectId, $appId, $querySequence = null, $queryLimit = null, $queryAsc = null, $xZitadelOrgid = null)
    {
        return $this->managementServiceListAppChangesAsyncWithHttpInfo($projectId, $appId, $querySequence, $queryLimit, $queryAsc, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceListAppChangesAsyncWithHttpInfo
     *
     * Application History
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  string $querySequence sequence represents the order of events. It&#39;s always counting (optional)
     * @param  int $queryLimit Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If no limit is set or the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool $queryAsc default is descending (optional)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListAppChangesAsyncWithHttpInfo($projectId, $appId, $querySequence = null, $queryLimit = null, $queryAsc = null, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1ListAppChangesResponse';
        $request = $this->managementServiceListAppChangesRequest($projectId, $appId, $querySequence, $queryLimit, $queryAsc, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceListAppChanges'
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  string $querySequence sequence represents the order of events. It&#39;s always counting (optional)
     * @param  int $queryLimit Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If no limit is set or the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool $queryAsc default is descending (optional)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceListAppChangesRequest($projectId, $appId, $querySequence = null, $queryLimit = null, $queryAsc = null, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceListAppChanges'
            );
        }
        // verify the required parameter 'appId' is set
        if ($appId === null || (is_array($appId) && count($appId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appId when calling managementServiceListAppChanges'
            );
        }

        $resourcePath = '/projects/{projectId}/apps/{appId}/changes/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($querySequence)) {
            $querySequence = ObjectSerializer::serializeCollection($querySequence, '', true);
        }
        if ($querySequence !== null) {
            $queryParams['query.sequence'] = $querySequence;
        }
        // query params
        if (is_array($queryLimit)) {
            $queryLimit = ObjectSerializer::serializeCollection($queryLimit, '', true);
        }
        if ($queryLimit !== null) {
            $queryParams['query.limit'] = $queryLimit;
        }
        // query params
        if (is_array($queryAsc)) {
            $queryAsc = ObjectSerializer::serializeCollection($queryAsc, '', true);
        }
        if ($queryAsc !== null) {
            $queryParams['query.asc'] = $queryAsc;
        }

        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($appId !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($appId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceListAppKeys
     *
     * List Application Keys
     *
     * @param  string $projectId projectId (required)
     * @param  string $appId appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListAppKeysBody $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1ListAppKeysResponse|\ArthurHlt\Zitadel\Model\V1ListAppKeysResponse|\ArthurHlt\Zitadel\Model\V1ListAppKeysResponse|\ArthurHlt\Zitadel\Model\V1ListAppKeysResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceListAppKeys($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceListAppKeysWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceListAppKeysWithHttpInfo
     *
     * List Application Keys
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListAppKeysBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1ListAppKeysResponse|\ArthurHlt\Zitadel\Model\V1ListAppKeysResponse|\ArthurHlt\Zitadel\Model\V1ListAppKeysResponse|\ArthurHlt\Zitadel\Model\V1ListAppKeysResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceListAppKeysWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceListAppKeysRequest($projectId, $appId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1ListAppKeysResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListAppKeysResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1ListAppKeysResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListAppKeysResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1ListAppKeysResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListAppKeysResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1ListAppKeysResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListAppKeysResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1ListAppKeysResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListAppKeysResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListAppKeysResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListAppKeysResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListAppKeysResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceListAppKeysAsync
     *
     * List Application Keys
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListAppKeysBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListAppKeysAsync($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceListAppKeysAsyncWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceListAppKeysAsyncWithHttpInfo
     *
     * List Application Keys
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListAppKeysBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListAppKeysAsyncWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1ListAppKeysResponse';
        $request = $this->managementServiceListAppKeysRequest($projectId, $appId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceListAppKeys'
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListAppKeysBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceListAppKeysRequest($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceListAppKeys'
            );
        }
        // verify the required parameter 'appId' is set
        if ($appId === null || (is_array($appId) && count($appId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appId when calling managementServiceListAppKeys'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceListAppKeys'
            );
        }

        $resourcePath = '/projects/{projectId}/apps/{appId}/keys/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($appId !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($appId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceListApps
     *
     * Search Applications
     *
     * @param  string $projectId projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListAppsBody $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1ListAppsResponse|\ArthurHlt\Zitadel\Model\V1ListAppsResponse|\ArthurHlt\Zitadel\Model\V1ListAppsResponse|\ArthurHlt\Zitadel\Model\V1ListAppsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceListApps($projectId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceListAppsWithHttpInfo($projectId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceListAppsWithHttpInfo
     *
     * Search Applications
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListAppsBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1ListAppsResponse|\ArthurHlt\Zitadel\Model\V1ListAppsResponse|\ArthurHlt\Zitadel\Model\V1ListAppsResponse|\ArthurHlt\Zitadel\Model\V1ListAppsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceListAppsWithHttpInfo($projectId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceListAppsRequest($projectId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1ListAppsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListAppsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1ListAppsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListAppsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1ListAppsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListAppsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1ListAppsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListAppsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1ListAppsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListAppsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListAppsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListAppsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListAppsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceListAppsAsync
     *
     * Search Applications
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListAppsBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListAppsAsync($projectId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceListAppsAsyncWithHttpInfo($projectId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceListAppsAsyncWithHttpInfo
     *
     * Search Applications
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListAppsBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListAppsAsyncWithHttpInfo($projectId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1ListAppsResponse';
        $request = $this->managementServiceListAppsRequest($projectId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceListApps'
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListAppsBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceListAppsRequest($projectId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceListApps'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceListApps'
            );
        }

        $resourcePath = '/projects/{projectId}/apps/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceReactivateApp
     *
     * Reactivate Application
     *
     * @param  string $projectId projectId (required)
     * @param  string $appId appId (required)
     * @param  object $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1ReactivateAppResponse|\ArthurHlt\Zitadel\Model\V1ReactivateAppResponse|\ArthurHlt\Zitadel\Model\V1ReactivateAppResponse|\ArthurHlt\Zitadel\Model\V1ReactivateAppResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceReactivateApp($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceReactivateAppWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceReactivateAppWithHttpInfo
     *
     * Reactivate Application
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1ReactivateAppResponse|\ArthurHlt\Zitadel\Model\V1ReactivateAppResponse|\ArthurHlt\Zitadel\Model\V1ReactivateAppResponse|\ArthurHlt\Zitadel\Model\V1ReactivateAppResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceReactivateAppWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceReactivateAppRequest($projectId, $appId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1ReactivateAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ReactivateAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1ReactivateAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ReactivateAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1ReactivateAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ReactivateAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1ReactivateAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ReactivateAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1ReactivateAppResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ReactivateAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ReactivateAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ReactivateAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ReactivateAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceReactivateAppAsync
     *
     * Reactivate Application
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceReactivateAppAsync($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceReactivateAppAsyncWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceReactivateAppAsyncWithHttpInfo
     *
     * Reactivate Application
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceReactivateAppAsyncWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1ReactivateAppResponse';
        $request = $this->managementServiceReactivateAppRequest($projectId, $appId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceReactivateApp'
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceReactivateAppRequest($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceReactivateApp'
            );
        }
        // verify the required parameter 'appId' is set
        if ($appId === null || (is_array($appId) && count($appId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appId when calling managementServiceReactivateApp'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceReactivateApp'
            );
        }

        $resourcePath = '/projects/{projectId}/apps/{appId}/_reactivate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($appId !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($appId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceRegenerateAPIClientSecret
     *
     * Generate New API Client Secret
     *
     * @param  string $projectId projectId (required)
     * @param  string $appId appId (required)
     * @param  object $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse|\ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse|\ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse|\ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceRegenerateAPIClientSecret($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceRegenerateAPIClientSecretWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceRegenerateAPIClientSecretWithHttpInfo
     *
     * Generate New API Client Secret
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse|\ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse|\ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse|\ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceRegenerateAPIClientSecretWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceRegenerateAPIClientSecretRequest($projectId, $appId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceRegenerateAPIClientSecretAsync
     *
     * Generate New API Client Secret
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceRegenerateAPIClientSecretAsync($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceRegenerateAPIClientSecretAsyncWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceRegenerateAPIClientSecretAsyncWithHttpInfo
     *
     * Generate New API Client Secret
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceRegenerateAPIClientSecretAsyncWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1RegenerateAPIClientSecretResponse';
        $request = $this->managementServiceRegenerateAPIClientSecretRequest($projectId, $appId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceRegenerateAPIClientSecret'
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceRegenerateAPIClientSecretRequest($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceRegenerateAPIClientSecret'
            );
        }
        // verify the required parameter 'appId' is set
        if ($appId === null || (is_array($appId) && count($appId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appId when calling managementServiceRegenerateAPIClientSecret'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceRegenerateAPIClientSecret'
            );
        }

        $resourcePath = '/projects/{projectId}/apps/{appId}/api_config/_generate_client_secret';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($appId !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($appId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceRegenerateOIDCClientSecret
     *
     * Generate New OIDC Client Secret
     *
     * @param  string $projectId projectId (required)
     * @param  string $appId appId (required)
     * @param  object $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse|\ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse|\ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse|\ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceRegenerateOIDCClientSecret($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceRegenerateOIDCClientSecretWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceRegenerateOIDCClientSecretWithHttpInfo
     *
     * Generate New OIDC Client Secret
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse|\ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse|\ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse|\ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceRegenerateOIDCClientSecretWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceRegenerateOIDCClientSecretRequest($projectId, $appId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceRegenerateOIDCClientSecretAsync
     *
     * Generate New OIDC Client Secret
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceRegenerateOIDCClientSecretAsync($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceRegenerateOIDCClientSecretAsyncWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceRegenerateOIDCClientSecretAsyncWithHttpInfo
     *
     * Generate New OIDC Client Secret
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceRegenerateOIDCClientSecretAsyncWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1RegenerateOIDCClientSecretResponse';
        $request = $this->managementServiceRegenerateOIDCClientSecretRequest($projectId, $appId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceRegenerateOIDCClientSecret'
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceRegenerateOIDCClientSecretRequest($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceRegenerateOIDCClientSecret'
            );
        }
        // verify the required parameter 'appId' is set
        if ($appId === null || (is_array($appId) && count($appId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appId when calling managementServiceRegenerateOIDCClientSecret'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceRegenerateOIDCClientSecret'
            );
        }

        $resourcePath = '/projects/{projectId}/apps/{appId}/oidc_config/_generate_client_secret';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($appId !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($appId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceRemoveApp
     *
     * Remove Application
     *
     * @param  string $projectId projectId (required)
     * @param  string $appId appId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1RemoveAppResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceRemoveApp($projectId, $appId, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceRemoveAppWithHttpInfo($projectId, $appId, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceRemoveAppWithHttpInfo
     *
     * Remove Application
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1RemoveAppResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceRemoveAppWithHttpInfo($projectId, $appId, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceRemoveAppRequest($projectId, $appId, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1RemoveAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1RemoveAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1RemoveAppResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1RemoveAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceRemoveAppAsync
     *
     * Remove Application
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceRemoveAppAsync($projectId, $appId, $xZitadelOrgid = null)
    {
        return $this->managementServiceRemoveAppAsyncWithHttpInfo($projectId, $appId, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceRemoveAppAsyncWithHttpInfo
     *
     * Remove Application
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceRemoveAppAsyncWithHttpInfo($projectId, $appId, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1RemoveAppResponse';
        $request = $this->managementServiceRemoveAppRequest($projectId, $appId, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceRemoveApp'
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceRemoveAppRequest($projectId, $appId, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceRemoveApp'
            );
        }
        // verify the required parameter 'appId' is set
        if ($appId === null || (is_array($appId) && count($appId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appId when calling managementServiceRemoveApp'
            );
        }

        $resourcePath = '/projects/{projectId}/apps/{appId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($appId !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($appId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceRemoveAppKey
     *
     * Delete Application Key
     *
     * @param  string $projectId projectId (required)
     * @param  string $appId appId (required)
     * @param  string $keyId keyId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1RemoveAppKeyResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceRemoveAppKey($projectId, $appId, $keyId, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceRemoveAppKeyWithHttpInfo($projectId, $appId, $keyId, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceRemoveAppKeyWithHttpInfo
     *
     * Delete Application Key
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  string $keyId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1RemoveAppKeyResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceRemoveAppKeyWithHttpInfo($projectId, $appId, $keyId, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceRemoveAppKeyRequest($projectId, $appId, $keyId, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1RemoveAppKeyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1RemoveAppKeyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1RemoveAppKeyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1RemoveAppKeyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceRemoveAppKeyAsync
     *
     * Delete Application Key
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  string $keyId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceRemoveAppKeyAsync($projectId, $appId, $keyId, $xZitadelOrgid = null)
    {
        return $this->managementServiceRemoveAppKeyAsyncWithHttpInfo($projectId, $appId, $keyId, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceRemoveAppKeyAsyncWithHttpInfo
     *
     * Delete Application Key
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  string $keyId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceRemoveAppKeyAsyncWithHttpInfo($projectId, $appId, $keyId, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1RemoveAppKeyResponse';
        $request = $this->managementServiceRemoveAppKeyRequest($projectId, $appId, $keyId, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceRemoveAppKey'
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  string $keyId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceRemoveAppKeyRequest($projectId, $appId, $keyId, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceRemoveAppKey'
            );
        }
        // verify the required parameter 'appId' is set
        if ($appId === null || (is_array($appId) && count($appId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appId when calling managementServiceRemoveAppKey'
            );
        }
        // verify the required parameter 'keyId' is set
        if ($keyId === null || (is_array($keyId) && count($keyId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $keyId when calling managementServiceRemoveAppKey'
            );
        }

        $resourcePath = '/projects/{projectId}/apps/{appId}/keys/{keyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($appId !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($appId),
                $resourcePath
            );
        }
        // path params
        if ($keyId !== null) {
            $resourcePath = str_replace(
                '{' . 'keyId' . '}',
                ObjectSerializer::toPathValue($keyId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceUpdateAPIAppConfig
     *
     * Update API Application Config
     *
     * @param  string $projectId projectId (required)
     * @param  string $appId appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateAPIAppConfigBody $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse|\ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse|\ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse|\ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceUpdateAPIAppConfig($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceUpdateAPIAppConfigWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceUpdateAPIAppConfigWithHttpInfo
     *
     * Update API Application Config
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateAPIAppConfigBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse|\ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse|\ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse|\ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceUpdateAPIAppConfigWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceUpdateAPIAppConfigRequest($projectId, $appId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceUpdateAPIAppConfigAsync
     *
     * Update API Application Config
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateAPIAppConfigBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceUpdateAPIAppConfigAsync($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceUpdateAPIAppConfigAsyncWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceUpdateAPIAppConfigAsyncWithHttpInfo
     *
     * Update API Application Config
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateAPIAppConfigBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceUpdateAPIAppConfigAsyncWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateAPIAppConfigResponse';
        $request = $this->managementServiceUpdateAPIAppConfigRequest($projectId, $appId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceUpdateAPIAppConfig'
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateAPIAppConfigBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceUpdateAPIAppConfigRequest($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceUpdateAPIAppConfig'
            );
        }
        // verify the required parameter 'appId' is set
        if ($appId === null || (is_array($appId) && count($appId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appId when calling managementServiceUpdateAPIAppConfig'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceUpdateAPIAppConfig'
            );
        }

        $resourcePath = '/projects/{projectId}/apps/{appId}/api_config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($appId !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($appId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceUpdateApp
     *
     * Update Application
     *
     * @param  string $projectId projectId (required)
     * @param  string $appId appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateAppBody $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1UpdateAppResponse|\ArthurHlt\Zitadel\Model\V1UpdateAppResponse|\ArthurHlt\Zitadel\Model\V1UpdateAppResponse|\ArthurHlt\Zitadel\Model\V1UpdateAppResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceUpdateApp($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceUpdateAppWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceUpdateAppWithHttpInfo
     *
     * Update Application
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateAppBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1UpdateAppResponse|\ArthurHlt\Zitadel\Model\V1UpdateAppResponse|\ArthurHlt\Zitadel\Model\V1UpdateAppResponse|\ArthurHlt\Zitadel\Model\V1UpdateAppResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceUpdateAppWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceUpdateAppRequest($projectId, $appId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateAppResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceUpdateAppAsync
     *
     * Update Application
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateAppBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceUpdateAppAsync($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceUpdateAppAsyncWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceUpdateAppAsyncWithHttpInfo
     *
     * Update Application
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateAppBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceUpdateAppAsyncWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateAppResponse';
        $request = $this->managementServiceUpdateAppRequest($projectId, $appId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceUpdateApp'
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateAppBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceUpdateAppRequest($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceUpdateApp'
            );
        }
        // verify the required parameter 'appId' is set
        if ($appId === null || (is_array($appId) && count($appId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appId when calling managementServiceUpdateApp'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceUpdateApp'
            );
        }

        $resourcePath = '/projects/{projectId}/apps/{appId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($appId !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($appId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceUpdateOIDCAppConfig
     *
     * Update OIDC Application Config
     *
     * @param  string $projectId projectId (required)
     * @param  string $appId appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateOIDCAppConfigBody $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse|\ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse|\ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse|\ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceUpdateOIDCAppConfig($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceUpdateOIDCAppConfigWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceUpdateOIDCAppConfigWithHttpInfo
     *
     * Update OIDC Application Config
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateOIDCAppConfigBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse|\ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse|\ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse|\ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceUpdateOIDCAppConfigWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceUpdateOIDCAppConfigRequest($projectId, $appId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceUpdateOIDCAppConfigAsync
     *
     * Update OIDC Application Config
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateOIDCAppConfigBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceUpdateOIDCAppConfigAsync($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceUpdateOIDCAppConfigAsyncWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceUpdateOIDCAppConfigAsyncWithHttpInfo
     *
     * Update OIDC Application Config
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateOIDCAppConfigBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceUpdateOIDCAppConfigAsyncWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateOIDCAppConfigResponse';
        $request = $this->managementServiceUpdateOIDCAppConfigRequest($projectId, $appId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceUpdateOIDCAppConfig'
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateOIDCAppConfigBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceUpdateOIDCAppConfigRequest($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceUpdateOIDCAppConfig'
            );
        }
        // verify the required parameter 'appId' is set
        if ($appId === null || (is_array($appId) && count($appId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appId when calling managementServiceUpdateOIDCAppConfig'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceUpdateOIDCAppConfig'
            );
        }

        $resourcePath = '/projects/{projectId}/apps/{appId}/oidc_config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($appId !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($appId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceUpdateSAMLAppConfig
     *
     * Update SAML Application Config
     *
     * @param  string $projectId projectId (required)
     * @param  string $appId appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateSAMLAppConfigBody $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse|\ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse|\ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse|\ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceUpdateSAMLAppConfig($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceUpdateSAMLAppConfigWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceUpdateSAMLAppConfigWithHttpInfo
     *
     * Update SAML Application Config
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateSAMLAppConfigBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse|\ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse|\ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse|\ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceUpdateSAMLAppConfigWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceUpdateSAMLAppConfigRequest($projectId, $appId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceUpdateSAMLAppConfigAsync
     *
     * Update SAML Application Config
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateSAMLAppConfigBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceUpdateSAMLAppConfigAsync($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceUpdateSAMLAppConfigAsyncWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceUpdateSAMLAppConfigAsyncWithHttpInfo
     *
     * Update SAML Application Config
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateSAMLAppConfigBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceUpdateSAMLAppConfigAsyncWithHttpInfo($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateSAMLAppConfigResponse';
        $request = $this->managementServiceUpdateSAMLAppConfigRequest($projectId, $appId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceUpdateSAMLAppConfig'
     *
     * @param  string $projectId (required)
     * @param  string $appId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateSAMLAppConfigBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceUpdateSAMLAppConfigRequest($projectId, $appId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceUpdateSAMLAppConfig'
            );
        }
        // verify the required parameter 'appId' is set
        if ($appId === null || (is_array($appId) && count($appId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appId when calling managementServiceUpdateSAMLAppConfig'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceUpdateSAMLAppConfig'
            );
        }

        $resourcePath = '/projects/{projectId}/apps/{appId}/saml_config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($appId !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($appId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
