<?php
/**
 * SettingsServiceApi
 * PHP version 7.2
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ArthurHlt\Zitadel\Api;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use ArthurHlt\Zitadel\ApiException;
use ArthurHlt\Zitadel\Configuration;
use ArthurHlt\Zitadel\DebugPlugin;
use ArthurHlt\Zitadel\HeaderSelector;
use ArthurHlt\Zitadel\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * SettingsServiceApi Class Doc Comment
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SettingsServiceApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://zitadel.cloud/management/v1');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation settingsServiceGetActiveIdentityProviders
     *
     * Get the current active identity providers
     *
     * @param  string $ctxOrgId ctxOrgId (optional)
     * @param  bool $ctxInstance ctxInstance (optional)
     * @param  bool $creationAllowed creationAllowed (optional)
     * @param  bool $linkingAllowed linkingAllowed (optional)
     * @param  bool $autoCreation autoCreation (optional)
     * @param  bool $autoLinking autoLinking (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Settingsv2GetActiveIdentityProvidersResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function settingsServiceGetActiveIdentityProviders($ctxOrgId = null, $ctxInstance = null, $creationAllowed = null, $linkingAllowed = null, $autoCreation = null, $autoLinking = null)
    {
        list($response) = $this->settingsServiceGetActiveIdentityProvidersWithHttpInfo($ctxOrgId, $ctxInstance, $creationAllowed, $linkingAllowed, $autoCreation, $autoLinking);
        return $response;
    }

    /**
     * Operation settingsServiceGetActiveIdentityProvidersWithHttpInfo
     *
     * Get the current active identity providers
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     * @param  bool $creationAllowed (optional)
     * @param  bool $linkingAllowed (optional)
     * @param  bool $autoCreation (optional)
     * @param  bool $autoLinking (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Settingsv2GetActiveIdentityProvidersResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetActiveIdentityProvidersWithHttpInfo($ctxOrgId = null, $ctxInstance = null, $creationAllowed = null, $linkingAllowed = null, $autoCreation = null, $autoLinking = null)
    {
        $request = $this->settingsServiceGetActiveIdentityProvidersRequest($ctxOrgId, $ctxInstance, $creationAllowed, $linkingAllowed, $autoCreation, $autoLinking);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Settingsv2GetActiveIdentityProvidersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Settingsv2GetActiveIdentityProvidersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2GetActiveIdentityProvidersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Settingsv2GetActiveIdentityProvidersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetActiveIdentityProvidersAsync
     *
     * Get the current active identity providers
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     * @param  bool $creationAllowed (optional)
     * @param  bool $linkingAllowed (optional)
     * @param  bool $autoCreation (optional)
     * @param  bool $autoLinking (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetActiveIdentityProvidersAsync($ctxOrgId = null, $ctxInstance = null, $creationAllowed = null, $linkingAllowed = null, $autoCreation = null, $autoLinking = null)
    {
        return $this->settingsServiceGetActiveIdentityProvidersAsyncWithHttpInfo($ctxOrgId, $ctxInstance, $creationAllowed, $linkingAllowed, $autoCreation, $autoLinking)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetActiveIdentityProvidersAsyncWithHttpInfo
     *
     * Get the current active identity providers
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     * @param  bool $creationAllowed (optional)
     * @param  bool $linkingAllowed (optional)
     * @param  bool $autoCreation (optional)
     * @param  bool $autoLinking (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetActiveIdentityProvidersAsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null, $creationAllowed = null, $linkingAllowed = null, $autoCreation = null, $autoLinking = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2GetActiveIdentityProvidersResponse';
        $request = $this->settingsServiceGetActiveIdentityProvidersRequest($ctxOrgId, $ctxInstance, $creationAllowed, $linkingAllowed, $autoCreation, $autoLinking);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetActiveIdentityProviders'
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     * @param  bool $creationAllowed (optional)
     * @param  bool $linkingAllowed (optional)
     * @param  bool $autoCreation (optional)
     * @param  bool $autoLinking (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function settingsServiceGetActiveIdentityProvidersRequest($ctxOrgId = null, $ctxInstance = null, $creationAllowed = null, $linkingAllowed = null, $autoCreation = null, $autoLinking = null)
    {

        $resourcePath = '/v2/settings/login/idps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($ctxOrgId)) {
            $ctxOrgId = ObjectSerializer::serializeCollection($ctxOrgId, '', true);
        }
        if ($ctxOrgId !== null) {
            $queryParams['ctx.orgId'] = $ctxOrgId;
        }
        // query params
        if (is_array($ctxInstance)) {
            $ctxInstance = ObjectSerializer::serializeCollection($ctxInstance, '', true);
        }
        if ($ctxInstance !== null) {
            $queryParams['ctx.instance'] = $ctxInstance;
        }
        // query params
        if (is_array($creationAllowed)) {
            $creationAllowed = ObjectSerializer::serializeCollection($creationAllowed, '', true);
        }
        if ($creationAllowed !== null) {
            $queryParams['creationAllowed'] = $creationAllowed;
        }
        // query params
        if (is_array($linkingAllowed)) {
            $linkingAllowed = ObjectSerializer::serializeCollection($linkingAllowed, '', true);
        }
        if ($linkingAllowed !== null) {
            $queryParams['linkingAllowed'] = $linkingAllowed;
        }
        // query params
        if (is_array($autoCreation)) {
            $autoCreation = ObjectSerializer::serializeCollection($autoCreation, '', true);
        }
        if ($autoCreation !== null) {
            $queryParams['autoCreation'] = $autoCreation;
        }
        // query params
        if (is_array($autoLinking)) {
            $autoLinking = ObjectSerializer::serializeCollection($autoLinking, '', true);
        }
        if ($autoLinking !== null) {
            $queryParams['autoLinking'] = $autoLinking;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation settingsServiceGetActiveIdentityProviders_0
     *
     * Get the current active identity providers
     *
     * @param  string $ctxOrgId ctxOrgId (optional)
     * @param  bool $ctxInstance ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Settingsv2betaGetActiveIdentityProvidersResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function settingsServiceGetActiveIdentityProviders_0($ctxOrgId = null, $ctxInstance = null)
    {
        list($response) = $this->settingsServiceGetActiveIdentityProviders_0WithHttpInfo($ctxOrgId, $ctxInstance);
        return $response;
    }

    /**
     * Operation settingsServiceGetActiveIdentityProviders_0WithHttpInfo
     *
     * Get the current active identity providers
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Settingsv2betaGetActiveIdentityProvidersResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetActiveIdentityProviders_0WithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $request = $this->settingsServiceGetActiveIdentityProviders_0Request($ctxOrgId, $ctxInstance);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Settingsv2betaGetActiveIdentityProvidersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Settingsv2betaGetActiveIdentityProvidersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaGetActiveIdentityProvidersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Settingsv2betaGetActiveIdentityProvidersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetActiveIdentityProviders_0Async
     *
     * Get the current active identity providers
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetActiveIdentityProviders_0Async($ctxOrgId = null, $ctxInstance = null)
    {
        return $this->settingsServiceGetActiveIdentityProviders_0AsyncWithHttpInfo($ctxOrgId, $ctxInstance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetActiveIdentityProviders_0AsyncWithHttpInfo
     *
     * Get the current active identity providers
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetActiveIdentityProviders_0AsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaGetActiveIdentityProvidersResponse';
        $request = $this->settingsServiceGetActiveIdentityProviders_0Request($ctxOrgId, $ctxInstance);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetActiveIdentityProviders_0'
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function settingsServiceGetActiveIdentityProviders_0Request($ctxOrgId = null, $ctxInstance = null)
    {

        $resourcePath = '/v2beta/settings/login/idps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($ctxOrgId)) {
            $ctxOrgId = ObjectSerializer::serializeCollection($ctxOrgId, '', true);
        }
        if ($ctxOrgId !== null) {
            $queryParams['ctx.orgId'] = $ctxOrgId;
        }
        // query params
        if (is_array($ctxInstance)) {
            $ctxInstance = ObjectSerializer::serializeCollection($ctxInstance, '', true);
        }
        if ($ctxInstance !== null) {
            $queryParams['ctx.instance'] = $ctxInstance;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation settingsServiceGetBrandingSettings
     *
     * Get the current active branding settings
     *
     * @param  string $ctxOrgId ctxOrgId (optional)
     * @param  bool $ctxInstance ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Settingsv2GetBrandingSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function settingsServiceGetBrandingSettings($ctxOrgId = null, $ctxInstance = null)
    {
        list($response) = $this->settingsServiceGetBrandingSettingsWithHttpInfo($ctxOrgId, $ctxInstance);
        return $response;
    }

    /**
     * Operation settingsServiceGetBrandingSettingsWithHttpInfo
     *
     * Get the current active branding settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Settingsv2GetBrandingSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetBrandingSettingsWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $request = $this->settingsServiceGetBrandingSettingsRequest($ctxOrgId, $ctxInstance);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Settingsv2GetBrandingSettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Settingsv2GetBrandingSettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2GetBrandingSettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Settingsv2GetBrandingSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetBrandingSettingsAsync
     *
     * Get the current active branding settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetBrandingSettingsAsync($ctxOrgId = null, $ctxInstance = null)
    {
        return $this->settingsServiceGetBrandingSettingsAsyncWithHttpInfo($ctxOrgId, $ctxInstance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetBrandingSettingsAsyncWithHttpInfo
     *
     * Get the current active branding settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetBrandingSettingsAsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2GetBrandingSettingsResponse';
        $request = $this->settingsServiceGetBrandingSettingsRequest($ctxOrgId, $ctxInstance);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetBrandingSettings'
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function settingsServiceGetBrandingSettingsRequest($ctxOrgId = null, $ctxInstance = null)
    {

        $resourcePath = '/v2/settings/branding';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($ctxOrgId)) {
            $ctxOrgId = ObjectSerializer::serializeCollection($ctxOrgId, '', true);
        }
        if ($ctxOrgId !== null) {
            $queryParams['ctx.orgId'] = $ctxOrgId;
        }
        // query params
        if (is_array($ctxInstance)) {
            $ctxInstance = ObjectSerializer::serializeCollection($ctxInstance, '', true);
        }
        if ($ctxInstance !== null) {
            $queryParams['ctx.instance'] = $ctxInstance;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation settingsServiceGetBrandingSettings_0
     *
     * Get the current active branding settings
     *
     * @param  string $ctxOrgId ctxOrgId (optional)
     * @param  bool $ctxInstance ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Settingsv2betaGetBrandingSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function settingsServiceGetBrandingSettings_0($ctxOrgId = null, $ctxInstance = null)
    {
        list($response) = $this->settingsServiceGetBrandingSettings_0WithHttpInfo($ctxOrgId, $ctxInstance);
        return $response;
    }

    /**
     * Operation settingsServiceGetBrandingSettings_0WithHttpInfo
     *
     * Get the current active branding settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Settingsv2betaGetBrandingSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetBrandingSettings_0WithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $request = $this->settingsServiceGetBrandingSettings_0Request($ctxOrgId, $ctxInstance);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Settingsv2betaGetBrandingSettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Settingsv2betaGetBrandingSettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaGetBrandingSettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Settingsv2betaGetBrandingSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetBrandingSettings_0Async
     *
     * Get the current active branding settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetBrandingSettings_0Async($ctxOrgId = null, $ctxInstance = null)
    {
        return $this->settingsServiceGetBrandingSettings_0AsyncWithHttpInfo($ctxOrgId, $ctxInstance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetBrandingSettings_0AsyncWithHttpInfo
     *
     * Get the current active branding settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetBrandingSettings_0AsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaGetBrandingSettingsResponse';
        $request = $this->settingsServiceGetBrandingSettings_0Request($ctxOrgId, $ctxInstance);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetBrandingSettings_0'
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function settingsServiceGetBrandingSettings_0Request($ctxOrgId = null, $ctxInstance = null)
    {

        $resourcePath = '/v2beta/settings/branding';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($ctxOrgId)) {
            $ctxOrgId = ObjectSerializer::serializeCollection($ctxOrgId, '', true);
        }
        if ($ctxOrgId !== null) {
            $queryParams['ctx.orgId'] = $ctxOrgId;
        }
        // query params
        if (is_array($ctxInstance)) {
            $ctxInstance = ObjectSerializer::serializeCollection($ctxInstance, '', true);
        }
        if ($ctxInstance !== null) {
            $queryParams['ctx.instance'] = $ctxInstance;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation settingsServiceGetDomainSettings
     *
     * Get the domain settings
     *
     * @param  string $ctxOrgId ctxOrgId (optional)
     * @param  bool $ctxInstance ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Settingsv2GetDomainSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function settingsServiceGetDomainSettings($ctxOrgId = null, $ctxInstance = null)
    {
        list($response) = $this->settingsServiceGetDomainSettingsWithHttpInfo($ctxOrgId, $ctxInstance);
        return $response;
    }

    /**
     * Operation settingsServiceGetDomainSettingsWithHttpInfo
     *
     * Get the domain settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Settingsv2GetDomainSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetDomainSettingsWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $request = $this->settingsServiceGetDomainSettingsRequest($ctxOrgId, $ctxInstance);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Settingsv2GetDomainSettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Settingsv2GetDomainSettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2GetDomainSettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Settingsv2GetDomainSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetDomainSettingsAsync
     *
     * Get the domain settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetDomainSettingsAsync($ctxOrgId = null, $ctxInstance = null)
    {
        return $this->settingsServiceGetDomainSettingsAsyncWithHttpInfo($ctxOrgId, $ctxInstance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetDomainSettingsAsyncWithHttpInfo
     *
     * Get the domain settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetDomainSettingsAsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2GetDomainSettingsResponse';
        $request = $this->settingsServiceGetDomainSettingsRequest($ctxOrgId, $ctxInstance);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetDomainSettings'
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function settingsServiceGetDomainSettingsRequest($ctxOrgId = null, $ctxInstance = null)
    {

        $resourcePath = '/v2/settings/domain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($ctxOrgId)) {
            $ctxOrgId = ObjectSerializer::serializeCollection($ctxOrgId, '', true);
        }
        if ($ctxOrgId !== null) {
            $queryParams['ctx.orgId'] = $ctxOrgId;
        }
        // query params
        if (is_array($ctxInstance)) {
            $ctxInstance = ObjectSerializer::serializeCollection($ctxInstance, '', true);
        }
        if ($ctxInstance !== null) {
            $queryParams['ctx.instance'] = $ctxInstance;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation settingsServiceGetDomainSettings_0
     *
     * Get the domain settings
     *
     * @param  string $ctxOrgId ctxOrgId (optional)
     * @param  bool $ctxInstance ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Settingsv2betaGetDomainSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function settingsServiceGetDomainSettings_0($ctxOrgId = null, $ctxInstance = null)
    {
        list($response) = $this->settingsServiceGetDomainSettings_0WithHttpInfo($ctxOrgId, $ctxInstance);
        return $response;
    }

    /**
     * Operation settingsServiceGetDomainSettings_0WithHttpInfo
     *
     * Get the domain settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Settingsv2betaGetDomainSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetDomainSettings_0WithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $request = $this->settingsServiceGetDomainSettings_0Request($ctxOrgId, $ctxInstance);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Settingsv2betaGetDomainSettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Settingsv2betaGetDomainSettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaGetDomainSettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Settingsv2betaGetDomainSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetDomainSettings_0Async
     *
     * Get the domain settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetDomainSettings_0Async($ctxOrgId = null, $ctxInstance = null)
    {
        return $this->settingsServiceGetDomainSettings_0AsyncWithHttpInfo($ctxOrgId, $ctxInstance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetDomainSettings_0AsyncWithHttpInfo
     *
     * Get the domain settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetDomainSettings_0AsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaGetDomainSettingsResponse';
        $request = $this->settingsServiceGetDomainSettings_0Request($ctxOrgId, $ctxInstance);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetDomainSettings_0'
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function settingsServiceGetDomainSettings_0Request($ctxOrgId = null, $ctxInstance = null)
    {

        $resourcePath = '/v2beta/settings/domain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($ctxOrgId)) {
            $ctxOrgId = ObjectSerializer::serializeCollection($ctxOrgId, '', true);
        }
        if ($ctxOrgId !== null) {
            $queryParams['ctx.orgId'] = $ctxOrgId;
        }
        // query params
        if (is_array($ctxInstance)) {
            $ctxInstance = ObjectSerializer::serializeCollection($ctxInstance, '', true);
        }
        if ($ctxInstance !== null) {
            $queryParams['ctx.instance'] = $ctxInstance;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation settingsServiceGetGeneralSettings
     *
     * Get basic information over the instance
     *
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Settingsv2GetGeneralSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function settingsServiceGetGeneralSettings()
    {
        list($response) = $this->settingsServiceGetGeneralSettingsWithHttpInfo();
        return $response;
    }

    /**
     * Operation settingsServiceGetGeneralSettingsWithHttpInfo
     *
     * Get basic information over the instance
     *
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Settingsv2GetGeneralSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetGeneralSettingsWithHttpInfo()
    {
        $request = $this->settingsServiceGetGeneralSettingsRequest();

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Settingsv2GetGeneralSettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Settingsv2GetGeneralSettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2GetGeneralSettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Settingsv2GetGeneralSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetGeneralSettingsAsync
     *
     * Get basic information over the instance
     *
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetGeneralSettingsAsync()
    {
        return $this->settingsServiceGetGeneralSettingsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetGeneralSettingsAsyncWithHttpInfo
     *
     * Get basic information over the instance
     *
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetGeneralSettingsAsyncWithHttpInfo()
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2GetGeneralSettingsResponse';
        $request = $this->settingsServiceGetGeneralSettingsRequest();

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetGeneralSettings'
     *
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function settingsServiceGetGeneralSettingsRequest()
    {

        $resourcePath = '/v2/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation settingsServiceGetGeneralSettings_0
     *
     * Get basic information over the instance
     *
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Settingsv2betaGetGeneralSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function settingsServiceGetGeneralSettings_0()
    {
        list($response) = $this->settingsServiceGetGeneralSettings_0WithHttpInfo();
        return $response;
    }

    /**
     * Operation settingsServiceGetGeneralSettings_0WithHttpInfo
     *
     * Get basic information over the instance
     *
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Settingsv2betaGetGeneralSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetGeneralSettings_0WithHttpInfo()
    {
        $request = $this->settingsServiceGetGeneralSettings_0Request();

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Settingsv2betaGetGeneralSettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Settingsv2betaGetGeneralSettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaGetGeneralSettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Settingsv2betaGetGeneralSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetGeneralSettings_0Async
     *
     * Get basic information over the instance
     *
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetGeneralSettings_0Async()
    {
        return $this->settingsServiceGetGeneralSettings_0AsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetGeneralSettings_0AsyncWithHttpInfo
     *
     * Get basic information over the instance
     *
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetGeneralSettings_0AsyncWithHttpInfo()
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaGetGeneralSettingsResponse';
        $request = $this->settingsServiceGetGeneralSettings_0Request();

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetGeneralSettings_0'
     *
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function settingsServiceGetGeneralSettings_0Request()
    {

        $resourcePath = '/v2beta/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation settingsServiceGetLegalAndSupportSettings
     *
     * Get the legal and support settings
     *
     * @param  string $ctxOrgId ctxOrgId (optional)
     * @param  bool $ctxInstance ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Settingsv2GetLegalAndSupportSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function settingsServiceGetLegalAndSupportSettings($ctxOrgId = null, $ctxInstance = null)
    {
        list($response) = $this->settingsServiceGetLegalAndSupportSettingsWithHttpInfo($ctxOrgId, $ctxInstance);
        return $response;
    }

    /**
     * Operation settingsServiceGetLegalAndSupportSettingsWithHttpInfo
     *
     * Get the legal and support settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Settingsv2GetLegalAndSupportSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetLegalAndSupportSettingsWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $request = $this->settingsServiceGetLegalAndSupportSettingsRequest($ctxOrgId, $ctxInstance);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Settingsv2GetLegalAndSupportSettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Settingsv2GetLegalAndSupportSettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2GetLegalAndSupportSettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Settingsv2GetLegalAndSupportSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetLegalAndSupportSettingsAsync
     *
     * Get the legal and support settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetLegalAndSupportSettingsAsync($ctxOrgId = null, $ctxInstance = null)
    {
        return $this->settingsServiceGetLegalAndSupportSettingsAsyncWithHttpInfo($ctxOrgId, $ctxInstance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetLegalAndSupportSettingsAsyncWithHttpInfo
     *
     * Get the legal and support settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetLegalAndSupportSettingsAsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2GetLegalAndSupportSettingsResponse';
        $request = $this->settingsServiceGetLegalAndSupportSettingsRequest($ctxOrgId, $ctxInstance);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetLegalAndSupportSettings'
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function settingsServiceGetLegalAndSupportSettingsRequest($ctxOrgId = null, $ctxInstance = null)
    {

        $resourcePath = '/v2/settings/legal_support';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($ctxOrgId)) {
            $ctxOrgId = ObjectSerializer::serializeCollection($ctxOrgId, '', true);
        }
        if ($ctxOrgId !== null) {
            $queryParams['ctx.orgId'] = $ctxOrgId;
        }
        // query params
        if (is_array($ctxInstance)) {
            $ctxInstance = ObjectSerializer::serializeCollection($ctxInstance, '', true);
        }
        if ($ctxInstance !== null) {
            $queryParams['ctx.instance'] = $ctxInstance;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation settingsServiceGetLegalAndSupportSettings_0
     *
     * Get the legal and support settings
     *
     * @param  string $ctxOrgId ctxOrgId (optional)
     * @param  bool $ctxInstance ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Settingsv2betaGetLegalAndSupportSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function settingsServiceGetLegalAndSupportSettings_0($ctxOrgId = null, $ctxInstance = null)
    {
        list($response) = $this->settingsServiceGetLegalAndSupportSettings_0WithHttpInfo($ctxOrgId, $ctxInstance);
        return $response;
    }

    /**
     * Operation settingsServiceGetLegalAndSupportSettings_0WithHttpInfo
     *
     * Get the legal and support settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Settingsv2betaGetLegalAndSupportSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetLegalAndSupportSettings_0WithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $request = $this->settingsServiceGetLegalAndSupportSettings_0Request($ctxOrgId, $ctxInstance);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Settingsv2betaGetLegalAndSupportSettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Settingsv2betaGetLegalAndSupportSettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaGetLegalAndSupportSettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Settingsv2betaGetLegalAndSupportSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetLegalAndSupportSettings_0Async
     *
     * Get the legal and support settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetLegalAndSupportSettings_0Async($ctxOrgId = null, $ctxInstance = null)
    {
        return $this->settingsServiceGetLegalAndSupportSettings_0AsyncWithHttpInfo($ctxOrgId, $ctxInstance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetLegalAndSupportSettings_0AsyncWithHttpInfo
     *
     * Get the legal and support settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetLegalAndSupportSettings_0AsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaGetLegalAndSupportSettingsResponse';
        $request = $this->settingsServiceGetLegalAndSupportSettings_0Request($ctxOrgId, $ctxInstance);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetLegalAndSupportSettings_0'
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function settingsServiceGetLegalAndSupportSettings_0Request($ctxOrgId = null, $ctxInstance = null)
    {

        $resourcePath = '/v2beta/settings/legal_support';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($ctxOrgId)) {
            $ctxOrgId = ObjectSerializer::serializeCollection($ctxOrgId, '', true);
        }
        if ($ctxOrgId !== null) {
            $queryParams['ctx.orgId'] = $ctxOrgId;
        }
        // query params
        if (is_array($ctxInstance)) {
            $ctxInstance = ObjectSerializer::serializeCollection($ctxInstance, '', true);
        }
        if ($ctxInstance !== null) {
            $queryParams['ctx.instance'] = $ctxInstance;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation settingsServiceGetLockoutSettings
     *
     * Get the lockout settings
     *
     * @param  string $ctxOrgId ctxOrgId (optional)
     * @param  bool $ctxInstance ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Settingsv2GetLockoutSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function settingsServiceGetLockoutSettings($ctxOrgId = null, $ctxInstance = null)
    {
        list($response) = $this->settingsServiceGetLockoutSettingsWithHttpInfo($ctxOrgId, $ctxInstance);
        return $response;
    }

    /**
     * Operation settingsServiceGetLockoutSettingsWithHttpInfo
     *
     * Get the lockout settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Settingsv2GetLockoutSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetLockoutSettingsWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $request = $this->settingsServiceGetLockoutSettingsRequest($ctxOrgId, $ctxInstance);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Settingsv2GetLockoutSettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Settingsv2GetLockoutSettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2GetLockoutSettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Settingsv2GetLockoutSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetLockoutSettingsAsync
     *
     * Get the lockout settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetLockoutSettingsAsync($ctxOrgId = null, $ctxInstance = null)
    {
        return $this->settingsServiceGetLockoutSettingsAsyncWithHttpInfo($ctxOrgId, $ctxInstance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetLockoutSettingsAsyncWithHttpInfo
     *
     * Get the lockout settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetLockoutSettingsAsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2GetLockoutSettingsResponse';
        $request = $this->settingsServiceGetLockoutSettingsRequest($ctxOrgId, $ctxInstance);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetLockoutSettings'
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function settingsServiceGetLockoutSettingsRequest($ctxOrgId = null, $ctxInstance = null)
    {

        $resourcePath = '/v2/settings/lockout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($ctxOrgId)) {
            $ctxOrgId = ObjectSerializer::serializeCollection($ctxOrgId, '', true);
        }
        if ($ctxOrgId !== null) {
            $queryParams['ctx.orgId'] = $ctxOrgId;
        }
        // query params
        if (is_array($ctxInstance)) {
            $ctxInstance = ObjectSerializer::serializeCollection($ctxInstance, '', true);
        }
        if ($ctxInstance !== null) {
            $queryParams['ctx.instance'] = $ctxInstance;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation settingsServiceGetLockoutSettings_0
     *
     * Get the lockout settings
     *
     * @param  string $ctxOrgId ctxOrgId (optional)
     * @param  bool $ctxInstance ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Settingsv2betaGetLockoutSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function settingsServiceGetLockoutSettings_0($ctxOrgId = null, $ctxInstance = null)
    {
        list($response) = $this->settingsServiceGetLockoutSettings_0WithHttpInfo($ctxOrgId, $ctxInstance);
        return $response;
    }

    /**
     * Operation settingsServiceGetLockoutSettings_0WithHttpInfo
     *
     * Get the lockout settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Settingsv2betaGetLockoutSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetLockoutSettings_0WithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $request = $this->settingsServiceGetLockoutSettings_0Request($ctxOrgId, $ctxInstance);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Settingsv2betaGetLockoutSettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Settingsv2betaGetLockoutSettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaGetLockoutSettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Settingsv2betaGetLockoutSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetLockoutSettings_0Async
     *
     * Get the lockout settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetLockoutSettings_0Async($ctxOrgId = null, $ctxInstance = null)
    {
        return $this->settingsServiceGetLockoutSettings_0AsyncWithHttpInfo($ctxOrgId, $ctxInstance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetLockoutSettings_0AsyncWithHttpInfo
     *
     * Get the lockout settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetLockoutSettings_0AsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaGetLockoutSettingsResponse';
        $request = $this->settingsServiceGetLockoutSettings_0Request($ctxOrgId, $ctxInstance);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetLockoutSettings_0'
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function settingsServiceGetLockoutSettings_0Request($ctxOrgId = null, $ctxInstance = null)
    {

        $resourcePath = '/v2beta/settings/lockout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($ctxOrgId)) {
            $ctxOrgId = ObjectSerializer::serializeCollection($ctxOrgId, '', true);
        }
        if ($ctxOrgId !== null) {
            $queryParams['ctx.orgId'] = $ctxOrgId;
        }
        // query params
        if (is_array($ctxInstance)) {
            $ctxInstance = ObjectSerializer::serializeCollection($ctxInstance, '', true);
        }
        if ($ctxInstance !== null) {
            $queryParams['ctx.instance'] = $ctxInstance;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation settingsServiceGetLoginSettings
     *
     * Get the login settings
     *
     * @param  string $ctxOrgId ctxOrgId (optional)
     * @param  bool $ctxInstance ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Settingsv2GetLoginSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function settingsServiceGetLoginSettings($ctxOrgId = null, $ctxInstance = null)
    {
        list($response) = $this->settingsServiceGetLoginSettingsWithHttpInfo($ctxOrgId, $ctxInstance);
        return $response;
    }

    /**
     * Operation settingsServiceGetLoginSettingsWithHttpInfo
     *
     * Get the login settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Settingsv2GetLoginSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetLoginSettingsWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $request = $this->settingsServiceGetLoginSettingsRequest($ctxOrgId, $ctxInstance);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Settingsv2GetLoginSettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Settingsv2GetLoginSettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2GetLoginSettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Settingsv2GetLoginSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetLoginSettingsAsync
     *
     * Get the login settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetLoginSettingsAsync($ctxOrgId = null, $ctxInstance = null)
    {
        return $this->settingsServiceGetLoginSettingsAsyncWithHttpInfo($ctxOrgId, $ctxInstance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetLoginSettingsAsyncWithHttpInfo
     *
     * Get the login settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetLoginSettingsAsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2GetLoginSettingsResponse';
        $request = $this->settingsServiceGetLoginSettingsRequest($ctxOrgId, $ctxInstance);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetLoginSettings'
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function settingsServiceGetLoginSettingsRequest($ctxOrgId = null, $ctxInstance = null)
    {

        $resourcePath = '/v2/settings/login';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($ctxOrgId)) {
            $ctxOrgId = ObjectSerializer::serializeCollection($ctxOrgId, '', true);
        }
        if ($ctxOrgId !== null) {
            $queryParams['ctx.orgId'] = $ctxOrgId;
        }
        // query params
        if (is_array($ctxInstance)) {
            $ctxInstance = ObjectSerializer::serializeCollection($ctxInstance, '', true);
        }
        if ($ctxInstance !== null) {
            $queryParams['ctx.instance'] = $ctxInstance;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation settingsServiceGetLoginSettings_0
     *
     * Get the login settings
     *
     * @param  string $ctxOrgId ctxOrgId (optional)
     * @param  bool $ctxInstance ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Settingsv2betaGetLoginSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function settingsServiceGetLoginSettings_0($ctxOrgId = null, $ctxInstance = null)
    {
        list($response) = $this->settingsServiceGetLoginSettings_0WithHttpInfo($ctxOrgId, $ctxInstance);
        return $response;
    }

    /**
     * Operation settingsServiceGetLoginSettings_0WithHttpInfo
     *
     * Get the login settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Settingsv2betaGetLoginSettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetLoginSettings_0WithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $request = $this->settingsServiceGetLoginSettings_0Request($ctxOrgId, $ctxInstance);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Settingsv2betaGetLoginSettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Settingsv2betaGetLoginSettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaGetLoginSettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Settingsv2betaGetLoginSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetLoginSettings_0Async
     *
     * Get the login settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetLoginSettings_0Async($ctxOrgId = null, $ctxInstance = null)
    {
        return $this->settingsServiceGetLoginSettings_0AsyncWithHttpInfo($ctxOrgId, $ctxInstance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetLoginSettings_0AsyncWithHttpInfo
     *
     * Get the login settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetLoginSettings_0AsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaGetLoginSettingsResponse';
        $request = $this->settingsServiceGetLoginSettings_0Request($ctxOrgId, $ctxInstance);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetLoginSettings_0'
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function settingsServiceGetLoginSettings_0Request($ctxOrgId = null, $ctxInstance = null)
    {

        $resourcePath = '/v2beta/settings/login';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($ctxOrgId)) {
            $ctxOrgId = ObjectSerializer::serializeCollection($ctxOrgId, '', true);
        }
        if ($ctxOrgId !== null) {
            $queryParams['ctx.orgId'] = $ctxOrgId;
        }
        // query params
        if (is_array($ctxInstance)) {
            $ctxInstance = ObjectSerializer::serializeCollection($ctxInstance, '', true);
        }
        if ($ctxInstance !== null) {
            $queryParams['ctx.instance'] = $ctxInstance;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation settingsServiceGetPasswordComplexitySettings
     *
     * Get the password complexity settings
     *
     * @param  string $ctxOrgId ctxOrgId (optional)
     * @param  bool $ctxInstance ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Settingsv2GetPasswordComplexitySettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function settingsServiceGetPasswordComplexitySettings($ctxOrgId = null, $ctxInstance = null)
    {
        list($response) = $this->settingsServiceGetPasswordComplexitySettingsWithHttpInfo($ctxOrgId, $ctxInstance);
        return $response;
    }

    /**
     * Operation settingsServiceGetPasswordComplexitySettingsWithHttpInfo
     *
     * Get the password complexity settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Settingsv2GetPasswordComplexitySettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetPasswordComplexitySettingsWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $request = $this->settingsServiceGetPasswordComplexitySettingsRequest($ctxOrgId, $ctxInstance);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Settingsv2GetPasswordComplexitySettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Settingsv2GetPasswordComplexitySettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2GetPasswordComplexitySettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Settingsv2GetPasswordComplexitySettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetPasswordComplexitySettingsAsync
     *
     * Get the password complexity settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetPasswordComplexitySettingsAsync($ctxOrgId = null, $ctxInstance = null)
    {
        return $this->settingsServiceGetPasswordComplexitySettingsAsyncWithHttpInfo($ctxOrgId, $ctxInstance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetPasswordComplexitySettingsAsyncWithHttpInfo
     *
     * Get the password complexity settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetPasswordComplexitySettingsAsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2GetPasswordComplexitySettingsResponse';
        $request = $this->settingsServiceGetPasswordComplexitySettingsRequest($ctxOrgId, $ctxInstance);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetPasswordComplexitySettings'
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function settingsServiceGetPasswordComplexitySettingsRequest($ctxOrgId = null, $ctxInstance = null)
    {

        $resourcePath = '/v2/settings/password/complexity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($ctxOrgId)) {
            $ctxOrgId = ObjectSerializer::serializeCollection($ctxOrgId, '', true);
        }
        if ($ctxOrgId !== null) {
            $queryParams['ctx.orgId'] = $ctxOrgId;
        }
        // query params
        if (is_array($ctxInstance)) {
            $ctxInstance = ObjectSerializer::serializeCollection($ctxInstance, '', true);
        }
        if ($ctxInstance !== null) {
            $queryParams['ctx.instance'] = $ctxInstance;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation settingsServiceGetPasswordComplexitySettings_0
     *
     * Get the password complexity settings
     *
     * @param  string $ctxOrgId ctxOrgId (optional)
     * @param  bool $ctxInstance ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Settingsv2betaGetPasswordComplexitySettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function settingsServiceGetPasswordComplexitySettings_0($ctxOrgId = null, $ctxInstance = null)
    {
        list($response) = $this->settingsServiceGetPasswordComplexitySettings_0WithHttpInfo($ctxOrgId, $ctxInstance);
        return $response;
    }

    /**
     * Operation settingsServiceGetPasswordComplexitySettings_0WithHttpInfo
     *
     * Get the password complexity settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Settingsv2betaGetPasswordComplexitySettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetPasswordComplexitySettings_0WithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $request = $this->settingsServiceGetPasswordComplexitySettings_0Request($ctxOrgId, $ctxInstance);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Settingsv2betaGetPasswordComplexitySettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Settingsv2betaGetPasswordComplexitySettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaGetPasswordComplexitySettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Settingsv2betaGetPasswordComplexitySettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetPasswordComplexitySettings_0Async
     *
     * Get the password complexity settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetPasswordComplexitySettings_0Async($ctxOrgId = null, $ctxInstance = null)
    {
        return $this->settingsServiceGetPasswordComplexitySettings_0AsyncWithHttpInfo($ctxOrgId, $ctxInstance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetPasswordComplexitySettings_0AsyncWithHttpInfo
     *
     * Get the password complexity settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetPasswordComplexitySettings_0AsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaGetPasswordComplexitySettingsResponse';
        $request = $this->settingsServiceGetPasswordComplexitySettings_0Request($ctxOrgId, $ctxInstance);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetPasswordComplexitySettings_0'
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function settingsServiceGetPasswordComplexitySettings_0Request($ctxOrgId = null, $ctxInstance = null)
    {

        $resourcePath = '/v2beta/settings/password/complexity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($ctxOrgId)) {
            $ctxOrgId = ObjectSerializer::serializeCollection($ctxOrgId, '', true);
        }
        if ($ctxOrgId !== null) {
            $queryParams['ctx.orgId'] = $ctxOrgId;
        }
        // query params
        if (is_array($ctxInstance)) {
            $ctxInstance = ObjectSerializer::serializeCollection($ctxInstance, '', true);
        }
        if ($ctxInstance !== null) {
            $queryParams['ctx.instance'] = $ctxInstance;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation settingsServiceGetPasswordExpirySettings
     *
     * Get the password expiry settings
     *
     * @param  string $ctxOrgId ctxOrgId (optional)
     * @param  bool $ctxInstance ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Settingsv2GetPasswordExpirySettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function settingsServiceGetPasswordExpirySettings($ctxOrgId = null, $ctxInstance = null)
    {
        list($response) = $this->settingsServiceGetPasswordExpirySettingsWithHttpInfo($ctxOrgId, $ctxInstance);
        return $response;
    }

    /**
     * Operation settingsServiceGetPasswordExpirySettingsWithHttpInfo
     *
     * Get the password expiry settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Settingsv2GetPasswordExpirySettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetPasswordExpirySettingsWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $request = $this->settingsServiceGetPasswordExpirySettingsRequest($ctxOrgId, $ctxInstance);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Settingsv2GetPasswordExpirySettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Settingsv2GetPasswordExpirySettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2GetPasswordExpirySettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Settingsv2GetPasswordExpirySettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetPasswordExpirySettingsAsync
     *
     * Get the password expiry settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetPasswordExpirySettingsAsync($ctxOrgId = null, $ctxInstance = null)
    {
        return $this->settingsServiceGetPasswordExpirySettingsAsyncWithHttpInfo($ctxOrgId, $ctxInstance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetPasswordExpirySettingsAsyncWithHttpInfo
     *
     * Get the password expiry settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetPasswordExpirySettingsAsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2GetPasswordExpirySettingsResponse';
        $request = $this->settingsServiceGetPasswordExpirySettingsRequest($ctxOrgId, $ctxInstance);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetPasswordExpirySettings'
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function settingsServiceGetPasswordExpirySettingsRequest($ctxOrgId = null, $ctxInstance = null)
    {

        $resourcePath = '/v2/settings/password/expiry';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($ctxOrgId)) {
            $ctxOrgId = ObjectSerializer::serializeCollection($ctxOrgId, '', true);
        }
        if ($ctxOrgId !== null) {
            $queryParams['ctx.orgId'] = $ctxOrgId;
        }
        // query params
        if (is_array($ctxInstance)) {
            $ctxInstance = ObjectSerializer::serializeCollection($ctxInstance, '', true);
        }
        if ($ctxInstance !== null) {
            $queryParams['ctx.instance'] = $ctxInstance;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation settingsServiceGetPasswordExpirySettings_0
     *
     * Get the password expiry settings
     *
     * @param  string $ctxOrgId ctxOrgId (optional)
     * @param  bool $ctxInstance ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Settingsv2betaGetPasswordExpirySettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function settingsServiceGetPasswordExpirySettings_0($ctxOrgId = null, $ctxInstance = null)
    {
        list($response) = $this->settingsServiceGetPasswordExpirySettings_0WithHttpInfo($ctxOrgId, $ctxInstance);
        return $response;
    }

    /**
     * Operation settingsServiceGetPasswordExpirySettings_0WithHttpInfo
     *
     * Get the password expiry settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Settingsv2betaGetPasswordExpirySettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetPasswordExpirySettings_0WithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $request = $this->settingsServiceGetPasswordExpirySettings_0Request($ctxOrgId, $ctxInstance);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Settingsv2betaGetPasswordExpirySettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Settingsv2betaGetPasswordExpirySettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaGetPasswordExpirySettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Settingsv2betaGetPasswordExpirySettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetPasswordExpirySettings_0Async
     *
     * Get the password expiry settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetPasswordExpirySettings_0Async($ctxOrgId = null, $ctxInstance = null)
    {
        return $this->settingsServiceGetPasswordExpirySettings_0AsyncWithHttpInfo($ctxOrgId, $ctxInstance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetPasswordExpirySettings_0AsyncWithHttpInfo
     *
     * Get the password expiry settings
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetPasswordExpirySettings_0AsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaGetPasswordExpirySettingsResponse';
        $request = $this->settingsServiceGetPasswordExpirySettings_0Request($ctxOrgId, $ctxInstance);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetPasswordExpirySettings_0'
     *
     * @param  string $ctxOrgId (optional)
     * @param  bool $ctxInstance (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function settingsServiceGetPasswordExpirySettings_0Request($ctxOrgId = null, $ctxInstance = null)
    {

        $resourcePath = '/v2beta/settings/password/expiry';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($ctxOrgId)) {
            $ctxOrgId = ObjectSerializer::serializeCollection($ctxOrgId, '', true);
        }
        if ($ctxOrgId !== null) {
            $queryParams['ctx.orgId'] = $ctxOrgId;
        }
        // query params
        if (is_array($ctxInstance)) {
            $ctxInstance = ObjectSerializer::serializeCollection($ctxInstance, '', true);
        }
        if ($ctxInstance !== null) {
            $queryParams['ctx.instance'] = $ctxInstance;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation settingsServiceGetSecuritySettings
     *
     * Get Security Settings
     *
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Settingsv2betaGetSecuritySettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function settingsServiceGetSecuritySettings()
    {
        list($response) = $this->settingsServiceGetSecuritySettingsWithHttpInfo();
        return $response;
    }

    /**
     * Operation settingsServiceGetSecuritySettingsWithHttpInfo
     *
     * Get Security Settings
     *
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Settingsv2betaGetSecuritySettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetSecuritySettingsWithHttpInfo()
    {
        $request = $this->settingsServiceGetSecuritySettingsRequest();

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Settingsv2betaGetSecuritySettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Settingsv2betaGetSecuritySettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaGetSecuritySettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Settingsv2betaGetSecuritySettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetSecuritySettingsAsync
     *
     * Get Security Settings
     *
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetSecuritySettingsAsync()
    {
        return $this->settingsServiceGetSecuritySettingsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetSecuritySettingsAsyncWithHttpInfo
     *
     * Get Security Settings
     *
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceGetSecuritySettingsAsyncWithHttpInfo()
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaGetSecuritySettingsResponse';
        $request = $this->settingsServiceGetSecuritySettingsRequest();

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetSecuritySettings'
     *
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function settingsServiceGetSecuritySettingsRequest()
    {

        $resourcePath = '/v2beta/settings/security';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation settingsServiceSetSecuritySettings
     *
     * Set Security Settings
     *
     * @param  \ArthurHlt\Zitadel\Model\Settingsv2betaSetSecuritySettingsRequest $body body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Settingsv2betaSetSecuritySettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function settingsServiceSetSecuritySettings($body)
    {
        list($response) = $this->settingsServiceSetSecuritySettingsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation settingsServiceSetSecuritySettingsWithHttpInfo
     *
     * Set Security Settings
     *
     * @param  \ArthurHlt\Zitadel\Model\Settingsv2betaSetSecuritySettingsRequest $body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Settingsv2betaSetSecuritySettingsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceSetSecuritySettingsWithHttpInfo($body)
    {
        $request = $this->settingsServiceSetSecuritySettingsRequest($body);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Settingsv2betaSetSecuritySettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Settingsv2betaSetSecuritySettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaSetSecuritySettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Settingsv2betaSetSecuritySettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceSetSecuritySettingsAsync
     *
     * Set Security Settings
     *
     * @param  \ArthurHlt\Zitadel\Model\Settingsv2betaSetSecuritySettingsRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceSetSecuritySettingsAsync($body)
    {
        return $this->settingsServiceSetSecuritySettingsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceSetSecuritySettingsAsyncWithHttpInfo
     *
     * Set Security Settings
     *
     * @param  \ArthurHlt\Zitadel\Model\Settingsv2betaSetSecuritySettingsRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function settingsServiceSetSecuritySettingsAsyncWithHttpInfo($body)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Settingsv2betaSetSecuritySettingsResponse';
        $request = $this->settingsServiceSetSecuritySettingsRequest($body);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceSetSecuritySettings'
     *
     * @param  \ArthurHlt\Zitadel\Model\Settingsv2betaSetSecuritySettingsRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function settingsServiceSetSecuritySettingsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling settingsServiceSetSecuritySettings'
            );
        }

        $resourcePath = '/v2beta/policies/security';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
