<?php
/**
 * ZITADELUserSchemasApi
 * PHP version 7.2
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ArthurHlt\Zitadel\Api;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use ArthurHlt\Zitadel\ApiException;
use ArthurHlt\Zitadel\Configuration;
use ArthurHlt\Zitadel\DebugPlugin;
use ArthurHlt\Zitadel\HeaderSelector;
use ArthurHlt\Zitadel\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * ZITADELUserSchemasApi Class Doc Comment
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ZITADELUserSchemasApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://zitadel.cloud/management/v1');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation zITADELUserSchemasCreateUserSchema
     *
     * Create a user schema
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaUserSchema $userSchema userSchema (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaCreateUserSchemaResponse|\ArthurHlt\Zitadel\Model\V3alphaCreateUserSchemaResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUserSchemasCreateUserSchema($userSchema, $instanceId = null, $instanceDomain = null)
    {
        list($response) = $this->zITADELUserSchemasCreateUserSchemaWithHttpInfo($userSchema, $instanceId, $instanceDomain);
        return $response;
    }

    /**
     * Operation zITADELUserSchemasCreateUserSchemaWithHttpInfo
     *
     * Create a user schema
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaUserSchema $userSchema (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaCreateUserSchemaResponse|\ArthurHlt\Zitadel\Model\V3alphaCreateUserSchemaResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUserSchemasCreateUserSchemaWithHttpInfo($userSchema, $instanceId = null, $instanceDomain = null)
    {
        $request = $this->zITADELUserSchemasCreateUserSchemaRequest($userSchema, $instanceId, $instanceDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaCreateUserSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaCreateUserSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaCreateUserSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaCreateUserSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaCreateUserSchemaResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaCreateUserSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaCreateUserSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUserSchemasCreateUserSchemaAsync
     *
     * Create a user schema
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaUserSchema $userSchema (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUserSchemasCreateUserSchemaAsync($userSchema, $instanceId = null, $instanceDomain = null)
    {
        return $this->zITADELUserSchemasCreateUserSchemaAsyncWithHttpInfo($userSchema, $instanceId, $instanceDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUserSchemasCreateUserSchemaAsyncWithHttpInfo
     *
     * Create a user schema
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaUserSchema $userSchema (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUserSchemasCreateUserSchemaAsyncWithHttpInfo($userSchema, $instanceId = null, $instanceDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaCreateUserSchemaResponse';
        $request = $this->zITADELUserSchemasCreateUserSchemaRequest($userSchema, $instanceId, $instanceDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUserSchemasCreateUserSchema'
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaUserSchema $userSchema (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUserSchemasCreateUserSchemaRequest($userSchema, $instanceId = null, $instanceDomain = null)
    {
        // verify the required parameter 'userSchema' is set
        if ($userSchema === null || (is_array($userSchema) && count($userSchema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userSchema when calling zITADELUserSchemasCreateUserSchema'
            );
        }

        $resourcePath = '/resources/v3alpha/user_schemas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($userSchema)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($userSchema));
            } else {
                $httpBody = $userSchema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUserSchemasDeactivateUserSchema
     *
     * Deactivate a user schema
     *
     * @param  string $id unique identifier of the schema. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaDeactivateUserSchemaResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUserSchemasDeactivateUserSchema($id, $instanceId = null, $instanceDomain = null)
    {
        list($response) = $this->zITADELUserSchemasDeactivateUserSchemaWithHttpInfo($id, $instanceId, $instanceDomain);
        return $response;
    }

    /**
     * Operation zITADELUserSchemasDeactivateUserSchemaWithHttpInfo
     *
     * Deactivate a user schema
     *
     * @param  string $id unique identifier of the schema. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaDeactivateUserSchemaResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUserSchemasDeactivateUserSchemaWithHttpInfo($id, $instanceId = null, $instanceDomain = null)
    {
        $request = $this->zITADELUserSchemasDeactivateUserSchemaRequest($id, $instanceId, $instanceDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaDeactivateUserSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaDeactivateUserSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaDeactivateUserSchemaResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaDeactivateUserSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUserSchemasDeactivateUserSchemaAsync
     *
     * Deactivate a user schema
     *
     * @param  string $id unique identifier of the schema. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUserSchemasDeactivateUserSchemaAsync($id, $instanceId = null, $instanceDomain = null)
    {
        return $this->zITADELUserSchemasDeactivateUserSchemaAsyncWithHttpInfo($id, $instanceId, $instanceDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUserSchemasDeactivateUserSchemaAsyncWithHttpInfo
     *
     * Deactivate a user schema
     *
     * @param  string $id unique identifier of the schema. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUserSchemasDeactivateUserSchemaAsyncWithHttpInfo($id, $instanceId = null, $instanceDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaDeactivateUserSchemaResponse';
        $request = $this->zITADELUserSchemasDeactivateUserSchemaRequest($id, $instanceId, $instanceDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUserSchemasDeactivateUserSchema'
     *
     * @param  string $id unique identifier of the schema. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUserSchemasDeactivateUserSchemaRequest($id, $instanceId = null, $instanceDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUserSchemasDeactivateUserSchema'
            );
        }

        $resourcePath = '/resources/v3alpha/user_schemas/{id}/_deactivate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUserSchemasDeleteUserSchema
     *
     * Delete a user schema
     *
     * @param  string $id unique identifier of the schema. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaDeleteUserSchemaResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUserSchemasDeleteUserSchema($id, $instanceId = null, $instanceDomain = null)
    {
        list($response) = $this->zITADELUserSchemasDeleteUserSchemaWithHttpInfo($id, $instanceId, $instanceDomain);
        return $response;
    }

    /**
     * Operation zITADELUserSchemasDeleteUserSchemaWithHttpInfo
     *
     * Delete a user schema
     *
     * @param  string $id unique identifier of the schema. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaDeleteUserSchemaResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUserSchemasDeleteUserSchemaWithHttpInfo($id, $instanceId = null, $instanceDomain = null)
    {
        $request = $this->zITADELUserSchemasDeleteUserSchemaRequest($id, $instanceId, $instanceDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaDeleteUserSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaDeleteUserSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaDeleteUserSchemaResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaDeleteUserSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUserSchemasDeleteUserSchemaAsync
     *
     * Delete a user schema
     *
     * @param  string $id unique identifier of the schema. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUserSchemasDeleteUserSchemaAsync($id, $instanceId = null, $instanceDomain = null)
    {
        return $this->zITADELUserSchemasDeleteUserSchemaAsyncWithHttpInfo($id, $instanceId, $instanceDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUserSchemasDeleteUserSchemaAsyncWithHttpInfo
     *
     * Delete a user schema
     *
     * @param  string $id unique identifier of the schema. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUserSchemasDeleteUserSchemaAsyncWithHttpInfo($id, $instanceId = null, $instanceDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaDeleteUserSchemaResponse';
        $request = $this->zITADELUserSchemasDeleteUserSchemaRequest($id, $instanceId, $instanceDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUserSchemasDeleteUserSchema'
     *
     * @param  string $id unique identifier of the schema. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUserSchemasDeleteUserSchemaRequest($id, $instanceId = null, $instanceDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUserSchemasDeleteUserSchema'
            );
        }

        $resourcePath = '/resources/v3alpha/user_schemas/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUserSchemasGetUserSchema
     *
     * User schema by ID
     *
     * @param  string $id unique identifier of the schema. (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaGetUserSchemaResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUserSchemasGetUserSchema($id)
    {
        list($response) = $this->zITADELUserSchemasGetUserSchemaWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation zITADELUserSchemasGetUserSchemaWithHttpInfo
     *
     * User schema by ID
     *
     * @param  string $id unique identifier of the schema. (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaGetUserSchemaResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUserSchemasGetUserSchemaWithHttpInfo($id)
    {
        $request = $this->zITADELUserSchemasGetUserSchemaRequest($id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaGetUserSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaGetUserSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaGetUserSchemaResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaGetUserSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUserSchemasGetUserSchemaAsync
     *
     * User schema by ID
     *
     * @param  string $id unique identifier of the schema. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUserSchemasGetUserSchemaAsync($id)
    {
        return $this->zITADELUserSchemasGetUserSchemaAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUserSchemasGetUserSchemaAsyncWithHttpInfo
     *
     * User schema by ID
     *
     * @param  string $id unique identifier of the schema. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUserSchemasGetUserSchemaAsyncWithHttpInfo($id)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaGetUserSchemaResponse';
        $request = $this->zITADELUserSchemasGetUserSchemaRequest($id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUserSchemasGetUserSchema'
     *
     * @param  string $id unique identifier of the schema. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUserSchemasGetUserSchemaRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUserSchemasGetUserSchema'
            );
        }

        $resourcePath = '/resources/v3alpha/user_schemas/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUserSchemasPatchUserSchema
     *
     * Patch a user schema
     *
     * @param  string $id unique identifier of the schema. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userschemav3alphaPatchUserSchema $userSchema userSchema (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaPatchUserSchemaResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUserSchemasPatchUserSchema($id, $userSchema, $instanceId = null, $instanceDomain = null)
    {
        list($response) = $this->zITADELUserSchemasPatchUserSchemaWithHttpInfo($id, $userSchema, $instanceId, $instanceDomain);
        return $response;
    }

    /**
     * Operation zITADELUserSchemasPatchUserSchemaWithHttpInfo
     *
     * Patch a user schema
     *
     * @param  string $id unique identifier of the schema. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userschemav3alphaPatchUserSchema $userSchema (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaPatchUserSchemaResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUserSchemasPatchUserSchemaWithHttpInfo($id, $userSchema, $instanceId = null, $instanceDomain = null)
    {
        $request = $this->zITADELUserSchemasPatchUserSchemaRequest($id, $userSchema, $instanceId, $instanceDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaPatchUserSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaPatchUserSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaPatchUserSchemaResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaPatchUserSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUserSchemasPatchUserSchemaAsync
     *
     * Patch a user schema
     *
     * @param  string $id unique identifier of the schema. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userschemav3alphaPatchUserSchema $userSchema (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUserSchemasPatchUserSchemaAsync($id, $userSchema, $instanceId = null, $instanceDomain = null)
    {
        return $this->zITADELUserSchemasPatchUserSchemaAsyncWithHttpInfo($id, $userSchema, $instanceId, $instanceDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUserSchemasPatchUserSchemaAsyncWithHttpInfo
     *
     * Patch a user schema
     *
     * @param  string $id unique identifier of the schema. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userschemav3alphaPatchUserSchema $userSchema (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUserSchemasPatchUserSchemaAsyncWithHttpInfo($id, $userSchema, $instanceId = null, $instanceDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaPatchUserSchemaResponse';
        $request = $this->zITADELUserSchemasPatchUserSchemaRequest($id, $userSchema, $instanceId, $instanceDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUserSchemasPatchUserSchema'
     *
     * @param  string $id unique identifier of the schema. (required)
     * @param  \ArthurHlt\Zitadel\Model\Userschemav3alphaPatchUserSchema $userSchema (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUserSchemasPatchUserSchemaRequest($id, $userSchema, $instanceId = null, $instanceDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUserSchemasPatchUserSchema'
            );
        }
        // verify the required parameter 'userSchema' is set
        if ($userSchema === null || (is_array($userSchema) && count($userSchema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userSchema when calling zITADELUserSchemasPatchUserSchema'
            );
        }

        $resourcePath = '/resources/v3alpha/user_schemas/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($userSchema)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($userSchema));
            } else {
                $httpBody = $userSchema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PATCH', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUserSchemasReactivateUserSchema
     *
     * Reactivate a user schema
     *
     * @param  string $id unique identifier of the schema. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaReactivateUserSchemaResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUserSchemasReactivateUserSchema($id, $instanceId = null, $instanceDomain = null)
    {
        list($response) = $this->zITADELUserSchemasReactivateUserSchemaWithHttpInfo($id, $instanceId, $instanceDomain);
        return $response;
    }

    /**
     * Operation zITADELUserSchemasReactivateUserSchemaWithHttpInfo
     *
     * Reactivate a user schema
     *
     * @param  string $id unique identifier of the schema. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaReactivateUserSchemaResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUserSchemasReactivateUserSchemaWithHttpInfo($id, $instanceId = null, $instanceDomain = null)
    {
        $request = $this->zITADELUserSchemasReactivateUserSchemaRequest($id, $instanceId, $instanceDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaReactivateUserSchemaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaReactivateUserSchemaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaReactivateUserSchemaResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaReactivateUserSchemaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUserSchemasReactivateUserSchemaAsync
     *
     * Reactivate a user schema
     *
     * @param  string $id unique identifier of the schema. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUserSchemasReactivateUserSchemaAsync($id, $instanceId = null, $instanceDomain = null)
    {
        return $this->zITADELUserSchemasReactivateUserSchemaAsyncWithHttpInfo($id, $instanceId, $instanceDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUserSchemasReactivateUserSchemaAsyncWithHttpInfo
     *
     * Reactivate a user schema
     *
     * @param  string $id unique identifier of the schema. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUserSchemasReactivateUserSchemaAsyncWithHttpInfo($id, $instanceId = null, $instanceDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaReactivateUserSchemaResponse';
        $request = $this->zITADELUserSchemasReactivateUserSchemaRequest($id, $instanceId, $instanceDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUserSchemasReactivateUserSchema'
     *
     * @param  string $id unique identifier of the schema. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUserSchemasReactivateUserSchemaRequest($id, $instanceId = null, $instanceDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELUserSchemasReactivateUserSchema'
            );
        }

        $resourcePath = '/resources/v3alpha/user_schemas/{id}/_reactivate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELUserSchemasSearchUserSchemas
     *
     * Search user schemas
     *
     * @param  \ArthurHlt\Zitadel\Model\Resourcesuserschemav3alphaSearchFilter[] $filters Define the criteria to filter for. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $queryOffset queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error. (optional)
     * @param  bool $queryDesc default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results. (optional)
     * @param  string $sortingColumn The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent. (optional, default to 'FIELD_NAME_UNSPECIFIED')
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaSearchUserSchemasResponse|\ArthurHlt\Zitadel\Model\RpcStatus|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELUserSchemasSearchUserSchemas($filters, $instanceId = null, $instanceDomain = null, $queryOffset = null, $queryLimit = null, $queryDesc = null, $sortingColumn = 'FIELD_NAME_UNSPECIFIED')
    {
        list($response) = $this->zITADELUserSchemasSearchUserSchemasWithHttpInfo($filters, $instanceId, $instanceDomain, $queryOffset, $queryLimit, $queryDesc, $sortingColumn);
        return $response;
    }

    /**
     * Operation zITADELUserSchemasSearchUserSchemasWithHttpInfo
     *
     * Search user schemas
     *
     * @param  \ArthurHlt\Zitadel\Model\Resourcesuserschemav3alphaSearchFilter[] $filters Define the criteria to filter for. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error. (optional)
     * @param  bool $queryDesc default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results. (optional)
     * @param  string $sortingColumn The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent. (optional, default to 'FIELD_NAME_UNSPECIFIED')
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaSearchUserSchemasResponse|\ArthurHlt\Zitadel\Model\RpcStatus|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELUserSchemasSearchUserSchemasWithHttpInfo($filters, $instanceId = null, $instanceDomain = null, $queryOffset = null, $queryLimit = null, $queryDesc = null, $sortingColumn = 'FIELD_NAME_UNSPECIFIED')
    {
        $request = $this->zITADELUserSchemasSearchUserSchemasRequest($filters, $instanceId, $instanceDomain, $queryOffset, $queryLimit, $queryDesc, $sortingColumn);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaSearchUserSchemasResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaSearchUserSchemasResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaSearchUserSchemasResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaSearchUserSchemasResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELUserSchemasSearchUserSchemasAsync
     *
     * Search user schemas
     *
     * @param  \ArthurHlt\Zitadel\Model\Resourcesuserschemav3alphaSearchFilter[] $filters Define the criteria to filter for. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error. (optional)
     * @param  bool $queryDesc default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results. (optional)
     * @param  string $sortingColumn The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent. (optional, default to 'FIELD_NAME_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUserSchemasSearchUserSchemasAsync($filters, $instanceId = null, $instanceDomain = null, $queryOffset = null, $queryLimit = null, $queryDesc = null, $sortingColumn = 'FIELD_NAME_UNSPECIFIED')
    {
        return $this->zITADELUserSchemasSearchUserSchemasAsyncWithHttpInfo($filters, $instanceId, $instanceDomain, $queryOffset, $queryLimit, $queryDesc, $sortingColumn)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELUserSchemasSearchUserSchemasAsyncWithHttpInfo
     *
     * Search user schemas
     *
     * @param  \ArthurHlt\Zitadel\Model\Resourcesuserschemav3alphaSearchFilter[] $filters Define the criteria to filter for. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error. (optional)
     * @param  bool $queryDesc default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results. (optional)
     * @param  string $sortingColumn The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent. (optional, default to 'FIELD_NAME_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELUserSchemasSearchUserSchemasAsyncWithHttpInfo($filters, $instanceId = null, $instanceDomain = null, $queryOffset = null, $queryLimit = null, $queryDesc = null, $sortingColumn = 'FIELD_NAME_UNSPECIFIED')
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaSearchUserSchemasResponse';
        $request = $this->zITADELUserSchemasSearchUserSchemasRequest($filters, $instanceId, $instanceDomain, $queryOffset, $queryLimit, $queryDesc, $sortingColumn);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELUserSchemasSearchUserSchemas'
     *
     * @param  \ArthurHlt\Zitadel\Model\Resourcesuserschemav3alphaSearchFilter[] $filters Define the criteria to filter for. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error. (optional)
     * @param  bool $queryDesc default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results. (optional)
     * @param  string $sortingColumn The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent. (optional, default to 'FIELD_NAME_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELUserSchemasSearchUserSchemasRequest($filters, $instanceId = null, $instanceDomain = null, $queryOffset = null, $queryLimit = null, $queryDesc = null, $sortingColumn = 'FIELD_NAME_UNSPECIFIED')
    {
        // verify the required parameter 'filters' is set
        if ($filters === null || (is_array($filters) && count($filters) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filters when calling zITADELUserSchemasSearchUserSchemas'
            );
        }

        $resourcePath = '/resources/v3alpha/user_schemas/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($queryOffset)) {
            $queryOffset = ObjectSerializer::serializeCollection($queryOffset, '', true);
        }
        if ($queryOffset !== null) {
            $queryParams['query.offset'] = $queryOffset;
        }
        // query params
        if (is_array($queryLimit)) {
            $queryLimit = ObjectSerializer::serializeCollection($queryLimit, '', true);
        }
        if ($queryLimit !== null) {
            $queryParams['query.limit'] = $queryLimit;
        }
        // query params
        if (is_array($queryDesc)) {
            $queryDesc = ObjectSerializer::serializeCollection($queryDesc, '', true);
        }
        if ($queryDesc !== null) {
            $queryParams['query.desc'] = $queryDesc;
        }
        // query params
        if (is_array($sortingColumn)) {
            $sortingColumn = ObjectSerializer::serializeCollection($sortingColumn, '', true);
        }
        if ($sortingColumn !== null) {
            $queryParams['sortingColumn'] = $sortingColumn;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($filters)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($filters));
            } else {
                $httpBody = $filters;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
