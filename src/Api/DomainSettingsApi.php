<?php
/**
 * DomainSettingsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ArthurHlt\Zitadel\Api;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use ArthurHlt\Zitadel\ApiException;
use ArthurHlt\Zitadel\Configuration;
use ArthurHlt\Zitadel\DebugPlugin;
use ArthurHlt\Zitadel\HeaderSelector;
use ArthurHlt\Zitadel\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * DomainSettingsApi Class Doc Comment
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DomainSettingsApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://zitadel.cloud/management/v1');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation adminServiceAddCustomDomainPolicy
     *
     * Set a Domain Settings for an Organization
     *
     * @param  string $orgId orgId (required)
     * @param  \ArthurHlt\Zitadel\Model\AdminServiceAddCustomDomainPolicyBody $body body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse|\ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse|\ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse|\ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function adminServiceAddCustomDomainPolicy($orgId, $body)
    {
        list($response) = $this->adminServiceAddCustomDomainPolicyWithHttpInfo($orgId, $body);
        return $response;
    }

    /**
     * Operation adminServiceAddCustomDomainPolicyWithHttpInfo
     *
     * Set a Domain Settings for an Organization
     *
     * @param  string $orgId (required)
     * @param  \ArthurHlt\Zitadel\Model\AdminServiceAddCustomDomainPolicyBody $body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse|\ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse|\ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse|\ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminServiceAddCustomDomainPolicyWithHttpInfo($orgId, $body)
    {
        $request = $this->adminServiceAddCustomDomainPolicyRequest($orgId, $body);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminServiceAddCustomDomainPolicyAsync
     *
     * Set a Domain Settings for an Organization
     *
     * @param  string $orgId (required)
     * @param  \ArthurHlt\Zitadel\Model\AdminServiceAddCustomDomainPolicyBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceAddCustomDomainPolicyAsync($orgId, $body)
    {
        return $this->adminServiceAddCustomDomainPolicyAsyncWithHttpInfo($orgId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminServiceAddCustomDomainPolicyAsyncWithHttpInfo
     *
     * Set a Domain Settings for an Organization
     *
     * @param  string $orgId (required)
     * @param  \ArthurHlt\Zitadel\Model\AdminServiceAddCustomDomainPolicyBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceAddCustomDomainPolicyAsyncWithHttpInfo($orgId, $body)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1AddCustomDomainPolicyResponse';
        $request = $this->adminServiceAddCustomDomainPolicyRequest($orgId, $body);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminServiceAddCustomDomainPolicy'
     *
     * @param  string $orgId (required)
     * @param  \ArthurHlt\Zitadel\Model\AdminServiceAddCustomDomainPolicyBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function adminServiceAddCustomDomainPolicyRequest($orgId, $body)
    {
        // verify the required parameter 'orgId' is set
        if ($orgId === null || (is_array($orgId) && count($orgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orgId when calling adminServiceAddCustomDomainPolicy'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminServiceAddCustomDomainPolicy'
            );
        }

        $resourcePath = '/orgs/{orgId}/policies/domain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($orgId !== null) {
            $resourcePath = str_replace(
                '{' . 'orgId' . '}',
                ObjectSerializer::toPathValue($orgId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation adminServiceAddCustomOrgIAMPolicy
     *
     * Add Custom Org IAM Policy
     *
     * @param  string $orgId orgId (required)
     * @param  \ArthurHlt\Zitadel\Model\AdminServiceAddCustomOrgIAMPolicyBody $body body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function adminServiceAddCustomOrgIAMPolicy($orgId, $body)
    {
        list($response) = $this->adminServiceAddCustomOrgIAMPolicyWithHttpInfo($orgId, $body);
        return $response;
    }

    /**
     * Operation adminServiceAddCustomOrgIAMPolicyWithHttpInfo
     *
     * Add Custom Org IAM Policy
     *
     * @param  string $orgId (required)
     * @param  \ArthurHlt\Zitadel\Model\AdminServiceAddCustomOrgIAMPolicyBody $body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminServiceAddCustomOrgIAMPolicyWithHttpInfo($orgId, $body)
    {
        $request = $this->adminServiceAddCustomOrgIAMPolicyRequest($orgId, $body);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminServiceAddCustomOrgIAMPolicyAsync
     *
     * Add Custom Org IAM Policy
     *
     * @param  string $orgId (required)
     * @param  \ArthurHlt\Zitadel\Model\AdminServiceAddCustomOrgIAMPolicyBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceAddCustomOrgIAMPolicyAsync($orgId, $body)
    {
        return $this->adminServiceAddCustomOrgIAMPolicyAsyncWithHttpInfo($orgId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminServiceAddCustomOrgIAMPolicyAsyncWithHttpInfo
     *
     * Add Custom Org IAM Policy
     *
     * @param  string $orgId (required)
     * @param  \ArthurHlt\Zitadel\Model\AdminServiceAddCustomOrgIAMPolicyBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceAddCustomOrgIAMPolicyAsyncWithHttpInfo($orgId, $body)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1AddCustomOrgIAMPolicyResponse';
        $request = $this->adminServiceAddCustomOrgIAMPolicyRequest($orgId, $body);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminServiceAddCustomOrgIAMPolicy'
     *
     * @param  string $orgId (required)
     * @param  \ArthurHlt\Zitadel\Model\AdminServiceAddCustomOrgIAMPolicyBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function adminServiceAddCustomOrgIAMPolicyRequest($orgId, $body)
    {
        // verify the required parameter 'orgId' is set
        if ($orgId === null || (is_array($orgId) && count($orgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orgId when calling adminServiceAddCustomOrgIAMPolicy'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminServiceAddCustomOrgIAMPolicy'
            );
        }

        $resourcePath = '/orgs/{orgId}/policies/orgiam';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($orgId !== null) {
            $resourcePath = str_replace(
                '{' . 'orgId' . '}',
                ObjectSerializer::toPathValue($orgId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation adminServiceGetCustomDomainPolicy
     *
     * Get Domain Settings for Organization
     *
     * @param  string $orgId orgId (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1GetCustomDomainPolicyResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function adminServiceGetCustomDomainPolicy($orgId)
    {
        list($response) = $this->adminServiceGetCustomDomainPolicyWithHttpInfo($orgId);
        return $response;
    }

    /**
     * Operation adminServiceGetCustomDomainPolicyWithHttpInfo
     *
     * Get Domain Settings for Organization
     *
     * @param  string $orgId (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1GetCustomDomainPolicyResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminServiceGetCustomDomainPolicyWithHttpInfo($orgId)
    {
        $request = $this->adminServiceGetCustomDomainPolicyRequest($orgId);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1GetCustomDomainPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1GetCustomDomainPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1GetCustomDomainPolicyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1GetCustomDomainPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminServiceGetCustomDomainPolicyAsync
     *
     * Get Domain Settings for Organization
     *
     * @param  string $orgId (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceGetCustomDomainPolicyAsync($orgId)
    {
        return $this->adminServiceGetCustomDomainPolicyAsyncWithHttpInfo($orgId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminServiceGetCustomDomainPolicyAsyncWithHttpInfo
     *
     * Get Domain Settings for Organization
     *
     * @param  string $orgId (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceGetCustomDomainPolicyAsyncWithHttpInfo($orgId)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1GetCustomDomainPolicyResponse';
        $request = $this->adminServiceGetCustomDomainPolicyRequest($orgId);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminServiceGetCustomDomainPolicy'
     *
     * @param  string $orgId (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function adminServiceGetCustomDomainPolicyRequest($orgId)
    {
        // verify the required parameter 'orgId' is set
        if ($orgId === null || (is_array($orgId) && count($orgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orgId when calling adminServiceGetCustomDomainPolicy'
            );
        }

        $resourcePath = '/orgs/{orgId}/policies/domain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($orgId !== null) {
            $resourcePath = str_replace(
                '{' . 'orgId' . '}',
                ObjectSerializer::toPathValue($orgId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation adminServiceGetCustomOrgIAMPolicy
     *
     * Get Org IAM Policy
     *
     * @param  string $orgId orgId (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1GetCustomOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function adminServiceGetCustomOrgIAMPolicy($orgId)
    {
        list($response) = $this->adminServiceGetCustomOrgIAMPolicyWithHttpInfo($orgId);
        return $response;
    }

    /**
     * Operation adminServiceGetCustomOrgIAMPolicyWithHttpInfo
     *
     * Get Org IAM Policy
     *
     * @param  string $orgId (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1GetCustomOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminServiceGetCustomOrgIAMPolicyWithHttpInfo($orgId)
    {
        $request = $this->adminServiceGetCustomOrgIAMPolicyRequest($orgId);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1GetCustomOrgIAMPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1GetCustomOrgIAMPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1GetCustomOrgIAMPolicyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1GetCustomOrgIAMPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminServiceGetCustomOrgIAMPolicyAsync
     *
     * Get Org IAM Policy
     *
     * @param  string $orgId (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceGetCustomOrgIAMPolicyAsync($orgId)
    {
        return $this->adminServiceGetCustomOrgIAMPolicyAsyncWithHttpInfo($orgId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminServiceGetCustomOrgIAMPolicyAsyncWithHttpInfo
     *
     * Get Org IAM Policy
     *
     * @param  string $orgId (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceGetCustomOrgIAMPolicyAsyncWithHttpInfo($orgId)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1GetCustomOrgIAMPolicyResponse';
        $request = $this->adminServiceGetCustomOrgIAMPolicyRequest($orgId);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminServiceGetCustomOrgIAMPolicy'
     *
     * @param  string $orgId (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function adminServiceGetCustomOrgIAMPolicyRequest($orgId)
    {
        // verify the required parameter 'orgId' is set
        if ($orgId === null || (is_array($orgId) && count($orgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orgId when calling adminServiceGetCustomOrgIAMPolicy'
            );
        }

        $resourcePath = '/orgs/{orgId}/policies/orgiam';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($orgId !== null) {
            $resourcePath = str_replace(
                '{' . 'orgId' . '}',
                ObjectSerializer::toPathValue($orgId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation adminServiceGetDomainPolicy
     *
     * Get Domain Settings
     *
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Zitadeladminv1GetDomainPolicyResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function adminServiceGetDomainPolicy()
    {
        list($response) = $this->adminServiceGetDomainPolicyWithHttpInfo();
        return $response;
    }

    /**
     * Operation adminServiceGetDomainPolicyWithHttpInfo
     *
     * Get Domain Settings
     *
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Zitadeladminv1GetDomainPolicyResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminServiceGetDomainPolicyWithHttpInfo()
    {
        $request = $this->adminServiceGetDomainPolicyRequest();

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Zitadeladminv1GetDomainPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Zitadeladminv1GetDomainPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Zitadeladminv1GetDomainPolicyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Zitadeladminv1GetDomainPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminServiceGetDomainPolicyAsync
     *
     * Get Domain Settings
     *
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceGetDomainPolicyAsync()
    {
        return $this->adminServiceGetDomainPolicyAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminServiceGetDomainPolicyAsyncWithHttpInfo
     *
     * Get Domain Settings
     *
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceGetDomainPolicyAsyncWithHttpInfo()
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Zitadeladminv1GetDomainPolicyResponse';
        $request = $this->adminServiceGetDomainPolicyRequest();

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminServiceGetDomainPolicy'
     *
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function adminServiceGetDomainPolicyRequest()
    {

        $resourcePath = '/policies/domain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation adminServiceGetOrgIAMPolicy
     *
     * Get Org IAM Policy
     *
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Zitadeladminv1GetOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function adminServiceGetOrgIAMPolicy()
    {
        list($response) = $this->adminServiceGetOrgIAMPolicyWithHttpInfo();
        return $response;
    }

    /**
     * Operation adminServiceGetOrgIAMPolicyWithHttpInfo
     *
     * Get Org IAM Policy
     *
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Zitadeladminv1GetOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminServiceGetOrgIAMPolicyWithHttpInfo()
    {
        $request = $this->adminServiceGetOrgIAMPolicyRequest();

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Zitadeladminv1GetOrgIAMPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Zitadeladminv1GetOrgIAMPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Zitadeladminv1GetOrgIAMPolicyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Zitadeladminv1GetOrgIAMPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminServiceGetOrgIAMPolicyAsync
     *
     * Get Org IAM Policy
     *
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceGetOrgIAMPolicyAsync()
    {
        return $this->adminServiceGetOrgIAMPolicyAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminServiceGetOrgIAMPolicyAsyncWithHttpInfo
     *
     * Get Org IAM Policy
     *
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceGetOrgIAMPolicyAsyncWithHttpInfo()
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Zitadeladminv1GetOrgIAMPolicyResponse';
        $request = $this->adminServiceGetOrgIAMPolicyRequest();

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminServiceGetOrgIAMPolicy'
     *
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function adminServiceGetOrgIAMPolicyRequest()
    {

        $resourcePath = '/policies/orgiam';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation adminServiceResetCustomDomainPolicyToDefault
     *
     * Reset Domain Settings of Organization
     *
     * @param  string $orgId orgId (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1ResetCustomDomainPolicyToDefaultResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function adminServiceResetCustomDomainPolicyToDefault($orgId)
    {
        list($response) = $this->adminServiceResetCustomDomainPolicyToDefaultWithHttpInfo($orgId);
        return $response;
    }

    /**
     * Operation adminServiceResetCustomDomainPolicyToDefaultWithHttpInfo
     *
     * Reset Domain Settings of Organization
     *
     * @param  string $orgId (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1ResetCustomDomainPolicyToDefaultResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminServiceResetCustomDomainPolicyToDefaultWithHttpInfo($orgId)
    {
        $request = $this->adminServiceResetCustomDomainPolicyToDefaultRequest($orgId);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1ResetCustomDomainPolicyToDefaultResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ResetCustomDomainPolicyToDefaultResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1ResetCustomDomainPolicyToDefaultResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ResetCustomDomainPolicyToDefaultResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminServiceResetCustomDomainPolicyToDefaultAsync
     *
     * Reset Domain Settings of Organization
     *
     * @param  string $orgId (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceResetCustomDomainPolicyToDefaultAsync($orgId)
    {
        return $this->adminServiceResetCustomDomainPolicyToDefaultAsyncWithHttpInfo($orgId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminServiceResetCustomDomainPolicyToDefaultAsyncWithHttpInfo
     *
     * Reset Domain Settings of Organization
     *
     * @param  string $orgId (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceResetCustomDomainPolicyToDefaultAsyncWithHttpInfo($orgId)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1ResetCustomDomainPolicyToDefaultResponse';
        $request = $this->adminServiceResetCustomDomainPolicyToDefaultRequest($orgId);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminServiceResetCustomDomainPolicyToDefault'
     *
     * @param  string $orgId (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function adminServiceResetCustomDomainPolicyToDefaultRequest($orgId)
    {
        // verify the required parameter 'orgId' is set
        if ($orgId === null || (is_array($orgId) && count($orgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orgId when calling adminServiceResetCustomDomainPolicyToDefault'
            );
        }

        $resourcePath = '/orgs/{orgId}/policies/domain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($orgId !== null) {
            $resourcePath = str_replace(
                '{' . 'orgId' . '}',
                ObjectSerializer::toPathValue($orgId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation adminServiceResetCustomOrgIAMPolicyToDefault
     *
     * Reset Domain Settings of Organization
     *
     * @param  string $orgId orgId (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1ResetCustomOrgIAMPolicyToDefaultResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function adminServiceResetCustomOrgIAMPolicyToDefault($orgId)
    {
        list($response) = $this->adminServiceResetCustomOrgIAMPolicyToDefaultWithHttpInfo($orgId);
        return $response;
    }

    /**
     * Operation adminServiceResetCustomOrgIAMPolicyToDefaultWithHttpInfo
     *
     * Reset Domain Settings of Organization
     *
     * @param  string $orgId (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1ResetCustomOrgIAMPolicyToDefaultResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminServiceResetCustomOrgIAMPolicyToDefaultWithHttpInfo($orgId)
    {
        $request = $this->adminServiceResetCustomOrgIAMPolicyToDefaultRequest($orgId);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1ResetCustomOrgIAMPolicyToDefaultResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ResetCustomOrgIAMPolicyToDefaultResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1ResetCustomOrgIAMPolicyToDefaultResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ResetCustomOrgIAMPolicyToDefaultResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminServiceResetCustomOrgIAMPolicyToDefaultAsync
     *
     * Reset Domain Settings of Organization
     *
     * @param  string $orgId (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceResetCustomOrgIAMPolicyToDefaultAsync($orgId)
    {
        return $this->adminServiceResetCustomOrgIAMPolicyToDefaultAsyncWithHttpInfo($orgId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminServiceResetCustomOrgIAMPolicyToDefaultAsyncWithHttpInfo
     *
     * Reset Domain Settings of Organization
     *
     * @param  string $orgId (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceResetCustomOrgIAMPolicyToDefaultAsyncWithHttpInfo($orgId)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1ResetCustomOrgIAMPolicyToDefaultResponse';
        $request = $this->adminServiceResetCustomOrgIAMPolicyToDefaultRequest($orgId);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminServiceResetCustomOrgIAMPolicyToDefault'
     *
     * @param  string $orgId (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function adminServiceResetCustomOrgIAMPolicyToDefaultRequest($orgId)
    {
        // verify the required parameter 'orgId' is set
        if ($orgId === null || (is_array($orgId) && count($orgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orgId when calling adminServiceResetCustomOrgIAMPolicyToDefault'
            );
        }

        $resourcePath = '/orgs/{orgId}/policies/orgiam';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($orgId !== null) {
            $resourcePath = str_replace(
                '{' . 'orgId' . '}',
                ObjectSerializer::toPathValue($orgId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation adminServiceUpdateCustomDomainPolicy
     *
     * Update Domain Settings for Organization
     *
     * @param  string $orgId orgId (required)
     * @param  \ArthurHlt\Zitadel\Model\AdminServiceUpdateCustomDomainPolicyBody $body body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function adminServiceUpdateCustomDomainPolicy($orgId, $body)
    {
        list($response) = $this->adminServiceUpdateCustomDomainPolicyWithHttpInfo($orgId, $body);
        return $response;
    }

    /**
     * Operation adminServiceUpdateCustomDomainPolicyWithHttpInfo
     *
     * Update Domain Settings for Organization
     *
     * @param  string $orgId (required)
     * @param  \ArthurHlt\Zitadel\Model\AdminServiceUpdateCustomDomainPolicyBody $body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminServiceUpdateCustomDomainPolicyWithHttpInfo($orgId, $body)
    {
        $request = $this->adminServiceUpdateCustomDomainPolicyRequest($orgId, $body);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminServiceUpdateCustomDomainPolicyAsync
     *
     * Update Domain Settings for Organization
     *
     * @param  string $orgId (required)
     * @param  \ArthurHlt\Zitadel\Model\AdminServiceUpdateCustomDomainPolicyBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceUpdateCustomDomainPolicyAsync($orgId, $body)
    {
        return $this->adminServiceUpdateCustomDomainPolicyAsyncWithHttpInfo($orgId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminServiceUpdateCustomDomainPolicyAsyncWithHttpInfo
     *
     * Update Domain Settings for Organization
     *
     * @param  string $orgId (required)
     * @param  \ArthurHlt\Zitadel\Model\AdminServiceUpdateCustomDomainPolicyBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceUpdateCustomDomainPolicyAsyncWithHttpInfo($orgId, $body)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateCustomDomainPolicyResponse';
        $request = $this->adminServiceUpdateCustomDomainPolicyRequest($orgId, $body);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminServiceUpdateCustomDomainPolicy'
     *
     * @param  string $orgId (required)
     * @param  \ArthurHlt\Zitadel\Model\AdminServiceUpdateCustomDomainPolicyBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function adminServiceUpdateCustomDomainPolicyRequest($orgId, $body)
    {
        // verify the required parameter 'orgId' is set
        if ($orgId === null || (is_array($orgId) && count($orgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orgId when calling adminServiceUpdateCustomDomainPolicy'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminServiceUpdateCustomDomainPolicy'
            );
        }

        $resourcePath = '/orgs/{orgId}/policies/domain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($orgId !== null) {
            $resourcePath = str_replace(
                '{' . 'orgId' . '}',
                ObjectSerializer::toPathValue($orgId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * Operation adminServiceUpdateCustomOrgIAMPolicy
     *
     * Update Custom Org IAM Policy
     *
     * @param  string $orgId orgId (required)
     * @param  \ArthurHlt\Zitadel\Model\AdminServiceUpdateCustomOrgIAMPolicyBody $body body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function adminServiceUpdateCustomOrgIAMPolicy($orgId, $body)
    {
        list($response) = $this->adminServiceUpdateCustomOrgIAMPolicyWithHttpInfo($orgId, $body);
        return $response;
    }

    /**
     * Operation adminServiceUpdateCustomOrgIAMPolicyWithHttpInfo
     *
     * Update Custom Org IAM Policy
     *
     * @param  string $orgId (required)
     * @param  \ArthurHlt\Zitadel\Model\AdminServiceUpdateCustomOrgIAMPolicyBody $body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminServiceUpdateCustomOrgIAMPolicyWithHttpInfo($orgId, $body)
    {
        $request = $this->adminServiceUpdateCustomOrgIAMPolicyRequest($orgId, $body);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminServiceUpdateCustomOrgIAMPolicyAsync
     *
     * Update Custom Org IAM Policy
     *
     * @param  string $orgId (required)
     * @param  \ArthurHlt\Zitadel\Model\AdminServiceUpdateCustomOrgIAMPolicyBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceUpdateCustomOrgIAMPolicyAsync($orgId, $body)
    {
        return $this->adminServiceUpdateCustomOrgIAMPolicyAsyncWithHttpInfo($orgId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminServiceUpdateCustomOrgIAMPolicyAsyncWithHttpInfo
     *
     * Update Custom Org IAM Policy
     *
     * @param  string $orgId (required)
     * @param  \ArthurHlt\Zitadel\Model\AdminServiceUpdateCustomOrgIAMPolicyBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceUpdateCustomOrgIAMPolicyAsyncWithHttpInfo($orgId, $body)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateCustomOrgIAMPolicyResponse';
        $request = $this->adminServiceUpdateCustomOrgIAMPolicyRequest($orgId, $body);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminServiceUpdateCustomOrgIAMPolicy'
     *
     * @param  string $orgId (required)
     * @param  \ArthurHlt\Zitadel\Model\AdminServiceUpdateCustomOrgIAMPolicyBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function adminServiceUpdateCustomOrgIAMPolicyRequest($orgId, $body)
    {
        // verify the required parameter 'orgId' is set
        if ($orgId === null || (is_array($orgId) && count($orgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orgId when calling adminServiceUpdateCustomOrgIAMPolicy'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminServiceUpdateCustomOrgIAMPolicy'
            );
        }

        $resourcePath = '/orgs/{orgId}/policies/orgiam';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($orgId !== null) {
            $resourcePath = str_replace(
                '{' . 'orgId' . '}',
                ObjectSerializer::toPathValue($orgId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * Operation adminServiceUpdateDomainPolicy
     *
     * Update Domain Settings
     *
     * @param  \ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyRequest $body body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function adminServiceUpdateDomainPolicy($body)
    {
        list($response) = $this->adminServiceUpdateDomainPolicyWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation adminServiceUpdateDomainPolicyWithHttpInfo
     *
     * Update Domain Settings
     *
     * @param  \ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyRequest $body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminServiceUpdateDomainPolicyWithHttpInfo($body)
    {
        $request = $this->adminServiceUpdateDomainPolicyRequest($body);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminServiceUpdateDomainPolicyAsync
     *
     * Update Domain Settings
     *
     * @param  \ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceUpdateDomainPolicyAsync($body)
    {
        return $this->adminServiceUpdateDomainPolicyAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminServiceUpdateDomainPolicyAsyncWithHttpInfo
     *
     * Update Domain Settings
     *
     * @param  \ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceUpdateDomainPolicyAsyncWithHttpInfo($body)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyResponse';
        $request = $this->adminServiceUpdateDomainPolicyRequest($body);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminServiceUpdateDomainPolicy'
     *
     * @param  \ArthurHlt\Zitadel\Model\V1UpdateDomainPolicyRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function adminServiceUpdateDomainPolicyRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminServiceUpdateDomainPolicy'
            );
        }

        $resourcePath = '/policies/domain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * Operation adminServiceUpdateOrgIAMPolicy
     *
     * Update Org IAM Policy
     *
     * @param  \ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyRequest $body body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function adminServiceUpdateOrgIAMPolicy($body)
    {
        list($response) = $this->adminServiceUpdateOrgIAMPolicyWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation adminServiceUpdateOrgIAMPolicyWithHttpInfo
     *
     * Update Org IAM Policy
     *
     * @param  \ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyRequest $body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminServiceUpdateOrgIAMPolicyWithHttpInfo($body)
    {
        $request = $this->adminServiceUpdateOrgIAMPolicyRequest($body);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminServiceUpdateOrgIAMPolicyAsync
     *
     * Update Org IAM Policy
     *
     * @param  \ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceUpdateOrgIAMPolicyAsync($body)
    {
        return $this->adminServiceUpdateOrgIAMPolicyAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminServiceUpdateOrgIAMPolicyAsyncWithHttpInfo
     *
     * Update Org IAM Policy
     *
     * @param  \ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function adminServiceUpdateOrgIAMPolicyAsyncWithHttpInfo($body)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyResponse';
        $request = $this->adminServiceUpdateOrgIAMPolicyRequest($body);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminServiceUpdateOrgIAMPolicy'
     *
     * @param  \ArthurHlt\Zitadel\Model\V1UpdateOrgIAMPolicyRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function adminServiceUpdateOrgIAMPolicyRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminServiceUpdateOrgIAMPolicy'
            );
        }

        $resourcePath = '/policies/orgiam';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
