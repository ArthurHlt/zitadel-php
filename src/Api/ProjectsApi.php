<?php
/**
 * ProjectsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ArthurHlt\Zitadel\Api;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use ArthurHlt\Zitadel\ApiException;
use ArthurHlt\Zitadel\Configuration;
use ArthurHlt\Zitadel\DebugPlugin;
use ArthurHlt\Zitadel\HeaderSelector;
use ArthurHlt\Zitadel\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * ProjectsApi Class Doc Comment
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProjectsApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://zitadel.cloud/management/v1');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation managementServiceAddProject
     *
     * Create Project
     *
     * @param  \ArthurHlt\Zitadel\Model\V1AddProjectRequest $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1AddProjectResponse|\ArthurHlt\Zitadel\Model\V1AddProjectResponse|\ArthurHlt\Zitadel\Model\V1AddProjectResponse|\ArthurHlt\Zitadel\Model\V1AddProjectResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceAddProject($body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceAddProjectWithHttpInfo($body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceAddProjectWithHttpInfo
     *
     * Create Project
     *
     * @param  \ArthurHlt\Zitadel\Model\V1AddProjectRequest $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1AddProjectResponse|\ArthurHlt\Zitadel\Model\V1AddProjectResponse|\ArthurHlt\Zitadel\Model\V1AddProjectResponse|\ArthurHlt\Zitadel\Model\V1AddProjectResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceAddProjectWithHttpInfo($body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceAddProjectRequest($body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1AddProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1AddProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1AddProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1AddProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1AddProjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceAddProjectAsync
     *
     * Create Project
     *
     * @param  \ArthurHlt\Zitadel\Model\V1AddProjectRequest $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceAddProjectAsync($body, $xZitadelOrgid = null)
    {
        return $this->managementServiceAddProjectAsyncWithHttpInfo($body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceAddProjectAsyncWithHttpInfo
     *
     * Create Project
     *
     * @param  \ArthurHlt\Zitadel\Model\V1AddProjectRequest $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceAddProjectAsyncWithHttpInfo($body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1AddProjectResponse';
        $request = $this->managementServiceAddProjectRequest($body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceAddProject'
     *
     * @param  \ArthurHlt\Zitadel\Model\V1AddProjectRequest $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceAddProjectRequest($body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceAddProject'
            );
        }

        $resourcePath = '/projects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceAddProjectMember
     *
     * Add Project Member
     *
     * @param  string $projectId projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddProjectMemberBody $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse|\ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse|\ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse|\ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceAddProjectMember($projectId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceAddProjectMemberWithHttpInfo($projectId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceAddProjectMemberWithHttpInfo
     *
     * Add Project Member
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddProjectMemberBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse|\ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse|\ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse|\ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceAddProjectMemberWithHttpInfo($projectId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceAddProjectMemberRequest($projectId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceAddProjectMemberAsync
     *
     * Add Project Member
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddProjectMemberBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceAddProjectMemberAsync($projectId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceAddProjectMemberAsyncWithHttpInfo($projectId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceAddProjectMemberAsyncWithHttpInfo
     *
     * Add Project Member
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddProjectMemberBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceAddProjectMemberAsyncWithHttpInfo($projectId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1AddProjectMemberResponse';
        $request = $this->managementServiceAddProjectMemberRequest($projectId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceAddProjectMember'
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddProjectMemberBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceAddProjectMemberRequest($projectId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceAddProjectMember'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceAddProjectMember'
            );
        }

        $resourcePath = '/projects/{projectId}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceDeactivateProject
     *
     * Deactivate Project
     *
     * @param  string $id id (required)
     * @param  object $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse|\ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse|\ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse|\ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceDeactivateProject($id, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceDeactivateProjectWithHttpInfo($id, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceDeactivateProjectWithHttpInfo
     *
     * Deactivate Project
     *
     * @param  string $id (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse|\ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse|\ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse|\ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceDeactivateProjectWithHttpInfo($id, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceDeactivateProjectRequest($id, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceDeactivateProjectAsync
     *
     * Deactivate Project
     *
     * @param  string $id (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceDeactivateProjectAsync($id, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceDeactivateProjectAsyncWithHttpInfo($id, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceDeactivateProjectAsyncWithHttpInfo
     *
     * Deactivate Project
     *
     * @param  string $id (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceDeactivateProjectAsyncWithHttpInfo($id, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1DeactivateProjectResponse';
        $request = $this->managementServiceDeactivateProjectRequest($id, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceDeactivateProject'
     *
     * @param  string $id (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceDeactivateProjectRequest($id, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling managementServiceDeactivateProject'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceDeactivateProject'
            );
        }

        $resourcePath = '/projects/{id}/_deactivate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceGetGrantedProjectByID
     *
     * Get Granted Project By ID
     *
     * @param  string $projectId projectId (required)
     * @param  string $grantId grantId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1GetGrantedProjectByIDResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceGetGrantedProjectByID($projectId, $grantId, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceGetGrantedProjectByIDWithHttpInfo($projectId, $grantId, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceGetGrantedProjectByIDWithHttpInfo
     *
     * Get Granted Project By ID
     *
     * @param  string $projectId (required)
     * @param  string $grantId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1GetGrantedProjectByIDResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceGetGrantedProjectByIDWithHttpInfo($projectId, $grantId, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceGetGrantedProjectByIDRequest($projectId, $grantId, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1GetGrantedProjectByIDResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1GetGrantedProjectByIDResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1GetGrantedProjectByIDResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1GetGrantedProjectByIDResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceGetGrantedProjectByIDAsync
     *
     * Get Granted Project By ID
     *
     * @param  string $projectId (required)
     * @param  string $grantId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceGetGrantedProjectByIDAsync($projectId, $grantId, $xZitadelOrgid = null)
    {
        return $this->managementServiceGetGrantedProjectByIDAsyncWithHttpInfo($projectId, $grantId, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceGetGrantedProjectByIDAsyncWithHttpInfo
     *
     * Get Granted Project By ID
     *
     * @param  string $projectId (required)
     * @param  string $grantId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceGetGrantedProjectByIDAsyncWithHttpInfo($projectId, $grantId, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1GetGrantedProjectByIDResponse';
        $request = $this->managementServiceGetGrantedProjectByIDRequest($projectId, $grantId, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceGetGrantedProjectByID'
     *
     * @param  string $projectId (required)
     * @param  string $grantId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceGetGrantedProjectByIDRequest($projectId, $grantId, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceGetGrantedProjectByID'
            );
        }
        // verify the required parameter 'grantId' is set
        if ($grantId === null || (is_array($grantId) && count($grantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grantId when calling managementServiceGetGrantedProjectByID'
            );
        }

        $resourcePath = '/granted_projects/{projectId}/grants/{grantId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($grantId !== null) {
            $resourcePath = str_replace(
                '{' . 'grantId' . '}',
                ObjectSerializer::toPathValue($grantId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceGetProjectByID
     *
     * Get Project By ID
     *
     * @param  string $id id (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1GetProjectByIDResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceGetProjectByID($id, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceGetProjectByIDWithHttpInfo($id, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceGetProjectByIDWithHttpInfo
     *
     * Get Project By ID
     *
     * @param  string $id (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1GetProjectByIDResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceGetProjectByIDWithHttpInfo($id, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceGetProjectByIDRequest($id, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1GetProjectByIDResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1GetProjectByIDResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1GetProjectByIDResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1GetProjectByIDResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceGetProjectByIDAsync
     *
     * Get Project By ID
     *
     * @param  string $id (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceGetProjectByIDAsync($id, $xZitadelOrgid = null)
    {
        return $this->managementServiceGetProjectByIDAsyncWithHttpInfo($id, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceGetProjectByIDAsyncWithHttpInfo
     *
     * Get Project By ID
     *
     * @param  string $id (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceGetProjectByIDAsyncWithHttpInfo($id, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1GetProjectByIDResponse';
        $request = $this->managementServiceGetProjectByIDRequest($id, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceGetProjectByID'
     *
     * @param  string $id (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceGetProjectByIDRequest($id, $xZitadelOrgid = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling managementServiceGetProjectByID'
            );
        }

        $resourcePath = '/projects/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceGetProjectGrantByID
     *
     * Project Grant By ID
     *
     * @param  string $projectId projectId (required)
     * @param  string $grantId grantId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1GetProjectGrantByIDResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceGetProjectGrantByID($projectId, $grantId, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceGetProjectGrantByIDWithHttpInfo($projectId, $grantId, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceGetProjectGrantByIDWithHttpInfo
     *
     * Project Grant By ID
     *
     * @param  string $projectId (required)
     * @param  string $grantId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1GetProjectGrantByIDResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceGetProjectGrantByIDWithHttpInfo($projectId, $grantId, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceGetProjectGrantByIDRequest($projectId, $grantId, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1GetProjectGrantByIDResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1GetProjectGrantByIDResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1GetProjectGrantByIDResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1GetProjectGrantByIDResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceGetProjectGrantByIDAsync
     *
     * Project Grant By ID
     *
     * @param  string $projectId (required)
     * @param  string $grantId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceGetProjectGrantByIDAsync($projectId, $grantId, $xZitadelOrgid = null)
    {
        return $this->managementServiceGetProjectGrantByIDAsyncWithHttpInfo($projectId, $grantId, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceGetProjectGrantByIDAsyncWithHttpInfo
     *
     * Project Grant By ID
     *
     * @param  string $projectId (required)
     * @param  string $grantId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceGetProjectGrantByIDAsyncWithHttpInfo($projectId, $grantId, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1GetProjectGrantByIDResponse';
        $request = $this->managementServiceGetProjectGrantByIDRequest($projectId, $grantId, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceGetProjectGrantByID'
     *
     * @param  string $projectId (required)
     * @param  string $grantId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceGetProjectGrantByIDRequest($projectId, $grantId, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceGetProjectGrantByID'
            );
        }
        // verify the required parameter 'grantId' is set
        if ($grantId === null || (is_array($grantId) && count($grantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grantId when calling managementServiceGetProjectGrantByID'
            );
        }

        $resourcePath = '/projects/{projectId}/grants/{grantId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($grantId !== null) {
            $resourcePath = str_replace(
                '{' . 'grantId' . '}',
                ObjectSerializer::toPathValue($grantId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceListGrantedProjectRoles
     *
     * Search Granted Project Roles
     *
     * @param  string $projectId projectId (required)
     * @param  string $grantId grantId (required)
     * @param  string $queryOffset queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool $queryAsc default is descending (optional)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1ListGrantedProjectRolesResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceListGrantedProjectRoles($projectId, $grantId, $queryOffset = null, $queryLimit = null, $queryAsc = null, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceListGrantedProjectRolesWithHttpInfo($projectId, $grantId, $queryOffset, $queryLimit, $queryAsc, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceListGrantedProjectRolesWithHttpInfo
     *
     * Search Granted Project Roles
     *
     * @param  string $projectId (required)
     * @param  string $grantId (required)
     * @param  string $queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool $queryAsc default is descending (optional)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1ListGrantedProjectRolesResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceListGrantedProjectRolesWithHttpInfo($projectId, $grantId, $queryOffset = null, $queryLimit = null, $queryAsc = null, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceListGrantedProjectRolesRequest($projectId, $grantId, $queryOffset, $queryLimit, $queryAsc, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1ListGrantedProjectRolesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListGrantedProjectRolesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1ListGrantedProjectRolesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListGrantedProjectRolesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceListGrantedProjectRolesAsync
     *
     * Search Granted Project Roles
     *
     * @param  string $projectId (required)
     * @param  string $grantId (required)
     * @param  string $queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool $queryAsc default is descending (optional)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListGrantedProjectRolesAsync($projectId, $grantId, $queryOffset = null, $queryLimit = null, $queryAsc = null, $xZitadelOrgid = null)
    {
        return $this->managementServiceListGrantedProjectRolesAsyncWithHttpInfo($projectId, $grantId, $queryOffset, $queryLimit, $queryAsc, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceListGrantedProjectRolesAsyncWithHttpInfo
     *
     * Search Granted Project Roles
     *
     * @param  string $projectId (required)
     * @param  string $grantId (required)
     * @param  string $queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool $queryAsc default is descending (optional)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListGrantedProjectRolesAsyncWithHttpInfo($projectId, $grantId, $queryOffset = null, $queryLimit = null, $queryAsc = null, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1ListGrantedProjectRolesResponse';
        $request = $this->managementServiceListGrantedProjectRolesRequest($projectId, $grantId, $queryOffset, $queryLimit, $queryAsc, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceListGrantedProjectRoles'
     *
     * @param  string $projectId (required)
     * @param  string $grantId (required)
     * @param  string $queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool $queryAsc default is descending (optional)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceListGrantedProjectRolesRequest($projectId, $grantId, $queryOffset = null, $queryLimit = null, $queryAsc = null, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceListGrantedProjectRoles'
            );
        }
        // verify the required parameter 'grantId' is set
        if ($grantId === null || (is_array($grantId) && count($grantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grantId when calling managementServiceListGrantedProjectRoles'
            );
        }

        $resourcePath = '/granted_projects/{projectId}/grants/{grantId}/roles/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($queryOffset)) {
            $queryOffset = ObjectSerializer::serializeCollection($queryOffset, '', true);
        }
        if ($queryOffset !== null) {
            $queryParams['query.offset'] = $queryOffset;
        }
        // query params
        if (is_array($queryLimit)) {
            $queryLimit = ObjectSerializer::serializeCollection($queryLimit, '', true);
        }
        if ($queryLimit !== null) {
            $queryParams['query.limit'] = $queryLimit;
        }
        // query params
        if (is_array($queryAsc)) {
            $queryAsc = ObjectSerializer::serializeCollection($queryAsc, '', true);
        }
        if ($queryAsc !== null) {
            $queryParams['query.asc'] = $queryAsc;
        }

        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($grantId !== null) {
            $resourcePath = str_replace(
                '{' . 'grantId' . '}',
                ObjectSerializer::toPathValue($grantId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceListGrantedProjects
     *
     * Search Granted Project
     *
     * @param  \ArthurHlt\Zitadel\Model\V1ListGrantedProjectsRequest $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse|\ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse|\ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse|\ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceListGrantedProjects($body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceListGrantedProjectsWithHttpInfo($body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceListGrantedProjectsWithHttpInfo
     *
     * Search Granted Project
     *
     * @param  \ArthurHlt\Zitadel\Model\V1ListGrantedProjectsRequest $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse|\ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse|\ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse|\ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceListGrantedProjectsWithHttpInfo($body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceListGrantedProjectsRequest($body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceListGrantedProjectsAsync
     *
     * Search Granted Project
     *
     * @param  \ArthurHlt\Zitadel\Model\V1ListGrantedProjectsRequest $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListGrantedProjectsAsync($body, $xZitadelOrgid = null)
    {
        return $this->managementServiceListGrantedProjectsAsyncWithHttpInfo($body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceListGrantedProjectsAsyncWithHttpInfo
     *
     * Search Granted Project
     *
     * @param  \ArthurHlt\Zitadel\Model\V1ListGrantedProjectsRequest $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListGrantedProjectsAsyncWithHttpInfo($body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1ListGrantedProjectsResponse';
        $request = $this->managementServiceListGrantedProjectsRequest($body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceListGrantedProjects'
     *
     * @param  \ArthurHlt\Zitadel\Model\V1ListGrantedProjectsRequest $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceListGrantedProjectsRequest($body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceListGrantedProjects'
            );
        }

        $resourcePath = '/granted_projects/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceListProjectChanges
     *
     * Project History
     *
     * @param  string $projectId projectId (required)
     * @param  string $querySequence sequence represents the order of events. It&#39;s always counting (optional)
     * @param  int $queryLimit Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If no limit is set or the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool $queryAsc default is descending (optional)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse|\ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse|\ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse|\ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceListProjectChanges($projectId, $querySequence = null, $queryLimit = null, $queryAsc = null, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceListProjectChangesWithHttpInfo($projectId, $querySequence, $queryLimit, $queryAsc, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceListProjectChangesWithHttpInfo
     *
     * Project History
     *
     * @param  string $projectId (required)
     * @param  string $querySequence sequence represents the order of events. It&#39;s always counting (optional)
     * @param  int $queryLimit Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If no limit is set or the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool $queryAsc default is descending (optional)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse|\ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse|\ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse|\ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceListProjectChangesWithHttpInfo($projectId, $querySequence = null, $queryLimit = null, $queryAsc = null, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceListProjectChangesRequest($projectId, $querySequence, $queryLimit, $queryAsc, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceListProjectChangesAsync
     *
     * Project History
     *
     * @param  string $projectId (required)
     * @param  string $querySequence sequence represents the order of events. It&#39;s always counting (optional)
     * @param  int $queryLimit Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If no limit is set or the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool $queryAsc default is descending (optional)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListProjectChangesAsync($projectId, $querySequence = null, $queryLimit = null, $queryAsc = null, $xZitadelOrgid = null)
    {
        return $this->managementServiceListProjectChangesAsyncWithHttpInfo($projectId, $querySequence, $queryLimit, $queryAsc, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceListProjectChangesAsyncWithHttpInfo
     *
     * Project History
     *
     * @param  string $projectId (required)
     * @param  string $querySequence sequence represents the order of events. It&#39;s always counting (optional)
     * @param  int $queryLimit Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If no limit is set or the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool $queryAsc default is descending (optional)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListProjectChangesAsyncWithHttpInfo($projectId, $querySequence = null, $queryLimit = null, $queryAsc = null, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1ListProjectChangesResponse';
        $request = $this->managementServiceListProjectChangesRequest($projectId, $querySequence, $queryLimit, $queryAsc, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceListProjectChanges'
     *
     * @param  string $projectId (required)
     * @param  string $querySequence sequence represents the order of events. It&#39;s always counting (optional)
     * @param  int $queryLimit Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If no limit is set or the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool $queryAsc default is descending (optional)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceListProjectChangesRequest($projectId, $querySequence = null, $queryLimit = null, $queryAsc = null, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceListProjectChanges'
            );
        }

        $resourcePath = '/projects/{projectId}/changes/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($querySequence)) {
            $querySequence = ObjectSerializer::serializeCollection($querySequence, '', true);
        }
        if ($querySequence !== null) {
            $queryParams['query.sequence'] = $querySequence;
        }
        // query params
        if (is_array($queryLimit)) {
            $queryLimit = ObjectSerializer::serializeCollection($queryLimit, '', true);
        }
        if ($queryLimit !== null) {
            $queryParams['query.limit'] = $queryLimit;
        }
        // query params
        if (is_array($queryAsc)) {
            $queryAsc = ObjectSerializer::serializeCollection($queryAsc, '', true);
        }
        if ($queryAsc !== null) {
            $queryParams['query.asc'] = $queryAsc;
        }

        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceListProjectGrantChanges
     *
     * Project Grant History
     *
     * @param  string $projectId projectId (required)
     * @param  string $grantId grantId (required)
     * @param  string $querySequence sequence represents the order of events. It&#39;s always counting (optional)
     * @param  int $queryLimit Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If no limit is set or the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool $queryAsc default is descending (optional)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse|\ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse|\ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse|\ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceListProjectGrantChanges($projectId, $grantId, $querySequence = null, $queryLimit = null, $queryAsc = null, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceListProjectGrantChangesWithHttpInfo($projectId, $grantId, $querySequence, $queryLimit, $queryAsc, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceListProjectGrantChangesWithHttpInfo
     *
     * Project Grant History
     *
     * @param  string $projectId (required)
     * @param  string $grantId (required)
     * @param  string $querySequence sequence represents the order of events. It&#39;s always counting (optional)
     * @param  int $queryLimit Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If no limit is set or the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool $queryAsc default is descending (optional)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse|\ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse|\ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse|\ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceListProjectGrantChangesWithHttpInfo($projectId, $grantId, $querySequence = null, $queryLimit = null, $queryAsc = null, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceListProjectGrantChangesRequest($projectId, $grantId, $querySequence, $queryLimit, $queryAsc, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceListProjectGrantChangesAsync
     *
     * Project Grant History
     *
     * @param  string $projectId (required)
     * @param  string $grantId (required)
     * @param  string $querySequence sequence represents the order of events. It&#39;s always counting (optional)
     * @param  int $queryLimit Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If no limit is set or the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool $queryAsc default is descending (optional)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListProjectGrantChangesAsync($projectId, $grantId, $querySequence = null, $queryLimit = null, $queryAsc = null, $xZitadelOrgid = null)
    {
        return $this->managementServiceListProjectGrantChangesAsyncWithHttpInfo($projectId, $grantId, $querySequence, $queryLimit, $queryAsc, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceListProjectGrantChangesAsyncWithHttpInfo
     *
     * Project Grant History
     *
     * @param  string $projectId (required)
     * @param  string $grantId (required)
     * @param  string $querySequence sequence represents the order of events. It&#39;s always counting (optional)
     * @param  int $queryLimit Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If no limit is set or the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool $queryAsc default is descending (optional)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListProjectGrantChangesAsyncWithHttpInfo($projectId, $grantId, $querySequence = null, $queryLimit = null, $queryAsc = null, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1ListProjectGrantChangesResponse';
        $request = $this->managementServiceListProjectGrantChangesRequest($projectId, $grantId, $querySequence, $queryLimit, $queryAsc, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceListProjectGrantChanges'
     *
     * @param  string $projectId (required)
     * @param  string $grantId (required)
     * @param  string $querySequence sequence represents the order of events. It&#39;s always counting (optional)
     * @param  int $queryLimit Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If no limit is set or the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool $queryAsc default is descending (optional)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceListProjectGrantChangesRequest($projectId, $grantId, $querySequence = null, $queryLimit = null, $queryAsc = null, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceListProjectGrantChanges'
            );
        }
        // verify the required parameter 'grantId' is set
        if ($grantId === null || (is_array($grantId) && count($grantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grantId when calling managementServiceListProjectGrantChanges'
            );
        }

        $resourcePath = '/projects/{projectId}/grants/{grantId}/changes/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($querySequence)) {
            $querySequence = ObjectSerializer::serializeCollection($querySequence, '', true);
        }
        if ($querySequence !== null) {
            $queryParams['query.sequence'] = $querySequence;
        }
        // query params
        if (is_array($queryLimit)) {
            $queryLimit = ObjectSerializer::serializeCollection($queryLimit, '', true);
        }
        if ($queryLimit !== null) {
            $queryParams['query.limit'] = $queryLimit;
        }
        // query params
        if (is_array($queryAsc)) {
            $queryAsc = ObjectSerializer::serializeCollection($queryAsc, '', true);
        }
        if ($queryAsc !== null) {
            $queryParams['query.asc'] = $queryAsc;
        }

        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($grantId !== null) {
            $resourcePath = str_replace(
                '{' . 'grantId' . '}',
                ObjectSerializer::toPathValue($grantId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceListProjectMemberRoles
     *
     * List Project Member Roles
     *
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse|\ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse|\ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse|\ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceListProjectMemberRoles($xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceListProjectMemberRolesWithHttpInfo($xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceListProjectMemberRolesWithHttpInfo
     *
     * List Project Member Roles
     *
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse|\ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse|\ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse|\ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceListProjectMemberRolesWithHttpInfo($xZitadelOrgid = null)
    {
        $request = $this->managementServiceListProjectMemberRolesRequest($xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceListProjectMemberRolesAsync
     *
     * List Project Member Roles
     *
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListProjectMemberRolesAsync($xZitadelOrgid = null)
    {
        return $this->managementServiceListProjectMemberRolesAsyncWithHttpInfo($xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceListProjectMemberRolesAsyncWithHttpInfo
     *
     * List Project Member Roles
     *
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListProjectMemberRolesAsyncWithHttpInfo($xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1ListProjectMemberRolesResponse';
        $request = $this->managementServiceListProjectMemberRolesRequest($xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceListProjectMemberRoles'
     *
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceListProjectMemberRolesRequest($xZitadelOrgid = null)
    {

        $resourcePath = '/projects/members/roles/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceListProjectMembers
     *
     * List Project Members
     *
     * @param  string $projectId projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListProjectMembersBody $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse|\ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse|\ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse|\ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceListProjectMembers($projectId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceListProjectMembersWithHttpInfo($projectId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceListProjectMembersWithHttpInfo
     *
     * List Project Members
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListProjectMembersBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse|\ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse|\ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse|\ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceListProjectMembersWithHttpInfo($projectId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceListProjectMembersRequest($projectId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceListProjectMembersAsync
     *
     * List Project Members
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListProjectMembersBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListProjectMembersAsync($projectId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceListProjectMembersAsyncWithHttpInfo($projectId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceListProjectMembersAsyncWithHttpInfo
     *
     * List Project Members
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListProjectMembersBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListProjectMembersAsyncWithHttpInfo($projectId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1ListProjectMembersResponse';
        $request = $this->managementServiceListProjectMembersRequest($projectId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceListProjectMembers'
     *
     * @param  string $projectId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListProjectMembersBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceListProjectMembersRequest($projectId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceListProjectMembers'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceListProjectMembers'
            );
        }

        $resourcePath = '/projects/{projectId}/members/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceListProjects
     *
     * Search Project
     *
     * @param  \ArthurHlt\Zitadel\Model\V1ListProjectsRequest $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1ListProjectsResponse|\ArthurHlt\Zitadel\Model\V1ListProjectsResponse|\ArthurHlt\Zitadel\Model\V1ListProjectsResponse|\ArthurHlt\Zitadel\Model\V1ListProjectsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceListProjects($body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceListProjectsWithHttpInfo($body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceListProjectsWithHttpInfo
     *
     * Search Project
     *
     * @param  \ArthurHlt\Zitadel\Model\V1ListProjectsRequest $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1ListProjectsResponse|\ArthurHlt\Zitadel\Model\V1ListProjectsResponse|\ArthurHlt\Zitadel\Model\V1ListProjectsResponse|\ArthurHlt\Zitadel\Model\V1ListProjectsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceListProjectsWithHttpInfo($body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceListProjectsRequest($body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1ListProjectsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListProjectsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1ListProjectsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListProjectsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1ListProjectsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListProjectsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1ListProjectsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListProjectsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1ListProjectsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListProjectsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListProjectsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListProjectsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListProjectsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceListProjectsAsync
     *
     * Search Project
     *
     * @param  \ArthurHlt\Zitadel\Model\V1ListProjectsRequest $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListProjectsAsync($body, $xZitadelOrgid = null)
    {
        return $this->managementServiceListProjectsAsyncWithHttpInfo($body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceListProjectsAsyncWithHttpInfo
     *
     * Search Project
     *
     * @param  \ArthurHlt\Zitadel\Model\V1ListProjectsRequest $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListProjectsAsyncWithHttpInfo($body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1ListProjectsResponse';
        $request = $this->managementServiceListProjectsRequest($body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceListProjects'
     *
     * @param  \ArthurHlt\Zitadel\Model\V1ListProjectsRequest $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceListProjectsRequest($body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceListProjects'
            );
        }

        $resourcePath = '/projects/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceReactivateProject
     *
     * Reactivate Project
     *
     * @param  string $id id (required)
     * @param  object $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse|\ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse|\ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse|\ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceReactivateProject($id, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceReactivateProjectWithHttpInfo($id, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceReactivateProjectWithHttpInfo
     *
     * Reactivate Project
     *
     * @param  string $id (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse|\ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse|\ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse|\ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceReactivateProjectWithHttpInfo($id, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceReactivateProjectRequest($id, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceReactivateProjectAsync
     *
     * Reactivate Project
     *
     * @param  string $id (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceReactivateProjectAsync($id, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceReactivateProjectAsyncWithHttpInfo($id, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceReactivateProjectAsyncWithHttpInfo
     *
     * Reactivate Project
     *
     * @param  string $id (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceReactivateProjectAsyncWithHttpInfo($id, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1ReactivateProjectResponse';
        $request = $this->managementServiceReactivateProjectRequest($id, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceReactivateProject'
     *
     * @param  string $id (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceReactivateProjectRequest($id, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling managementServiceReactivateProject'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceReactivateProject'
            );
        }

        $resourcePath = '/projects/{id}/_reactivate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceRemoveProject
     *
     * Remove Project
     *
     * @param  string $id id (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1RemoveProjectResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceRemoveProject($id, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceRemoveProjectWithHttpInfo($id, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceRemoveProjectWithHttpInfo
     *
     * Remove Project
     *
     * @param  string $id (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1RemoveProjectResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceRemoveProjectWithHttpInfo($id, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceRemoveProjectRequest($id, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1RemoveProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1RemoveProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1RemoveProjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1RemoveProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceRemoveProjectAsync
     *
     * Remove Project
     *
     * @param  string $id (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceRemoveProjectAsync($id, $xZitadelOrgid = null)
    {
        return $this->managementServiceRemoveProjectAsyncWithHttpInfo($id, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceRemoveProjectAsyncWithHttpInfo
     *
     * Remove Project
     *
     * @param  string $id (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceRemoveProjectAsyncWithHttpInfo($id, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1RemoveProjectResponse';
        $request = $this->managementServiceRemoveProjectRequest($id, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceRemoveProject'
     *
     * @param  string $id (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceRemoveProjectRequest($id, $xZitadelOrgid = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling managementServiceRemoveProject'
            );
        }

        $resourcePath = '/projects/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceRemoveProjectMember
     *
     * Remove Project Member
     *
     * @param  string $projectId projectId (required)
     * @param  string $userId userId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1RemoveProjectMemberResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceRemoveProjectMember($projectId, $userId, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceRemoveProjectMemberWithHttpInfo($projectId, $userId, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceRemoveProjectMemberWithHttpInfo
     *
     * Remove Project Member
     *
     * @param  string $projectId (required)
     * @param  string $userId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1RemoveProjectMemberResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceRemoveProjectMemberWithHttpInfo($projectId, $userId, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceRemoveProjectMemberRequest($projectId, $userId, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1RemoveProjectMemberResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1RemoveProjectMemberResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1RemoveProjectMemberResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1RemoveProjectMemberResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceRemoveProjectMemberAsync
     *
     * Remove Project Member
     *
     * @param  string $projectId (required)
     * @param  string $userId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceRemoveProjectMemberAsync($projectId, $userId, $xZitadelOrgid = null)
    {
        return $this->managementServiceRemoveProjectMemberAsyncWithHttpInfo($projectId, $userId, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceRemoveProjectMemberAsyncWithHttpInfo
     *
     * Remove Project Member
     *
     * @param  string $projectId (required)
     * @param  string $userId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceRemoveProjectMemberAsyncWithHttpInfo($projectId, $userId, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1RemoveProjectMemberResponse';
        $request = $this->managementServiceRemoveProjectMemberRequest($projectId, $userId, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceRemoveProjectMember'
     *
     * @param  string $projectId (required)
     * @param  string $userId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceRemoveProjectMemberRequest($projectId, $userId, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceRemoveProjectMember'
            );
        }
        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling managementServiceRemoveProjectMember'
            );
        }

        $resourcePath = '/projects/{projectId}/members/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceUpdateProject
     *
     * Update Project
     *
     * @param  string $id id (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateProjectBody $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1UpdateProjectResponse|\ArthurHlt\Zitadel\Model\V1UpdateProjectResponse|\ArthurHlt\Zitadel\Model\V1UpdateProjectResponse|\ArthurHlt\Zitadel\Model\V1UpdateProjectResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceUpdateProject($id, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceUpdateProjectWithHttpInfo($id, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceUpdateProjectWithHttpInfo
     *
     * Update Project
     *
     * @param  string $id (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateProjectBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1UpdateProjectResponse|\ArthurHlt\Zitadel\Model\V1UpdateProjectResponse|\ArthurHlt\Zitadel\Model\V1UpdateProjectResponse|\ArthurHlt\Zitadel\Model\V1UpdateProjectResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceUpdateProjectWithHttpInfo($id, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceUpdateProjectRequest($id, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateProjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceUpdateProjectAsync
     *
     * Update Project
     *
     * @param  string $id (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateProjectBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceUpdateProjectAsync($id, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceUpdateProjectAsyncWithHttpInfo($id, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceUpdateProjectAsyncWithHttpInfo
     *
     * Update Project
     *
     * @param  string $id (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateProjectBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceUpdateProjectAsyncWithHttpInfo($id, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateProjectResponse';
        $request = $this->managementServiceUpdateProjectRequest($id, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceUpdateProject'
     *
     * @param  string $id (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateProjectBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to change/get objects of another organization include the header. Make sure the requesting user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceUpdateProjectRequest($id, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling managementServiceUpdateProject'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceUpdateProject'
            );
        }

        $resourcePath = '/projects/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceUpdateProjectMember
     *
     * Update Project Member
     *
     * @param  string $projectId projectId (required)
     * @param  string $userId userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateProjectMemberBody $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse|\ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse|\ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse|\ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceUpdateProjectMember($projectId, $userId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceUpdateProjectMemberWithHttpInfo($projectId, $userId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceUpdateProjectMemberWithHttpInfo
     *
     * Update Project Member
     *
     * @param  string $projectId (required)
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateProjectMemberBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse|\ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse|\ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse|\ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceUpdateProjectMemberWithHttpInfo($projectId, $userId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceUpdateProjectMemberRequest($projectId, $userId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 203:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 203:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceUpdateProjectMemberAsync
     *
     * Update Project Member
     *
     * @param  string $projectId (required)
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateProjectMemberBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceUpdateProjectMemberAsync($projectId, $userId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceUpdateProjectMemberAsyncWithHttpInfo($projectId, $userId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceUpdateProjectMemberAsyncWithHttpInfo
     *
     * Update Project Member
     *
     * @param  string $projectId (required)
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateProjectMemberBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceUpdateProjectMemberAsyncWithHttpInfo($projectId, $userId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateProjectMemberResponse';
        $request = $this->managementServiceUpdateProjectMemberRequest($projectId, $userId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceUpdateProjectMember'
     *
     * @param  string $projectId (required)
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateProjectMemberBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get/set a result of another organization include the header. Make sure the user has permission to access the requested data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceUpdateProjectMemberRequest($projectId, $userId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling managementServiceUpdateProjectMember'
            );
        }
        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling managementServiceUpdateProjectMember'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceUpdateProjectMember'
            );
        }

        $resourcePath = '/projects/{projectId}/members/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
