<?php
/**
 * ZITADELActionsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ArthurHlt\Zitadel\Api;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use ArthurHlt\Zitadel\ApiException;
use ArthurHlt\Zitadel\Configuration;
use ArthurHlt\Zitadel\DebugPlugin;
use ArthurHlt\Zitadel\HeaderSelector;
use ArthurHlt\Zitadel\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * ZITADELActionsApi Class Doc Comment
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ZITADELActionsApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://zitadel.cloud/management/v1');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation zITADELActionsCreateTarget
     *
     * Create a target
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaTarget $target target (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaCreateTargetResponse|\ArthurHlt\Zitadel\Model\V3alphaCreateTargetResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELActionsCreateTarget($target, $instanceId = null, $instanceDomain = null)
    {
        list($response) = $this->zITADELActionsCreateTargetWithHttpInfo($target, $instanceId, $instanceDomain);
        return $response;
    }

    /**
     * Operation zITADELActionsCreateTargetWithHttpInfo
     *
     * Create a target
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaTarget $target (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaCreateTargetResponse|\ArthurHlt\Zitadel\Model\V3alphaCreateTargetResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELActionsCreateTargetWithHttpInfo($target, $instanceId = null, $instanceDomain = null)
    {
        $request = $this->zITADELActionsCreateTargetRequest($target, $instanceId, $instanceDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaCreateTargetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaCreateTargetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaCreateTargetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaCreateTargetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaCreateTargetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaCreateTargetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaCreateTargetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELActionsCreateTargetAsync
     *
     * Create a target
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaTarget $target (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELActionsCreateTargetAsync($target, $instanceId = null, $instanceDomain = null)
    {
        return $this->zITADELActionsCreateTargetAsyncWithHttpInfo($target, $instanceId, $instanceDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELActionsCreateTargetAsyncWithHttpInfo
     *
     * Create a target
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaTarget $target (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELActionsCreateTargetAsyncWithHttpInfo($target, $instanceId = null, $instanceDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaCreateTargetResponse';
        $request = $this->zITADELActionsCreateTargetRequest($target, $instanceId, $instanceDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELActionsCreateTarget'
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaTarget $target (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELActionsCreateTargetRequest($target, $instanceId = null, $instanceDomain = null)
    {
        // verify the required parameter 'target' is set
        if ($target === null || (is_array($target) && count($target) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target when calling zITADELActionsCreateTarget'
            );
        }

        $resourcePath = '/resources/v3alpha/actions/targets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($target)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($target));
            } else {
                $httpBody = $target;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELActionsDeleteTarget
     *
     * Delete a target
     *
     * @param  string $id id (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaDeleteTargetResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELActionsDeleteTarget($id, $instanceId = null, $instanceDomain = null)
    {
        list($response) = $this->zITADELActionsDeleteTargetWithHttpInfo($id, $instanceId, $instanceDomain);
        return $response;
    }

    /**
     * Operation zITADELActionsDeleteTargetWithHttpInfo
     *
     * Delete a target
     *
     * @param  string $id (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaDeleteTargetResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELActionsDeleteTargetWithHttpInfo($id, $instanceId = null, $instanceDomain = null)
    {
        $request = $this->zITADELActionsDeleteTargetRequest($id, $instanceId, $instanceDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaDeleteTargetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaDeleteTargetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaDeleteTargetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaDeleteTargetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELActionsDeleteTargetAsync
     *
     * Delete a target
     *
     * @param  string $id (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELActionsDeleteTargetAsync($id, $instanceId = null, $instanceDomain = null)
    {
        return $this->zITADELActionsDeleteTargetAsyncWithHttpInfo($id, $instanceId, $instanceDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELActionsDeleteTargetAsyncWithHttpInfo
     *
     * Delete a target
     *
     * @param  string $id (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELActionsDeleteTargetAsyncWithHttpInfo($id, $instanceId = null, $instanceDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaDeleteTargetResponse';
        $request = $this->zITADELActionsDeleteTargetRequest($id, $instanceId, $instanceDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELActionsDeleteTarget'
     *
     * @param  string $id (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELActionsDeleteTargetRequest($id, $instanceId = null, $instanceDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELActionsDeleteTarget'
            );
        }

        $resourcePath = '/resources/v3alpha/actions/targets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELActionsGetTarget
     *
     * Target by ID
     *
     * @param  string $id id (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaGetTargetResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELActionsGetTarget($id, $instanceId = null, $instanceDomain = null)
    {
        list($response) = $this->zITADELActionsGetTargetWithHttpInfo($id, $instanceId, $instanceDomain);
        return $response;
    }

    /**
     * Operation zITADELActionsGetTargetWithHttpInfo
     *
     * Target by ID
     *
     * @param  string $id (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaGetTargetResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELActionsGetTargetWithHttpInfo($id, $instanceId = null, $instanceDomain = null)
    {
        $request = $this->zITADELActionsGetTargetRequest($id, $instanceId, $instanceDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaGetTargetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaGetTargetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaGetTargetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaGetTargetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELActionsGetTargetAsync
     *
     * Target by ID
     *
     * @param  string $id (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELActionsGetTargetAsync($id, $instanceId = null, $instanceDomain = null)
    {
        return $this->zITADELActionsGetTargetAsyncWithHttpInfo($id, $instanceId, $instanceDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELActionsGetTargetAsyncWithHttpInfo
     *
     * Target by ID
     *
     * @param  string $id (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELActionsGetTargetAsyncWithHttpInfo($id, $instanceId = null, $instanceDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaGetTargetResponse';
        $request = $this->zITADELActionsGetTargetRequest($id, $instanceId, $instanceDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELActionsGetTarget'
     *
     * @param  string $id (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELActionsGetTargetRequest($id, $instanceId = null, $instanceDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELActionsGetTarget'
            );
        }

        $resourcePath = '/resources/v3alpha/actions/targets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELActionsListExecutionFunctions
     *
     * List all available functions
     *
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaListExecutionFunctionsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELActionsListExecutionFunctions()
    {
        list($response) = $this->zITADELActionsListExecutionFunctionsWithHttpInfo();
        return $response;
    }

    /**
     * Operation zITADELActionsListExecutionFunctionsWithHttpInfo
     *
     * List all available functions
     *
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaListExecutionFunctionsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELActionsListExecutionFunctionsWithHttpInfo()
    {
        $request = $this->zITADELActionsListExecutionFunctionsRequest();

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaListExecutionFunctionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaListExecutionFunctionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaListExecutionFunctionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaListExecutionFunctionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELActionsListExecutionFunctionsAsync
     *
     * List all available functions
     *
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELActionsListExecutionFunctionsAsync()
    {
        return $this->zITADELActionsListExecutionFunctionsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELActionsListExecutionFunctionsAsyncWithHttpInfo
     *
     * List all available functions
     *
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELActionsListExecutionFunctionsAsyncWithHttpInfo()
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaListExecutionFunctionsResponse';
        $request = $this->zITADELActionsListExecutionFunctionsRequest();

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELActionsListExecutionFunctions'
     *
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELActionsListExecutionFunctionsRequest()
    {

        $resourcePath = '/resources/v3alpha/actions/executions/functions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELActionsListExecutionMethods
     *
     * List all available methods
     *
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaListExecutionMethodsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELActionsListExecutionMethods()
    {
        list($response) = $this->zITADELActionsListExecutionMethodsWithHttpInfo();
        return $response;
    }

    /**
     * Operation zITADELActionsListExecutionMethodsWithHttpInfo
     *
     * List all available methods
     *
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaListExecutionMethodsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELActionsListExecutionMethodsWithHttpInfo()
    {
        $request = $this->zITADELActionsListExecutionMethodsRequest();

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaListExecutionMethodsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaListExecutionMethodsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaListExecutionMethodsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaListExecutionMethodsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELActionsListExecutionMethodsAsync
     *
     * List all available methods
     *
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELActionsListExecutionMethodsAsync()
    {
        return $this->zITADELActionsListExecutionMethodsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELActionsListExecutionMethodsAsyncWithHttpInfo
     *
     * List all available methods
     *
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELActionsListExecutionMethodsAsyncWithHttpInfo()
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaListExecutionMethodsResponse';
        $request = $this->zITADELActionsListExecutionMethodsRequest();

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELActionsListExecutionMethods'
     *
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELActionsListExecutionMethodsRequest()
    {

        $resourcePath = '/resources/v3alpha/actions/executions/methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELActionsListExecutionServices
     *
     * List all available service
     *
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaListExecutionServicesResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELActionsListExecutionServices()
    {
        list($response) = $this->zITADELActionsListExecutionServicesWithHttpInfo();
        return $response;
    }

    /**
     * Operation zITADELActionsListExecutionServicesWithHttpInfo
     *
     * List all available service
     *
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaListExecutionServicesResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELActionsListExecutionServicesWithHttpInfo()
    {
        $request = $this->zITADELActionsListExecutionServicesRequest();

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaListExecutionServicesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaListExecutionServicesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaListExecutionServicesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaListExecutionServicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELActionsListExecutionServicesAsync
     *
     * List all available service
     *
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELActionsListExecutionServicesAsync()
    {
        return $this->zITADELActionsListExecutionServicesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELActionsListExecutionServicesAsyncWithHttpInfo
     *
     * List all available service
     *
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELActionsListExecutionServicesAsyncWithHttpInfo()
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaListExecutionServicesResponse';
        $request = $this->zITADELActionsListExecutionServicesRequest();

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELActionsListExecutionServices'
     *
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELActionsListExecutionServicesRequest()
    {

        $resourcePath = '/resources/v3alpha/actions/executions/services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELActionsPatchTarget
     *
     * Patch a target
     *
     * @param  string $id id (required)
     * @param  \ArthurHlt\Zitadel\Model\Actionv3alphaPatchTarget $target target (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaPatchTargetResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELActionsPatchTarget($id, $target, $instanceId = null, $instanceDomain = null)
    {
        list($response) = $this->zITADELActionsPatchTargetWithHttpInfo($id, $target, $instanceId, $instanceDomain);
        return $response;
    }

    /**
     * Operation zITADELActionsPatchTargetWithHttpInfo
     *
     * Patch a target
     *
     * @param  string $id (required)
     * @param  \ArthurHlt\Zitadel\Model\Actionv3alphaPatchTarget $target (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaPatchTargetResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELActionsPatchTargetWithHttpInfo($id, $target, $instanceId = null, $instanceDomain = null)
    {
        $request = $this->zITADELActionsPatchTargetRequest($id, $target, $instanceId, $instanceDomain);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaPatchTargetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaPatchTargetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaPatchTargetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaPatchTargetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELActionsPatchTargetAsync
     *
     * Patch a target
     *
     * @param  string $id (required)
     * @param  \ArthurHlt\Zitadel\Model\Actionv3alphaPatchTarget $target (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELActionsPatchTargetAsync($id, $target, $instanceId = null, $instanceDomain = null)
    {
        return $this->zITADELActionsPatchTargetAsyncWithHttpInfo($id, $target, $instanceId, $instanceDomain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELActionsPatchTargetAsyncWithHttpInfo
     *
     * Patch a target
     *
     * @param  string $id (required)
     * @param  \ArthurHlt\Zitadel\Model\Actionv3alphaPatchTarget $target (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELActionsPatchTargetAsyncWithHttpInfo($id, $target, $instanceId = null, $instanceDomain = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaPatchTargetResponse';
        $request = $this->zITADELActionsPatchTargetRequest($id, $target, $instanceId, $instanceDomain);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELActionsPatchTarget'
     *
     * @param  string $id (required)
     * @param  \ArthurHlt\Zitadel\Model\Actionv3alphaPatchTarget $target (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELActionsPatchTargetRequest($id, $target, $instanceId = null, $instanceDomain = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling zITADELActionsPatchTarget'
            );
        }
        // verify the required parameter 'target' is set
        if ($target === null || (is_array($target) && count($target) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target when calling zITADELActionsPatchTarget'
            );
        }

        $resourcePath = '/resources/v3alpha/actions/targets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($target)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($target));
            } else {
                $httpBody = $target;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PATCH', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELActionsSearchExecutions
     *
     * Search executions
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaExecutionSearchFilter[] $filters Define the criteria to query for. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $queryOffset queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error. (optional)
     * @param  bool $queryDesc default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results. (optional)
     * @param  string $sortingColumn The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent. (optional, default to 'EXECUTION_FIELD_NAME_UNSPECIFIED')
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaSearchExecutionsResponse|\ArthurHlt\Zitadel\Model\RpcStatus|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELActionsSearchExecutions($filters, $instanceId = null, $instanceDomain = null, $queryOffset = null, $queryLimit = null, $queryDesc = null, $sortingColumn = 'EXECUTION_FIELD_NAME_UNSPECIFIED')
    {
        list($response) = $this->zITADELActionsSearchExecutionsWithHttpInfo($filters, $instanceId, $instanceDomain, $queryOffset, $queryLimit, $queryDesc, $sortingColumn);
        return $response;
    }

    /**
     * Operation zITADELActionsSearchExecutionsWithHttpInfo
     *
     * Search executions
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaExecutionSearchFilter[] $filters Define the criteria to query for. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error. (optional)
     * @param  bool $queryDesc default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results. (optional)
     * @param  string $sortingColumn The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent. (optional, default to 'EXECUTION_FIELD_NAME_UNSPECIFIED')
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaSearchExecutionsResponse|\ArthurHlt\Zitadel\Model\RpcStatus|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELActionsSearchExecutionsWithHttpInfo($filters, $instanceId = null, $instanceDomain = null, $queryOffset = null, $queryLimit = null, $queryDesc = null, $sortingColumn = 'EXECUTION_FIELD_NAME_UNSPECIFIED')
    {
        $request = $this->zITADELActionsSearchExecutionsRequest($filters, $instanceId, $instanceDomain, $queryOffset, $queryLimit, $queryDesc, $sortingColumn);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaSearchExecutionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaSearchExecutionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaSearchExecutionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaSearchExecutionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELActionsSearchExecutionsAsync
     *
     * Search executions
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaExecutionSearchFilter[] $filters Define the criteria to query for. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error. (optional)
     * @param  bool $queryDesc default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results. (optional)
     * @param  string $sortingColumn The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent. (optional, default to 'EXECUTION_FIELD_NAME_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELActionsSearchExecutionsAsync($filters, $instanceId = null, $instanceDomain = null, $queryOffset = null, $queryLimit = null, $queryDesc = null, $sortingColumn = 'EXECUTION_FIELD_NAME_UNSPECIFIED')
    {
        return $this->zITADELActionsSearchExecutionsAsyncWithHttpInfo($filters, $instanceId, $instanceDomain, $queryOffset, $queryLimit, $queryDesc, $sortingColumn)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELActionsSearchExecutionsAsyncWithHttpInfo
     *
     * Search executions
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaExecutionSearchFilter[] $filters Define the criteria to query for. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error. (optional)
     * @param  bool $queryDesc default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results. (optional)
     * @param  string $sortingColumn The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent. (optional, default to 'EXECUTION_FIELD_NAME_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELActionsSearchExecutionsAsyncWithHttpInfo($filters, $instanceId = null, $instanceDomain = null, $queryOffset = null, $queryLimit = null, $queryDesc = null, $sortingColumn = 'EXECUTION_FIELD_NAME_UNSPECIFIED')
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaSearchExecutionsResponse';
        $request = $this->zITADELActionsSearchExecutionsRequest($filters, $instanceId, $instanceDomain, $queryOffset, $queryLimit, $queryDesc, $sortingColumn);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELActionsSearchExecutions'
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaExecutionSearchFilter[] $filters Define the criteria to query for. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error. (optional)
     * @param  bool $queryDesc default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results. (optional)
     * @param  string $sortingColumn The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent. (optional, default to 'EXECUTION_FIELD_NAME_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELActionsSearchExecutionsRequest($filters, $instanceId = null, $instanceDomain = null, $queryOffset = null, $queryLimit = null, $queryDesc = null, $sortingColumn = 'EXECUTION_FIELD_NAME_UNSPECIFIED')
    {
        // verify the required parameter 'filters' is set
        if ($filters === null || (is_array($filters) && count($filters) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filters when calling zITADELActionsSearchExecutions'
            );
        }

        $resourcePath = '/resources/v3alpha/actions/executions/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($queryOffset)) {
            $queryOffset = ObjectSerializer::serializeCollection($queryOffset, '', true);
        }
        if ($queryOffset !== null) {
            $queryParams['query.offset'] = $queryOffset;
        }
        // query params
        if (is_array($queryLimit)) {
            $queryLimit = ObjectSerializer::serializeCollection($queryLimit, '', true);
        }
        if ($queryLimit !== null) {
            $queryParams['query.limit'] = $queryLimit;
        }
        // query params
        if (is_array($queryDesc)) {
            $queryDesc = ObjectSerializer::serializeCollection($queryDesc, '', true);
        }
        if ($queryDesc !== null) {
            $queryParams['query.desc'] = $queryDesc;
        }
        // query params
        if (is_array($sortingColumn)) {
            $sortingColumn = ObjectSerializer::serializeCollection($sortingColumn, '', true);
        }
        if ($sortingColumn !== null) {
            $queryParams['sortingColumn'] = $sortingColumn;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($filters)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($filters));
            } else {
                $httpBody = $filters;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELActionsSearchTargets
     *
     * Search targets
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaTargetSearchFilter[] $filters Define the criteria to query for. (required)
     * @param  string $instanceId instanceId (optional)
     * @param  string $instanceDomain instanceDomain (optional)
     * @param  string $queryOffset queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error. (optional)
     * @param  bool $queryDesc default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results. (optional)
     * @param  string $sortingColumn The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent. (optional, default to 'TARGET_FIELD_NAME_UNSPECIFIED')
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaSearchTargetsResponse|\ArthurHlt\Zitadel\Model\RpcStatus|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELActionsSearchTargets($filters, $instanceId = null, $instanceDomain = null, $queryOffset = null, $queryLimit = null, $queryDesc = null, $sortingColumn = 'TARGET_FIELD_NAME_UNSPECIFIED')
    {
        list($response) = $this->zITADELActionsSearchTargetsWithHttpInfo($filters, $instanceId, $instanceDomain, $queryOffset, $queryLimit, $queryDesc, $sortingColumn);
        return $response;
    }

    /**
     * Operation zITADELActionsSearchTargetsWithHttpInfo
     *
     * Search targets
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaTargetSearchFilter[] $filters Define the criteria to query for. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error. (optional)
     * @param  bool $queryDesc default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results. (optional)
     * @param  string $sortingColumn The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent. (optional, default to 'TARGET_FIELD_NAME_UNSPECIFIED')
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaSearchTargetsResponse|\ArthurHlt\Zitadel\Model\RpcStatus|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELActionsSearchTargetsWithHttpInfo($filters, $instanceId = null, $instanceDomain = null, $queryOffset = null, $queryLimit = null, $queryDesc = null, $sortingColumn = 'TARGET_FIELD_NAME_UNSPECIFIED')
    {
        $request = $this->zITADELActionsSearchTargetsRequest($filters, $instanceId, $instanceDomain, $queryOffset, $queryLimit, $queryDesc, $sortingColumn);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaSearchTargetsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaSearchTargetsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaSearchTargetsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaSearchTargetsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELActionsSearchTargetsAsync
     *
     * Search targets
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaTargetSearchFilter[] $filters Define the criteria to query for. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error. (optional)
     * @param  bool $queryDesc default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results. (optional)
     * @param  string $sortingColumn The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent. (optional, default to 'TARGET_FIELD_NAME_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELActionsSearchTargetsAsync($filters, $instanceId = null, $instanceDomain = null, $queryOffset = null, $queryLimit = null, $queryDesc = null, $sortingColumn = 'TARGET_FIELD_NAME_UNSPECIFIED')
    {
        return $this->zITADELActionsSearchTargetsAsyncWithHttpInfo($filters, $instanceId, $instanceDomain, $queryOffset, $queryLimit, $queryDesc, $sortingColumn)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELActionsSearchTargetsAsyncWithHttpInfo
     *
     * Search targets
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaTargetSearchFilter[] $filters Define the criteria to query for. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error. (optional)
     * @param  bool $queryDesc default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results. (optional)
     * @param  string $sortingColumn The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent. (optional, default to 'TARGET_FIELD_NAME_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELActionsSearchTargetsAsyncWithHttpInfo($filters, $instanceId = null, $instanceDomain = null, $queryOffset = null, $queryLimit = null, $queryDesc = null, $sortingColumn = 'TARGET_FIELD_NAME_UNSPECIFIED')
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaSearchTargetsResponse';
        $request = $this->zITADELActionsSearchTargetsRequest($filters, $instanceId, $instanceDomain, $queryOffset, $queryLimit, $queryDesc, $sortingColumn);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELActionsSearchTargets'
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaTargetSearchFilter[] $filters Define the criteria to query for. (required)
     * @param  string $instanceId (optional)
     * @param  string $instanceDomain (optional)
     * @param  string $queryOffset (optional)
     * @param  int $queryLimit Maximum amount of events returned. If not configured otherwise, the default is 100, the maximum is 1000. If the limit exceeds the maximum, ZITADEL throws an error. (optional)
     * @param  bool $queryDesc default is ascending, because together with the creation date sorting column, this returns the most deterministic pagination results. (optional)
     * @param  string $sortingColumn The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent. (optional, default to 'TARGET_FIELD_NAME_UNSPECIFIED')
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELActionsSearchTargetsRequest($filters, $instanceId = null, $instanceDomain = null, $queryOffset = null, $queryLimit = null, $queryDesc = null, $sortingColumn = 'TARGET_FIELD_NAME_UNSPECIFIED')
    {
        // verify the required parameter 'filters' is set
        if ($filters === null || (is_array($filters) && count($filters) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filters when calling zITADELActionsSearchTargets'
            );
        }

        $resourcePath = '/resources/v3alpha/actions/targets/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if (is_array($instanceId)) {
            $instanceId = ObjectSerializer::serializeCollection($instanceId, '', true);
        }
        if ($instanceId !== null) {
            $queryParams['instance.id'] = $instanceId;
        }
        // query params
        if (is_array($instanceDomain)) {
            $instanceDomain = ObjectSerializer::serializeCollection($instanceDomain, '', true);
        }
        if ($instanceDomain !== null) {
            $queryParams['instance.domain'] = $instanceDomain;
        }
        // query params
        if (is_array($queryOffset)) {
            $queryOffset = ObjectSerializer::serializeCollection($queryOffset, '', true);
        }
        if ($queryOffset !== null) {
            $queryParams['query.offset'] = $queryOffset;
        }
        // query params
        if (is_array($queryLimit)) {
            $queryLimit = ObjectSerializer::serializeCollection($queryLimit, '', true);
        }
        if ($queryLimit !== null) {
            $queryParams['query.limit'] = $queryLimit;
        }
        // query params
        if (is_array($queryDesc)) {
            $queryDesc = ObjectSerializer::serializeCollection($queryDesc, '', true);
        }
        if ($queryDesc !== null) {
            $queryParams['query.desc'] = $queryDesc;
        }
        // query params
        if (is_array($sortingColumn)) {
            $sortingColumn = ObjectSerializer::serializeCollection($sortingColumn, '', true);
        }
        if ($sortingColumn !== null) {
            $queryParams['sortingColumn'] = $sortingColumn;
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($filters)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($filters));
            } else {
                $httpBody = $filters;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation zITADELActionsSetExecution
     *
     * Sets an execution to call a target or include the targets of another execution.
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaSetExecutionRequest $body body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V3alphaSetExecutionResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function zITADELActionsSetExecution($body)
    {
        list($response) = $this->zITADELActionsSetExecutionWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation zITADELActionsSetExecutionWithHttpInfo
     *
     * Sets an execution to call a target or include the targets of another execution.
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaSetExecutionRequest $body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V3alphaSetExecutionResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function zITADELActionsSetExecutionWithHttpInfo($body)
    {
        $request = $this->zITADELActionsSetExecutionRequest($body);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V3alphaSetExecutionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V3alphaSetExecutionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V3alphaSetExecutionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V3alphaSetExecutionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zITADELActionsSetExecutionAsync
     *
     * Sets an execution to call a target or include the targets of another execution.
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaSetExecutionRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELActionsSetExecutionAsync($body)
    {
        return $this->zITADELActionsSetExecutionAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zITADELActionsSetExecutionAsyncWithHttpInfo
     *
     * Sets an execution to call a target or include the targets of another execution.
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaSetExecutionRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function zITADELActionsSetExecutionAsyncWithHttpInfo($body)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V3alphaSetExecutionResponse';
        $request = $this->zITADELActionsSetExecutionRequest($body);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'zITADELActionsSetExecution'
     *
     * @param  \ArthurHlt\Zitadel\Model\V3alphaSetExecutionRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function zITADELActionsSetExecutionRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling zITADELActionsSetExecution'
            );
        }

        $resourcePath = '/resources/v3alpha/actions/executions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
