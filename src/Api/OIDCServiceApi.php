<?php
/**
 * OIDCServiceApi
 * PHP version 7.2
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ArthurHlt\Zitadel\Api;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use ArthurHlt\Zitadel\ApiException;
use ArthurHlt\Zitadel\Configuration;
use ArthurHlt\Zitadel\DebugPlugin;
use ArthurHlt\Zitadel\HeaderSelector;
use ArthurHlt\Zitadel\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * OIDCServiceApi Class Doc Comment
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OIDCServiceApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://zitadel.cloud/management/v1');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation oIDCServiceAuthorizeOrDenyDeviceAuthorization
     *
     * Authorize or deny device authorization
     *
     * @param  string $deviceAuthorizationId The device authorization id returned when submitting the user code. (required)
     * @param  \ArthurHlt\Zitadel\Model\OIDCServiceAuthorizeOrDenyDeviceAuthorizationBody $body body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function oIDCServiceAuthorizeOrDenyDeviceAuthorization($deviceAuthorizationId, $body)
    {
        list($response) = $this->oIDCServiceAuthorizeOrDenyDeviceAuthorizationWithHttpInfo($deviceAuthorizationId, $body);
        return $response;
    }

    /**
     * Operation oIDCServiceAuthorizeOrDenyDeviceAuthorizationWithHttpInfo
     *
     * Authorize or deny device authorization
     *
     * @param  string $deviceAuthorizationId The device authorization id returned when submitting the user code. (required)
     * @param  \ArthurHlt\Zitadel\Model\OIDCServiceAuthorizeOrDenyDeviceAuthorizationBody $body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function oIDCServiceAuthorizeOrDenyDeviceAuthorizationWithHttpInfo($deviceAuthorizationId, $body)
    {
        $request = $this->oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest($deviceAuthorizationId, $body);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oIDCServiceAuthorizeOrDenyDeviceAuthorizationAsync
     *
     * Authorize or deny device authorization
     *
     * @param  string $deviceAuthorizationId The device authorization id returned when submitting the user code. (required)
     * @param  \ArthurHlt\Zitadel\Model\OIDCServiceAuthorizeOrDenyDeviceAuthorizationBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function oIDCServiceAuthorizeOrDenyDeviceAuthorizationAsync($deviceAuthorizationId, $body)
    {
        return $this->oIDCServiceAuthorizeOrDenyDeviceAuthorizationAsyncWithHttpInfo($deviceAuthorizationId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oIDCServiceAuthorizeOrDenyDeviceAuthorizationAsyncWithHttpInfo
     *
     * Authorize or deny device authorization
     *
     * @param  string $deviceAuthorizationId The device authorization id returned when submitting the user code. (required)
     * @param  \ArthurHlt\Zitadel\Model\OIDCServiceAuthorizeOrDenyDeviceAuthorizationBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function oIDCServiceAuthorizeOrDenyDeviceAuthorizationAsyncWithHttpInfo($deviceAuthorizationId, $body)
    {
        $returnType = 'object';
        $request = $this->oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest($deviceAuthorizationId, $body);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'oIDCServiceAuthorizeOrDenyDeviceAuthorization'
     *
     * @param  string $deviceAuthorizationId The device authorization id returned when submitting the user code. (required)
     * @param  \ArthurHlt\Zitadel\Model\OIDCServiceAuthorizeOrDenyDeviceAuthorizationBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest($deviceAuthorizationId, $body)
    {
        // verify the required parameter 'deviceAuthorizationId' is set
        if ($deviceAuthorizationId === null || (is_array($deviceAuthorizationId) && count($deviceAuthorizationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deviceAuthorizationId when calling oIDCServiceAuthorizeOrDenyDeviceAuthorization'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling oIDCServiceAuthorizeOrDenyDeviceAuthorization'
            );
        }

        $resourcePath = '/v2/oidc/device_authorization/{deviceAuthorizationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($deviceAuthorizationId !== null) {
            $resourcePath = str_replace(
                '{' . 'deviceAuthorizationId' . '}',
                ObjectSerializer::toPathValue($deviceAuthorizationId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation oIDCServiceCreateCallback
     *
     * Finalize an Auth Request and get the callback URL.
     *
     * @param  string $authRequestId ID of the Auth Request. (required)
     * @param  \ArthurHlt\Zitadel\Model\Oidcv2OIDCServiceCreateCallbackBody $body body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Oidcv2CreateCallbackResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function oIDCServiceCreateCallback($authRequestId, $body)
    {
        list($response) = $this->oIDCServiceCreateCallbackWithHttpInfo($authRequestId, $body);
        return $response;
    }

    /**
     * Operation oIDCServiceCreateCallbackWithHttpInfo
     *
     * Finalize an Auth Request and get the callback URL.
     *
     * @param  string $authRequestId ID of the Auth Request. (required)
     * @param  \ArthurHlt\Zitadel\Model\Oidcv2OIDCServiceCreateCallbackBody $body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Oidcv2CreateCallbackResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function oIDCServiceCreateCallbackWithHttpInfo($authRequestId, $body)
    {
        $request = $this->oIDCServiceCreateCallbackRequest($authRequestId, $body);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Oidcv2CreateCallbackResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Oidcv2CreateCallbackResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Oidcv2CreateCallbackResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Oidcv2CreateCallbackResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oIDCServiceCreateCallbackAsync
     *
     * Finalize an Auth Request and get the callback URL.
     *
     * @param  string $authRequestId ID of the Auth Request. (required)
     * @param  \ArthurHlt\Zitadel\Model\Oidcv2OIDCServiceCreateCallbackBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function oIDCServiceCreateCallbackAsync($authRequestId, $body)
    {
        return $this->oIDCServiceCreateCallbackAsyncWithHttpInfo($authRequestId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oIDCServiceCreateCallbackAsyncWithHttpInfo
     *
     * Finalize an Auth Request and get the callback URL.
     *
     * @param  string $authRequestId ID of the Auth Request. (required)
     * @param  \ArthurHlt\Zitadel\Model\Oidcv2OIDCServiceCreateCallbackBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function oIDCServiceCreateCallbackAsyncWithHttpInfo($authRequestId, $body)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Oidcv2CreateCallbackResponse';
        $request = $this->oIDCServiceCreateCallbackRequest($authRequestId, $body);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'oIDCServiceCreateCallback'
     *
     * @param  string $authRequestId ID of the Auth Request. (required)
     * @param  \ArthurHlt\Zitadel\Model\Oidcv2OIDCServiceCreateCallbackBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function oIDCServiceCreateCallbackRequest($authRequestId, $body)
    {
        // verify the required parameter 'authRequestId' is set
        if ($authRequestId === null || (is_array($authRequestId) && count($authRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authRequestId when calling oIDCServiceCreateCallback'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling oIDCServiceCreateCallback'
            );
        }

        $resourcePath = '/v2/oidc/auth_requests/{authRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($authRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'authRequestId' . '}',
                ObjectSerializer::toPathValue($authRequestId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation oIDCServiceCreateCallback_0
     *
     * Finalize an Auth Request and get the callback URL.
     *
     * @param  string $authRequestId Set this field when the authorization flow failed. It creates a callback URL to the application, with the error details set. (required)
     * @param  \ArthurHlt\Zitadel\Model\Oidcv2betaOIDCServiceCreateCallbackBody $body body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Oidcv2betaCreateCallbackResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function oIDCServiceCreateCallback_0($authRequestId, $body)
    {
        list($response) = $this->oIDCServiceCreateCallback_0WithHttpInfo($authRequestId, $body);
        return $response;
    }

    /**
     * Operation oIDCServiceCreateCallback_0WithHttpInfo
     *
     * Finalize an Auth Request and get the callback URL.
     *
     * @param  string $authRequestId Set this field when the authorization flow failed. It creates a callback URL to the application, with the error details set. (required)
     * @param  \ArthurHlt\Zitadel\Model\Oidcv2betaOIDCServiceCreateCallbackBody $body (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Oidcv2betaCreateCallbackResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function oIDCServiceCreateCallback_0WithHttpInfo($authRequestId, $body)
    {
        $request = $this->oIDCServiceCreateCallback_0Request($authRequestId, $body);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Oidcv2betaCreateCallbackResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Oidcv2betaCreateCallbackResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Oidcv2betaCreateCallbackResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Oidcv2betaCreateCallbackResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oIDCServiceCreateCallback_0Async
     *
     * Finalize an Auth Request and get the callback URL.
     *
     * @param  string $authRequestId Set this field when the authorization flow failed. It creates a callback URL to the application, with the error details set. (required)
     * @param  \ArthurHlt\Zitadel\Model\Oidcv2betaOIDCServiceCreateCallbackBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function oIDCServiceCreateCallback_0Async($authRequestId, $body)
    {
        return $this->oIDCServiceCreateCallback_0AsyncWithHttpInfo($authRequestId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oIDCServiceCreateCallback_0AsyncWithHttpInfo
     *
     * Finalize an Auth Request and get the callback URL.
     *
     * @param  string $authRequestId Set this field when the authorization flow failed. It creates a callback URL to the application, with the error details set. (required)
     * @param  \ArthurHlt\Zitadel\Model\Oidcv2betaOIDCServiceCreateCallbackBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function oIDCServiceCreateCallback_0AsyncWithHttpInfo($authRequestId, $body)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Oidcv2betaCreateCallbackResponse';
        $request = $this->oIDCServiceCreateCallback_0Request($authRequestId, $body);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'oIDCServiceCreateCallback_0'
     *
     * @param  string $authRequestId Set this field when the authorization flow failed. It creates a callback URL to the application, with the error details set. (required)
     * @param  \ArthurHlt\Zitadel\Model\Oidcv2betaOIDCServiceCreateCallbackBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function oIDCServiceCreateCallback_0Request($authRequestId, $body)
    {
        // verify the required parameter 'authRequestId' is set
        if ($authRequestId === null || (is_array($authRequestId) && count($authRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authRequestId when calling oIDCServiceCreateCallback_0'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling oIDCServiceCreateCallback_0'
            );
        }

        $resourcePath = '/v2beta/oidc/auth_requests/{authRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($authRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'authRequestId' . '}',
                ObjectSerializer::toPathValue($authRequestId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation oIDCServiceGetAuthRequest
     *
     * Get OIDC Auth Request details
     *
     * @param  string $authRequestId ID of the Auth Request, as obtained from the redirect URL. (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Oidcv2GetAuthRequestResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function oIDCServiceGetAuthRequest($authRequestId)
    {
        list($response) = $this->oIDCServiceGetAuthRequestWithHttpInfo($authRequestId);
        return $response;
    }

    /**
     * Operation oIDCServiceGetAuthRequestWithHttpInfo
     *
     * Get OIDC Auth Request details
     *
     * @param  string $authRequestId ID of the Auth Request, as obtained from the redirect URL. (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Oidcv2GetAuthRequestResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function oIDCServiceGetAuthRequestWithHttpInfo($authRequestId)
    {
        $request = $this->oIDCServiceGetAuthRequestRequest($authRequestId);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Oidcv2GetAuthRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Oidcv2GetAuthRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Oidcv2GetAuthRequestResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Oidcv2GetAuthRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oIDCServiceGetAuthRequestAsync
     *
     * Get OIDC Auth Request details
     *
     * @param  string $authRequestId ID of the Auth Request, as obtained from the redirect URL. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function oIDCServiceGetAuthRequestAsync($authRequestId)
    {
        return $this->oIDCServiceGetAuthRequestAsyncWithHttpInfo($authRequestId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oIDCServiceGetAuthRequestAsyncWithHttpInfo
     *
     * Get OIDC Auth Request details
     *
     * @param  string $authRequestId ID of the Auth Request, as obtained from the redirect URL. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function oIDCServiceGetAuthRequestAsyncWithHttpInfo($authRequestId)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Oidcv2GetAuthRequestResponse';
        $request = $this->oIDCServiceGetAuthRequestRequest($authRequestId);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'oIDCServiceGetAuthRequest'
     *
     * @param  string $authRequestId ID of the Auth Request, as obtained from the redirect URL. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function oIDCServiceGetAuthRequestRequest($authRequestId)
    {
        // verify the required parameter 'authRequestId' is set
        if ($authRequestId === null || (is_array($authRequestId) && count($authRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authRequestId when calling oIDCServiceGetAuthRequest'
            );
        }

        $resourcePath = '/v2/oidc/auth_requests/{authRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($authRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'authRequestId' . '}',
                ObjectSerializer::toPathValue($authRequestId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation oIDCServiceGetAuthRequest_0
     *
     * Get OIDC Auth Request details
     *
     * @param  string $authRequestId ID of the Auth Request, as obtained from the redirect URL. (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\Oidcv2betaGetAuthRequestResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function oIDCServiceGetAuthRequest_0($authRequestId)
    {
        list($response) = $this->oIDCServiceGetAuthRequest_0WithHttpInfo($authRequestId);
        return $response;
    }

    /**
     * Operation oIDCServiceGetAuthRequest_0WithHttpInfo
     *
     * Get OIDC Auth Request details
     *
     * @param  string $authRequestId ID of the Auth Request, as obtained from the redirect URL. (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\Oidcv2betaGetAuthRequestResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function oIDCServiceGetAuthRequest_0WithHttpInfo($authRequestId)
    {
        $request = $this->oIDCServiceGetAuthRequest_0Request($authRequestId);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\Oidcv2betaGetAuthRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\Oidcv2betaGetAuthRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\Oidcv2betaGetAuthRequestResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\Oidcv2betaGetAuthRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oIDCServiceGetAuthRequest_0Async
     *
     * Get OIDC Auth Request details
     *
     * @param  string $authRequestId ID of the Auth Request, as obtained from the redirect URL. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function oIDCServiceGetAuthRequest_0Async($authRequestId)
    {
        return $this->oIDCServiceGetAuthRequest_0AsyncWithHttpInfo($authRequestId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oIDCServiceGetAuthRequest_0AsyncWithHttpInfo
     *
     * Get OIDC Auth Request details
     *
     * @param  string $authRequestId ID of the Auth Request, as obtained from the redirect URL. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function oIDCServiceGetAuthRequest_0AsyncWithHttpInfo($authRequestId)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\Oidcv2betaGetAuthRequestResponse';
        $request = $this->oIDCServiceGetAuthRequest_0Request($authRequestId);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'oIDCServiceGetAuthRequest_0'
     *
     * @param  string $authRequestId ID of the Auth Request, as obtained from the redirect URL. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function oIDCServiceGetAuthRequest_0Request($authRequestId)
    {
        // verify the required parameter 'authRequestId' is set
        if ($authRequestId === null || (is_array($authRequestId) && count($authRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authRequestId when calling oIDCServiceGetAuthRequest_0'
            );
        }

        $resourcePath = '/v2beta/oidc/auth_requests/{authRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($authRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'authRequestId' . '}',
                ObjectSerializer::toPathValue($authRequestId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation oIDCServiceGetDeviceAuthorizationRequest
     *
     * Get device authorization request
     *
     * @param  string $userCode The user_code returned by the device authorization request and provided to the user by the device. (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V2GetDeviceAuthorizationRequestResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function oIDCServiceGetDeviceAuthorizationRequest($userCode)
    {
        list($response) = $this->oIDCServiceGetDeviceAuthorizationRequestWithHttpInfo($userCode);
        return $response;
    }

    /**
     * Operation oIDCServiceGetDeviceAuthorizationRequestWithHttpInfo
     *
     * Get device authorization request
     *
     * @param  string $userCode The user_code returned by the device authorization request and provided to the user by the device. (required)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V2GetDeviceAuthorizationRequestResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function oIDCServiceGetDeviceAuthorizationRequestWithHttpInfo($userCode)
    {
        $request = $this->oIDCServiceGetDeviceAuthorizationRequestRequest($userCode);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V2GetDeviceAuthorizationRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V2GetDeviceAuthorizationRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V2GetDeviceAuthorizationRequestResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V2GetDeviceAuthorizationRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oIDCServiceGetDeviceAuthorizationRequestAsync
     *
     * Get device authorization request
     *
     * @param  string $userCode The user_code returned by the device authorization request and provided to the user by the device. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function oIDCServiceGetDeviceAuthorizationRequestAsync($userCode)
    {
        return $this->oIDCServiceGetDeviceAuthorizationRequestAsyncWithHttpInfo($userCode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oIDCServiceGetDeviceAuthorizationRequestAsyncWithHttpInfo
     *
     * Get device authorization request
     *
     * @param  string $userCode The user_code returned by the device authorization request and provided to the user by the device. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function oIDCServiceGetDeviceAuthorizationRequestAsyncWithHttpInfo($userCode)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V2GetDeviceAuthorizationRequestResponse';
        $request = $this->oIDCServiceGetDeviceAuthorizationRequestRequest($userCode);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'oIDCServiceGetDeviceAuthorizationRequest'
     *
     * @param  string $userCode The user_code returned by the device authorization request and provided to the user by the device. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function oIDCServiceGetDeviceAuthorizationRequestRequest($userCode)
    {
        // verify the required parameter 'userCode' is set
        if ($userCode === null || (is_array($userCode) && count($userCode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userCode when calling oIDCServiceGetDeviceAuthorizationRequest'
            );
        }

        $resourcePath = '/v2/oidc/device_authorization/{userCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($userCode !== null) {
            $resourcePath = str_replace(
                '{' . 'userCode' . '}',
                ObjectSerializer::toPathValue($userCode),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
