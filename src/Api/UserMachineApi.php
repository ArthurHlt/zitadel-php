<?php
/**
 * UserMachineApi
 * PHP version 7.2
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ArthurHlt\Zitadel\Api;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use ArthurHlt\Zitadel\ApiException;
use ArthurHlt\Zitadel\Configuration;
use ArthurHlt\Zitadel\DebugPlugin;
use ArthurHlt\Zitadel\HeaderSelector;
use ArthurHlt\Zitadel\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * UserMachineApi Class Doc Comment
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserMachineApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://zitadel.cloud/management/v1');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation managementServiceAddMachineKey
     *
     * Create Key for machine user
     *
     * @param  string $userId userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddMachineKeyBody $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1AddMachineKeyResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceAddMachineKey($userId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceAddMachineKeyWithHttpInfo($userId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceAddMachineKeyWithHttpInfo
     *
     * Create Key for machine user
     *
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddMachineKeyBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1AddMachineKeyResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceAddMachineKeyWithHttpInfo($userId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceAddMachineKeyRequest($userId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1AddMachineKeyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddMachineKeyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1AddMachineKeyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddMachineKeyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceAddMachineKeyAsync
     *
     * Create Key for machine user
     *
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddMachineKeyBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceAddMachineKeyAsync($userId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceAddMachineKeyAsyncWithHttpInfo($userId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceAddMachineKeyAsyncWithHttpInfo
     *
     * Create Key for machine user
     *
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddMachineKeyBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceAddMachineKeyAsyncWithHttpInfo($userId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1AddMachineKeyResponse';
        $request = $this->managementServiceAddMachineKeyRequest($userId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceAddMachineKey'
     *
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddMachineKeyBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceAddMachineKeyRequest($userId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling managementServiceAddMachineKey'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceAddMachineKey'
            );
        }

        $resourcePath = '/users/{userId}/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceAddMachineUser
     *
     * Create User (Machine)
     *
     * @param  \ArthurHlt\Zitadel\Model\V1AddMachineUserRequest $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1AddMachineUserResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceAddMachineUser($body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceAddMachineUserWithHttpInfo($body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceAddMachineUserWithHttpInfo
     *
     * Create User (Machine)
     *
     * @param  \ArthurHlt\Zitadel\Model\V1AddMachineUserRequest $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1AddMachineUserResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceAddMachineUserWithHttpInfo($body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceAddMachineUserRequest($body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1AddMachineUserResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddMachineUserResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1AddMachineUserResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddMachineUserResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceAddMachineUserAsync
     *
     * Create User (Machine)
     *
     * @param  \ArthurHlt\Zitadel\Model\V1AddMachineUserRequest $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceAddMachineUserAsync($body, $xZitadelOrgid = null)
    {
        return $this->managementServiceAddMachineUserAsyncWithHttpInfo($body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceAddMachineUserAsyncWithHttpInfo
     *
     * Create User (Machine)
     *
     * @param  \ArthurHlt\Zitadel\Model\V1AddMachineUserRequest $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceAddMachineUserAsyncWithHttpInfo($body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1AddMachineUserResponse';
        $request = $this->managementServiceAddMachineUserRequest($body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceAddMachineUser'
     *
     * @param  \ArthurHlt\Zitadel\Model\V1AddMachineUserRequest $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceAddMachineUserRequest($body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceAddMachineUser'
            );
        }

        $resourcePath = '/users/machine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceAddPersonalAccessToken
     *
     * Create a Personal-Access-Token (PAT)
     *
     * @param  string $userId userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddPersonalAccessTokenBody $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1AddPersonalAccessTokenResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceAddPersonalAccessToken($userId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceAddPersonalAccessTokenWithHttpInfo($userId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceAddPersonalAccessTokenWithHttpInfo
     *
     * Create a Personal-Access-Token (PAT)
     *
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddPersonalAccessTokenBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1AddPersonalAccessTokenResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceAddPersonalAccessTokenWithHttpInfo($userId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceAddPersonalAccessTokenRequest($userId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1AddPersonalAccessTokenResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1AddPersonalAccessTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1AddPersonalAccessTokenResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1AddPersonalAccessTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceAddPersonalAccessTokenAsync
     *
     * Create a Personal-Access-Token (PAT)
     *
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddPersonalAccessTokenBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceAddPersonalAccessTokenAsync($userId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceAddPersonalAccessTokenAsyncWithHttpInfo($userId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceAddPersonalAccessTokenAsyncWithHttpInfo
     *
     * Create a Personal-Access-Token (PAT)
     *
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddPersonalAccessTokenBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceAddPersonalAccessTokenAsyncWithHttpInfo($userId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1AddPersonalAccessTokenResponse';
        $request = $this->managementServiceAddPersonalAccessTokenRequest($userId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceAddPersonalAccessToken'
     *
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceAddPersonalAccessTokenBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceAddPersonalAccessTokenRequest($userId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling managementServiceAddPersonalAccessToken'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceAddPersonalAccessToken'
            );
        }

        $resourcePath = '/users/{userId}/pats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceGenerateMachineSecret
     *
     * Create Secret for Machine User
     *
     * @param  string $userId userId (required)
     * @param  object $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1GenerateMachineSecretResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceGenerateMachineSecret($userId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceGenerateMachineSecretWithHttpInfo($userId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceGenerateMachineSecretWithHttpInfo
     *
     * Create Secret for Machine User
     *
     * @param  string $userId (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1GenerateMachineSecretResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceGenerateMachineSecretWithHttpInfo($userId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceGenerateMachineSecretRequest($userId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1GenerateMachineSecretResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1GenerateMachineSecretResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1GenerateMachineSecretResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1GenerateMachineSecretResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceGenerateMachineSecretAsync
     *
     * Create Secret for Machine User
     *
     * @param  string $userId (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceGenerateMachineSecretAsync($userId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceGenerateMachineSecretAsyncWithHttpInfo($userId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceGenerateMachineSecretAsyncWithHttpInfo
     *
     * Create Secret for Machine User
     *
     * @param  string $userId (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceGenerateMachineSecretAsyncWithHttpInfo($userId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1GenerateMachineSecretResponse';
        $request = $this->managementServiceGenerateMachineSecretRequest($userId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceGenerateMachineSecret'
     *
     * @param  string $userId (required)
     * @param  object $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceGenerateMachineSecretRequest($userId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling managementServiceGenerateMachineSecret'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceGenerateMachineSecret'
            );
        }

        $resourcePath = '/users/{userId}/secret';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceGetMachineKeyByIDs
     *
     * Get Machine user Key By ID
     *
     * @param  string $userId userId (required)
     * @param  string $keyId keyId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1GetMachineKeyByIDsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceGetMachineKeyByIDs($userId, $keyId, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceGetMachineKeyByIDsWithHttpInfo($userId, $keyId, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceGetMachineKeyByIDsWithHttpInfo
     *
     * Get Machine user Key By ID
     *
     * @param  string $userId (required)
     * @param  string $keyId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1GetMachineKeyByIDsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceGetMachineKeyByIDsWithHttpInfo($userId, $keyId, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceGetMachineKeyByIDsRequest($userId, $keyId, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1GetMachineKeyByIDsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1GetMachineKeyByIDsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1GetMachineKeyByIDsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1GetMachineKeyByIDsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceGetMachineKeyByIDsAsync
     *
     * Get Machine user Key By ID
     *
     * @param  string $userId (required)
     * @param  string $keyId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceGetMachineKeyByIDsAsync($userId, $keyId, $xZitadelOrgid = null)
    {
        return $this->managementServiceGetMachineKeyByIDsAsyncWithHttpInfo($userId, $keyId, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceGetMachineKeyByIDsAsyncWithHttpInfo
     *
     * Get Machine user Key By ID
     *
     * @param  string $userId (required)
     * @param  string $keyId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceGetMachineKeyByIDsAsyncWithHttpInfo($userId, $keyId, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1GetMachineKeyByIDsResponse';
        $request = $this->managementServiceGetMachineKeyByIDsRequest($userId, $keyId, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceGetMachineKeyByIDs'
     *
     * @param  string $userId (required)
     * @param  string $keyId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceGetMachineKeyByIDsRequest($userId, $keyId, $xZitadelOrgid = null)
    {
        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling managementServiceGetMachineKeyByIDs'
            );
        }
        // verify the required parameter 'keyId' is set
        if ($keyId === null || (is_array($keyId) && count($keyId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $keyId when calling managementServiceGetMachineKeyByIDs'
            );
        }

        $resourcePath = '/users/{userId}/keys/{keyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }
        // path params
        if ($keyId !== null) {
            $resourcePath = str_replace(
                '{' . 'keyId' . '}',
                ObjectSerializer::toPathValue($keyId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceGetPersonalAccessTokenByIDs
     *
     * Get a Personal-Access-Token (PAT) by ID
     *
     * @param  string $userId userId (required)
     * @param  string $tokenId tokenId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1GetPersonalAccessTokenByIDsResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceGetPersonalAccessTokenByIDs($userId, $tokenId, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceGetPersonalAccessTokenByIDsWithHttpInfo($userId, $tokenId, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceGetPersonalAccessTokenByIDsWithHttpInfo
     *
     * Get a Personal-Access-Token (PAT) by ID
     *
     * @param  string $userId (required)
     * @param  string $tokenId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1GetPersonalAccessTokenByIDsResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceGetPersonalAccessTokenByIDsWithHttpInfo($userId, $tokenId, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceGetPersonalAccessTokenByIDsRequest($userId, $tokenId, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1GetPersonalAccessTokenByIDsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1GetPersonalAccessTokenByIDsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1GetPersonalAccessTokenByIDsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1GetPersonalAccessTokenByIDsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceGetPersonalAccessTokenByIDsAsync
     *
     * Get a Personal-Access-Token (PAT) by ID
     *
     * @param  string $userId (required)
     * @param  string $tokenId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceGetPersonalAccessTokenByIDsAsync($userId, $tokenId, $xZitadelOrgid = null)
    {
        return $this->managementServiceGetPersonalAccessTokenByIDsAsyncWithHttpInfo($userId, $tokenId, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceGetPersonalAccessTokenByIDsAsyncWithHttpInfo
     *
     * Get a Personal-Access-Token (PAT) by ID
     *
     * @param  string $userId (required)
     * @param  string $tokenId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceGetPersonalAccessTokenByIDsAsyncWithHttpInfo($userId, $tokenId, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1GetPersonalAccessTokenByIDsResponse';
        $request = $this->managementServiceGetPersonalAccessTokenByIDsRequest($userId, $tokenId, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceGetPersonalAccessTokenByIDs'
     *
     * @param  string $userId (required)
     * @param  string $tokenId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceGetPersonalAccessTokenByIDsRequest($userId, $tokenId, $xZitadelOrgid = null)
    {
        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling managementServiceGetPersonalAccessTokenByIDs'
            );
        }
        // verify the required parameter 'tokenId' is set
        if ($tokenId === null || (is_array($tokenId) && count($tokenId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tokenId when calling managementServiceGetPersonalAccessTokenByIDs'
            );
        }

        $resourcePath = '/users/{userId}/pats/{tokenId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }
        // path params
        if ($tokenId !== null) {
            $resourcePath = str_replace(
                '{' . 'tokenId' . '}',
                ObjectSerializer::toPathValue($tokenId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceListMachineKeys
     *
     * Get Machine user Key By ID
     *
     * @param  string $userId userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListMachineKeysBody $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1ListMachineKeysResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceListMachineKeys($userId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceListMachineKeysWithHttpInfo($userId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceListMachineKeysWithHttpInfo
     *
     * Get Machine user Key By ID
     *
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListMachineKeysBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1ListMachineKeysResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceListMachineKeysWithHttpInfo($userId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceListMachineKeysRequest($userId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1ListMachineKeysResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListMachineKeysResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1ListMachineKeysResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListMachineKeysResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceListMachineKeysAsync
     *
     * Get Machine user Key By ID
     *
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListMachineKeysBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListMachineKeysAsync($userId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceListMachineKeysAsyncWithHttpInfo($userId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceListMachineKeysAsyncWithHttpInfo
     *
     * Get Machine user Key By ID
     *
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListMachineKeysBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListMachineKeysAsyncWithHttpInfo($userId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1ListMachineKeysResponse';
        $request = $this->managementServiceListMachineKeysRequest($userId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceListMachineKeys'
     *
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListMachineKeysBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceListMachineKeysRequest($userId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling managementServiceListMachineKeys'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceListMachineKeys'
            );
        }

        $resourcePath = '/users/{userId}/keys/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceListPersonalAccessTokens
     *
     * Get a Personal-Access-Token (PAT) by ID
     *
     * @param  string $userId userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListPersonalAccessTokensBody $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1ListPersonalAccessTokensResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceListPersonalAccessTokens($userId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceListPersonalAccessTokensWithHttpInfo($userId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceListPersonalAccessTokensWithHttpInfo
     *
     * Get a Personal-Access-Token (PAT) by ID
     *
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListPersonalAccessTokensBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1ListPersonalAccessTokensResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceListPersonalAccessTokensWithHttpInfo($userId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceListPersonalAccessTokensRequest($userId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1ListPersonalAccessTokensResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1ListPersonalAccessTokensResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1ListPersonalAccessTokensResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1ListPersonalAccessTokensResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceListPersonalAccessTokensAsync
     *
     * Get a Personal-Access-Token (PAT) by ID
     *
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListPersonalAccessTokensBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListPersonalAccessTokensAsync($userId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceListPersonalAccessTokensAsyncWithHttpInfo($userId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceListPersonalAccessTokensAsyncWithHttpInfo
     *
     * Get a Personal-Access-Token (PAT) by ID
     *
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListPersonalAccessTokensBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceListPersonalAccessTokensAsyncWithHttpInfo($userId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1ListPersonalAccessTokensResponse';
        $request = $this->managementServiceListPersonalAccessTokensRequest($userId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceListPersonalAccessTokens'
     *
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceListPersonalAccessTokensBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceListPersonalAccessTokensRequest($userId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling managementServiceListPersonalAccessTokens'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceListPersonalAccessTokens'
            );
        }

        $resourcePath = '/users/{userId}/pats/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceRemoveMachineKey
     *
     * Delete Key for machine user
     *
     * @param  string $userId userId (required)
     * @param  string $keyId keyId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1RemoveMachineKeyResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceRemoveMachineKey($userId, $keyId, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceRemoveMachineKeyWithHttpInfo($userId, $keyId, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceRemoveMachineKeyWithHttpInfo
     *
     * Delete Key for machine user
     *
     * @param  string $userId (required)
     * @param  string $keyId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1RemoveMachineKeyResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceRemoveMachineKeyWithHttpInfo($userId, $keyId, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceRemoveMachineKeyRequest($userId, $keyId, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1RemoveMachineKeyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1RemoveMachineKeyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1RemoveMachineKeyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1RemoveMachineKeyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceRemoveMachineKeyAsync
     *
     * Delete Key for machine user
     *
     * @param  string $userId (required)
     * @param  string $keyId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceRemoveMachineKeyAsync($userId, $keyId, $xZitadelOrgid = null)
    {
        return $this->managementServiceRemoveMachineKeyAsyncWithHttpInfo($userId, $keyId, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceRemoveMachineKeyAsyncWithHttpInfo
     *
     * Delete Key for machine user
     *
     * @param  string $userId (required)
     * @param  string $keyId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceRemoveMachineKeyAsyncWithHttpInfo($userId, $keyId, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1RemoveMachineKeyResponse';
        $request = $this->managementServiceRemoveMachineKeyRequest($userId, $keyId, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceRemoveMachineKey'
     *
     * @param  string $userId (required)
     * @param  string $keyId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceRemoveMachineKeyRequest($userId, $keyId, $xZitadelOrgid = null)
    {
        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling managementServiceRemoveMachineKey'
            );
        }
        // verify the required parameter 'keyId' is set
        if ($keyId === null || (is_array($keyId) && count($keyId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $keyId when calling managementServiceRemoveMachineKey'
            );
        }

        $resourcePath = '/users/{userId}/keys/{keyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }
        // path params
        if ($keyId !== null) {
            $resourcePath = str_replace(
                '{' . 'keyId' . '}',
                ObjectSerializer::toPathValue($keyId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceRemoveMachineSecret
     *
     * Delete Secret of Machine User
     *
     * @param  string $userId userId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1RemoveMachineSecretResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceRemoveMachineSecret($userId, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceRemoveMachineSecretWithHttpInfo($userId, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceRemoveMachineSecretWithHttpInfo
     *
     * Delete Secret of Machine User
     *
     * @param  string $userId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1RemoveMachineSecretResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceRemoveMachineSecretWithHttpInfo($userId, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceRemoveMachineSecretRequest($userId, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1RemoveMachineSecretResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1RemoveMachineSecretResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1RemoveMachineSecretResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1RemoveMachineSecretResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceRemoveMachineSecretAsync
     *
     * Delete Secret of Machine User
     *
     * @param  string $userId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceRemoveMachineSecretAsync($userId, $xZitadelOrgid = null)
    {
        return $this->managementServiceRemoveMachineSecretAsyncWithHttpInfo($userId, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceRemoveMachineSecretAsyncWithHttpInfo
     *
     * Delete Secret of Machine User
     *
     * @param  string $userId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceRemoveMachineSecretAsyncWithHttpInfo($userId, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1RemoveMachineSecretResponse';
        $request = $this->managementServiceRemoveMachineSecretRequest($userId, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceRemoveMachineSecret'
     *
     * @param  string $userId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceRemoveMachineSecretRequest($userId, $xZitadelOrgid = null)
    {
        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling managementServiceRemoveMachineSecret'
            );
        }

        $resourcePath = '/users/{userId}/secret';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceRemovePersonalAccessToken
     *
     * Get a Personal-Access-Token (PAT) by ID
     *
     * @param  string $userId userId (required)
     * @param  string $tokenId tokenId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a result from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1RemovePersonalAccessTokenResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceRemovePersonalAccessToken($userId, $tokenId, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceRemovePersonalAccessTokenWithHttpInfo($userId, $tokenId, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceRemovePersonalAccessTokenWithHttpInfo
     *
     * Get a Personal-Access-Token (PAT) by ID
     *
     * @param  string $userId (required)
     * @param  string $tokenId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a result from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1RemovePersonalAccessTokenResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceRemovePersonalAccessTokenWithHttpInfo($userId, $tokenId, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceRemovePersonalAccessTokenRequest($userId, $tokenId, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1RemovePersonalAccessTokenResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1RemovePersonalAccessTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1RemovePersonalAccessTokenResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1RemovePersonalAccessTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceRemovePersonalAccessTokenAsync
     *
     * Get a Personal-Access-Token (PAT) by ID
     *
     * @param  string $userId (required)
     * @param  string $tokenId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a result from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceRemovePersonalAccessTokenAsync($userId, $tokenId, $xZitadelOrgid = null)
    {
        return $this->managementServiceRemovePersonalAccessTokenAsyncWithHttpInfo($userId, $tokenId, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceRemovePersonalAccessTokenAsyncWithHttpInfo
     *
     * Get a Personal-Access-Token (PAT) by ID
     *
     * @param  string $userId (required)
     * @param  string $tokenId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a result from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceRemovePersonalAccessTokenAsyncWithHttpInfo($userId, $tokenId, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1RemovePersonalAccessTokenResponse';
        $request = $this->managementServiceRemovePersonalAccessTokenRequest($userId, $tokenId, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceRemovePersonalAccessToken'
     *
     * @param  string $userId (required)
     * @param  string $tokenId (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to get a result from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceRemovePersonalAccessTokenRequest($userId, $tokenId, $xZitadelOrgid = null)
    {
        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling managementServiceRemovePersonalAccessToken'
            );
        }
        // verify the required parameter 'tokenId' is set
        if ($tokenId === null || (is_array($tokenId) && count($tokenId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tokenId when calling managementServiceRemovePersonalAccessToken'
            );
        }

        $resourcePath = '/users/{userId}/pats/{tokenId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }
        // path params
        if ($tokenId !== null) {
            $resourcePath = str_replace(
                '{' . 'tokenId' . '}',
                ObjectSerializer::toPathValue($tokenId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation managementServiceUpdateMachine
     *
     * Update Machine User
     *
     * @param  string $userId userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateMachineBody $body body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ArthurHlt\Zitadel\Model\V1UpdateMachineResponse|\ArthurHlt\Zitadel\Model\RpcStatus
     */
    public function managementServiceUpdateMachine($userId, $body, $xZitadelOrgid = null)
    {
        list($response) = $this->managementServiceUpdateMachineWithHttpInfo($userId, $body, $xZitadelOrgid);
        return $response;
    }

    /**
     * Operation managementServiceUpdateMachineWithHttpInfo
     *
     * Update Machine User
     *
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateMachineBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \ArthurHlt\Zitadel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ArthurHlt\Zitadel\Model\V1UpdateMachineResponse|\ArthurHlt\Zitadel\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function managementServiceUpdateMachineWithHttpInfo($userId, $body, $xZitadelOrgid = null)
    {
        $request = $this->managementServiceUpdateMachineRequest($userId, $body, $xZitadelOrgid);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\ArthurHlt\Zitadel\Model\V1UpdateMachineResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\V1UpdateMachineResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\ArthurHlt\Zitadel\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ArthurHlt\Zitadel\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateMachineResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\V1UpdateMachineResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ArthurHlt\Zitadel\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managementServiceUpdateMachineAsync
     *
     * Update Machine User
     *
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateMachineBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceUpdateMachineAsync($userId, $body, $xZitadelOrgid = null)
    {
        return $this->managementServiceUpdateMachineAsyncWithHttpInfo($userId, $body, $xZitadelOrgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managementServiceUpdateMachineAsyncWithHttpInfo
     *
     * Update Machine User
     *
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateMachineBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function managementServiceUpdateMachineAsyncWithHttpInfo($userId, $body, $xZitadelOrgid = null)
    {
        $returnType = '\ArthurHlt\Zitadel\Model\V1UpdateMachineResponse';
        $request = $this->managementServiceUpdateMachineRequest($userId, $body, $xZitadelOrgid);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'managementServiceUpdateMachine'
     *
     * @param  string $userId (required)
     * @param  \ArthurHlt\Zitadel\Model\ManagementServiceUpdateMachineBody $body (required)
     * @param  string $xZitadelOrgid The default is always the organization of the requesting user. If you like to update a user from another organization include the header. Make sure the requesting user has permission in the requested organization. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function managementServiceUpdateMachineRequest($userId, $body, $xZitadelOrgid = null)
    {
        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling managementServiceUpdateMachine'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling managementServiceUpdateMachine'
            );
        }

        $resourcePath = '/users/{userId}/machine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;


        // header params
        if ($xZitadelOrgid !== null) {
            $headerParams['x-zitadel-orgid'] = ObjectSerializer::toHeaderValue($xZitadelOrgid);
        }

        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/grpc', 'application/grpc-web+proto'],
            'application/jsonapplication/grpcapplication/grpc-web+proto',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
