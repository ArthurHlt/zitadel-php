<?php
/**
 * V1ImportHumanUserRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ArthurHlt\Zitadel\Model;

use \ArrayAccess;
use \ArthurHlt\Zitadel\ObjectSerializer;

/**
 * V1ImportHumanUserRequest Class Doc Comment
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V1ImportHumanUserRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'v1ImportHumanUserRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'userName' => 'string',
        'profile' => '\ArthurHlt\Zitadel\Model\V1ImportHumanUserRequestProfile',
        'email' => '\ArthurHlt\Zitadel\Model\V1ImportHumanUserRequestEmail',
        'phone' => '\ArthurHlt\Zitadel\Model\V1ImportHumanUserRequestPhone',
        'password' => 'string',
        'hashedPassword' => '\ArthurHlt\Zitadel\Model\V1ImportHumanUserRequestHashedPassword',
        'passwordChangeRequired' => 'bool',
        'requestPasswordlessRegistration' => 'bool',
        'otpCode' => 'string',
        'idps' => '\ArthurHlt\Zitadel\Model\V1ImportHumanUserRequestIDP[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'userName' => null,
        'profile' => null,
        'email' => null,
        'phone' => null,
        'password' => null,
        'hashedPassword' => null,
        'passwordChangeRequired' => null,
        'requestPasswordlessRegistration' => null,
        'otpCode' => null,
        'idps' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'userName' => false,
        'profile' => false,
        'email' => false,
        'phone' => false,
        'password' => false,
        'hashedPassword' => false,
        'passwordChangeRequired' => false,
        'requestPasswordlessRegistration' => false,
        'otpCode' => false,
        'idps' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'userName' => 'userName',
        'profile' => 'profile',
        'email' => 'email',
        'phone' => 'phone',
        'password' => 'password',
        'hashedPassword' => 'hashedPassword',
        'passwordChangeRequired' => 'passwordChangeRequired',
        'requestPasswordlessRegistration' => 'requestPasswordlessRegistration',
        'otpCode' => 'otpCode',
        'idps' => 'idps'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'userName' => 'setUserName',
        'profile' => 'setProfile',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'password' => 'setPassword',
        'hashedPassword' => 'setHashedPassword',
        'passwordChangeRequired' => 'setPasswordChangeRequired',
        'requestPasswordlessRegistration' => 'setRequestPasswordlessRegistration',
        'otpCode' => 'setOtpCode',
        'idps' => 'setIdps'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'userName' => 'getUserName',
        'profile' => 'getProfile',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'password' => 'getPassword',
        'hashedPassword' => 'getHashedPassword',
        'passwordChangeRequired' => 'getPasswordChangeRequired',
        'requestPasswordlessRegistration' => 'getRequestPasswordlessRegistration',
        'otpCode' => 'getOtpCode',
        'idps' => 'getIdps'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('userName', $data ?? [], null);
        $this->setIfExists('profile', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('hashedPassword', $data ?? [], null);
        $this->setIfExists('passwordChangeRequired', $data ?? [], null);
        $this->setIfExists('requestPasswordlessRegistration', $data ?? [], null);
        $this->setIfExists('otpCode', $data ?? [], null);
        $this->setIfExists('idps', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['userName'] === null) {
            $invalidProperties[] = "'userName' can't be null";
        }
        if ($this->container['profile'] === null) {
            $invalidProperties[] = "'profile' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets userName
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['userName'];
    }

    /**
     * Sets userName
     *
     * @param string $userName userName
     *
     * @return self
     */
    public function setUserName($userName)
    {
        if (is_null($userName)) {
            throw new \InvalidArgumentException('non-nullable userName cannot be null');
        }
        $this->container['userName'] = $userName;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return \ArthurHlt\Zitadel\Model\V1ImportHumanUserRequestProfile
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param \ArthurHlt\Zitadel\Model\V1ImportHumanUserRequestProfile $profile profile
     *
     * @return self
     */
    public function setProfile($profile)
    {
        if (is_null($profile)) {
            throw new \InvalidArgumentException('non-nullable profile cannot be null');
        }
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets email
     *
     * @return \ArthurHlt\Zitadel\Model\V1ImportHumanUserRequestEmail
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param \ArthurHlt\Zitadel\Model\V1ImportHumanUserRequestEmail $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \ArthurHlt\Zitadel\Model\V1ImportHumanUserRequestPhone|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \ArthurHlt\Zitadel\Model\V1ImportHumanUserRequestPhone|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets hashedPassword
     *
     * @return \ArthurHlt\Zitadel\Model\V1ImportHumanUserRequestHashedPassword|null
     */
    public function getHashedPassword()
    {
        return $this->container['hashedPassword'];
    }

    /**
     * Sets hashedPassword
     *
     * @param \ArthurHlt\Zitadel\Model\V1ImportHumanUserRequestHashedPassword|null $hashedPassword hashedPassword
     *
     * @return self
     */
    public function setHashedPassword($hashedPassword)
    {
        if (is_null($hashedPassword)) {
            throw new \InvalidArgumentException('non-nullable hashedPassword cannot be null');
        }
        $this->container['hashedPassword'] = $hashedPassword;

        return $this;
    }

    /**
     * Gets passwordChangeRequired
     *
     * @return bool|null
     */
    public function getPasswordChangeRequired()
    {
        return $this->container['passwordChangeRequired'];
    }

    /**
     * Sets passwordChangeRequired
     *
     * @param bool|null $passwordChangeRequired If this is set to true, the user has to change the password on the next login.
     *
     * @return self
     */
    public function setPasswordChangeRequired($passwordChangeRequired)
    {
        if (is_null($passwordChangeRequired)) {
            throw new \InvalidArgumentException('non-nullable passwordChangeRequired cannot be null');
        }
        $this->container['passwordChangeRequired'] = $passwordChangeRequired;

        return $this;
    }

    /**
     * Gets requestPasswordlessRegistration
     *
     * @return bool|null
     */
    public function getRequestPasswordlessRegistration()
    {
        return $this->container['requestPasswordlessRegistration'];
    }

    /**
     * Sets requestPasswordlessRegistration
     *
     * @param bool|null $requestPasswordlessRegistration If this is set to true, you will get a link for the passwordless/passkey registration in the response.
     *
     * @return self
     */
    public function setRequestPasswordlessRegistration($requestPasswordlessRegistration)
    {
        if (is_null($requestPasswordlessRegistration)) {
            throw new \InvalidArgumentException('non-nullable requestPasswordlessRegistration cannot be null');
        }
        $this->container['requestPasswordlessRegistration'] = $requestPasswordlessRegistration;

        return $this;
    }

    /**
     * Gets otpCode
     *
     * @return string|null
     */
    public function getOtpCode()
    {
        return $this->container['otpCode'];
    }

    /**
     * Sets otpCode
     *
     * @param string|null $otpCode otpCode
     *
     * @return self
     */
    public function setOtpCode($otpCode)
    {
        if (is_null($otpCode)) {
            throw new \InvalidArgumentException('non-nullable otpCode cannot be null');
        }
        $this->container['otpCode'] = $otpCode;

        return $this;
    }

    /**
     * Gets idps
     *
     * @return \ArthurHlt\Zitadel\Model\V1ImportHumanUserRequestIDP[]|null
     */
    public function getIdps()
    {
        return $this->container['idps'];
    }

    /**
     * Sets idps
     *
     * @param \ArthurHlt\Zitadel\Model\V1ImportHumanUserRequestIDP[]|null $idps To link your user directly with an external identity provider (Identity brokering)
     *
     * @return self
     */
    public function setIdps($idps)
    {
        if (is_null($idps)) {
            throw new \InvalidArgumentException('non-nullable idps cannot be null');
        }
        $this->container['idps'] = $idps;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


