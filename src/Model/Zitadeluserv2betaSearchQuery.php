<?php
/**
 * Zitadeluserv2betaSearchQuery
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ArthurHlt\Zitadel\Model;

use \ArrayAccess;
use \ArthurHlt\Zitadel\ObjectSerializer;

/**
 * Zitadeluserv2betaSearchQuery Class Doc Comment
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Zitadeluserv2betaSearchQuery implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'zitadeluserv2betaSearchQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'userNameQuery' => '\ArthurHlt\Zitadel\Model\Userv2betaUserNameQuery',
        'firstNameQuery' => '\ArthurHlt\Zitadel\Model\Userv2betaFirstNameQuery',
        'lastNameQuery' => '\ArthurHlt\Zitadel\Model\Userv2betaLastNameQuery',
        'nickNameQuery' => '\ArthurHlt\Zitadel\Model\Userv2betaNickNameQuery',
        'displayNameQuery' => '\ArthurHlt\Zitadel\Model\Userv2betaDisplayNameQuery',
        'emailQuery' => '\ArthurHlt\Zitadel\Model\Userv2betaEmailQuery',
        'stateQuery' => '\ArthurHlt\Zitadel\Model\Userv2betaStateQuery',
        'typeQuery' => '\ArthurHlt\Zitadel\Model\Userv2betaTypeQuery',
        'loginNameQuery' => '\ArthurHlt\Zitadel\Model\Userv2betaLoginNameQuery',
        'inUserIdsQuery' => '\ArthurHlt\Zitadel\Model\Userv2betaInUserIDQuery',
        'orQuery' => '\ArthurHlt\Zitadel\Model\Userv2betaOrQuery',
        'andQuery' => '\ArthurHlt\Zitadel\Model\Userv2betaAndQuery',
        'notQuery' => '\ArthurHlt\Zitadel\Model\Userv2betaNotQuery',
        'inUserEmailsQuery' => '\ArthurHlt\Zitadel\Model\Userv2betaInUserEmailsQuery',
        'organizationIdQuery' => '\ArthurHlt\Zitadel\Model\Userv2betaOrganizationIdQuery',
        'phoneQuery' => '\ArthurHlt\Zitadel\Model\Userv2betaPhoneQuery'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'userNameQuery' => null,
        'firstNameQuery' => null,
        'lastNameQuery' => null,
        'nickNameQuery' => null,
        'displayNameQuery' => null,
        'emailQuery' => null,
        'stateQuery' => null,
        'typeQuery' => null,
        'loginNameQuery' => null,
        'inUserIdsQuery' => null,
        'orQuery' => null,
        'andQuery' => null,
        'notQuery' => null,
        'inUserEmailsQuery' => null,
        'organizationIdQuery' => null,
        'phoneQuery' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'userNameQuery' => false,
        'firstNameQuery' => false,
        'lastNameQuery' => false,
        'nickNameQuery' => false,
        'displayNameQuery' => false,
        'emailQuery' => false,
        'stateQuery' => false,
        'typeQuery' => false,
        'loginNameQuery' => false,
        'inUserIdsQuery' => false,
        'orQuery' => false,
        'andQuery' => false,
        'notQuery' => false,
        'inUserEmailsQuery' => false,
        'organizationIdQuery' => false,
        'phoneQuery' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'userNameQuery' => 'userNameQuery',
        'firstNameQuery' => 'firstNameQuery',
        'lastNameQuery' => 'lastNameQuery',
        'nickNameQuery' => 'nickNameQuery',
        'displayNameQuery' => 'displayNameQuery',
        'emailQuery' => 'emailQuery',
        'stateQuery' => 'stateQuery',
        'typeQuery' => 'typeQuery',
        'loginNameQuery' => 'loginNameQuery',
        'inUserIdsQuery' => 'inUserIdsQuery',
        'orQuery' => 'orQuery',
        'andQuery' => 'andQuery',
        'notQuery' => 'notQuery',
        'inUserEmailsQuery' => 'inUserEmailsQuery',
        'organizationIdQuery' => 'organizationIdQuery',
        'phoneQuery' => 'phoneQuery'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'userNameQuery' => 'setUserNameQuery',
        'firstNameQuery' => 'setFirstNameQuery',
        'lastNameQuery' => 'setLastNameQuery',
        'nickNameQuery' => 'setNickNameQuery',
        'displayNameQuery' => 'setDisplayNameQuery',
        'emailQuery' => 'setEmailQuery',
        'stateQuery' => 'setStateQuery',
        'typeQuery' => 'setTypeQuery',
        'loginNameQuery' => 'setLoginNameQuery',
        'inUserIdsQuery' => 'setInUserIdsQuery',
        'orQuery' => 'setOrQuery',
        'andQuery' => 'setAndQuery',
        'notQuery' => 'setNotQuery',
        'inUserEmailsQuery' => 'setInUserEmailsQuery',
        'organizationIdQuery' => 'setOrganizationIdQuery',
        'phoneQuery' => 'setPhoneQuery'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'userNameQuery' => 'getUserNameQuery',
        'firstNameQuery' => 'getFirstNameQuery',
        'lastNameQuery' => 'getLastNameQuery',
        'nickNameQuery' => 'getNickNameQuery',
        'displayNameQuery' => 'getDisplayNameQuery',
        'emailQuery' => 'getEmailQuery',
        'stateQuery' => 'getStateQuery',
        'typeQuery' => 'getTypeQuery',
        'loginNameQuery' => 'getLoginNameQuery',
        'inUserIdsQuery' => 'getInUserIdsQuery',
        'orQuery' => 'getOrQuery',
        'andQuery' => 'getAndQuery',
        'notQuery' => 'getNotQuery',
        'inUserEmailsQuery' => 'getInUserEmailsQuery',
        'organizationIdQuery' => 'getOrganizationIdQuery',
        'phoneQuery' => 'getPhoneQuery'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('userNameQuery', $data ?? [], null);
        $this->setIfExists('firstNameQuery', $data ?? [], null);
        $this->setIfExists('lastNameQuery', $data ?? [], null);
        $this->setIfExists('nickNameQuery', $data ?? [], null);
        $this->setIfExists('displayNameQuery', $data ?? [], null);
        $this->setIfExists('emailQuery', $data ?? [], null);
        $this->setIfExists('stateQuery', $data ?? [], null);
        $this->setIfExists('typeQuery', $data ?? [], null);
        $this->setIfExists('loginNameQuery', $data ?? [], null);
        $this->setIfExists('inUserIdsQuery', $data ?? [], null);
        $this->setIfExists('orQuery', $data ?? [], null);
        $this->setIfExists('andQuery', $data ?? [], null);
        $this->setIfExists('notQuery', $data ?? [], null);
        $this->setIfExists('inUserEmailsQuery', $data ?? [], null);
        $this->setIfExists('organizationIdQuery', $data ?? [], null);
        $this->setIfExists('phoneQuery', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets userNameQuery
     *
     * @return \ArthurHlt\Zitadel\Model\Userv2betaUserNameQuery|null
     */
    public function getUserNameQuery()
    {
        return $this->container['userNameQuery'];
    }

    /**
     * Sets userNameQuery
     *
     * @param \ArthurHlt\Zitadel\Model\Userv2betaUserNameQuery|null $userNameQuery userNameQuery
     *
     * @return self
     */
    public function setUserNameQuery($userNameQuery)
    {
        if (is_null($userNameQuery)) {
            throw new \InvalidArgumentException('non-nullable userNameQuery cannot be null');
        }
        $this->container['userNameQuery'] = $userNameQuery;

        return $this;
    }

    /**
     * Gets firstNameQuery
     *
     * @return \ArthurHlt\Zitadel\Model\Userv2betaFirstNameQuery|null
     */
    public function getFirstNameQuery()
    {
        return $this->container['firstNameQuery'];
    }

    /**
     * Sets firstNameQuery
     *
     * @param \ArthurHlt\Zitadel\Model\Userv2betaFirstNameQuery|null $firstNameQuery firstNameQuery
     *
     * @return self
     */
    public function setFirstNameQuery($firstNameQuery)
    {
        if (is_null($firstNameQuery)) {
            throw new \InvalidArgumentException('non-nullable firstNameQuery cannot be null');
        }
        $this->container['firstNameQuery'] = $firstNameQuery;

        return $this;
    }

    /**
     * Gets lastNameQuery
     *
     * @return \ArthurHlt\Zitadel\Model\Userv2betaLastNameQuery|null
     */
    public function getLastNameQuery()
    {
        return $this->container['lastNameQuery'];
    }

    /**
     * Sets lastNameQuery
     *
     * @param \ArthurHlt\Zitadel\Model\Userv2betaLastNameQuery|null $lastNameQuery lastNameQuery
     *
     * @return self
     */
    public function setLastNameQuery($lastNameQuery)
    {
        if (is_null($lastNameQuery)) {
            throw new \InvalidArgumentException('non-nullable lastNameQuery cannot be null');
        }
        $this->container['lastNameQuery'] = $lastNameQuery;

        return $this;
    }

    /**
     * Gets nickNameQuery
     *
     * @return \ArthurHlt\Zitadel\Model\Userv2betaNickNameQuery|null
     */
    public function getNickNameQuery()
    {
        return $this->container['nickNameQuery'];
    }

    /**
     * Sets nickNameQuery
     *
     * @param \ArthurHlt\Zitadel\Model\Userv2betaNickNameQuery|null $nickNameQuery nickNameQuery
     *
     * @return self
     */
    public function setNickNameQuery($nickNameQuery)
    {
        if (is_null($nickNameQuery)) {
            throw new \InvalidArgumentException('non-nullable nickNameQuery cannot be null');
        }
        $this->container['nickNameQuery'] = $nickNameQuery;

        return $this;
    }

    /**
     * Gets displayNameQuery
     *
     * @return \ArthurHlt\Zitadel\Model\Userv2betaDisplayNameQuery|null
     */
    public function getDisplayNameQuery()
    {
        return $this->container['displayNameQuery'];
    }

    /**
     * Sets displayNameQuery
     *
     * @param \ArthurHlt\Zitadel\Model\Userv2betaDisplayNameQuery|null $displayNameQuery displayNameQuery
     *
     * @return self
     */
    public function setDisplayNameQuery($displayNameQuery)
    {
        if (is_null($displayNameQuery)) {
            throw new \InvalidArgumentException('non-nullable displayNameQuery cannot be null');
        }
        $this->container['displayNameQuery'] = $displayNameQuery;

        return $this;
    }

    /**
     * Gets emailQuery
     *
     * @return \ArthurHlt\Zitadel\Model\Userv2betaEmailQuery|null
     */
    public function getEmailQuery()
    {
        return $this->container['emailQuery'];
    }

    /**
     * Sets emailQuery
     *
     * @param \ArthurHlt\Zitadel\Model\Userv2betaEmailQuery|null $emailQuery emailQuery
     *
     * @return self
     */
    public function setEmailQuery($emailQuery)
    {
        if (is_null($emailQuery)) {
            throw new \InvalidArgumentException('non-nullable emailQuery cannot be null');
        }
        $this->container['emailQuery'] = $emailQuery;

        return $this;
    }

    /**
     * Gets stateQuery
     *
     * @return \ArthurHlt\Zitadel\Model\Userv2betaStateQuery|null
     */
    public function getStateQuery()
    {
        return $this->container['stateQuery'];
    }

    /**
     * Sets stateQuery
     *
     * @param \ArthurHlt\Zitadel\Model\Userv2betaStateQuery|null $stateQuery stateQuery
     *
     * @return self
     */
    public function setStateQuery($stateQuery)
    {
        if (is_null($stateQuery)) {
            throw new \InvalidArgumentException('non-nullable stateQuery cannot be null');
        }
        $this->container['stateQuery'] = $stateQuery;

        return $this;
    }

    /**
     * Gets typeQuery
     *
     * @return \ArthurHlt\Zitadel\Model\Userv2betaTypeQuery|null
     */
    public function getTypeQuery()
    {
        return $this->container['typeQuery'];
    }

    /**
     * Sets typeQuery
     *
     * @param \ArthurHlt\Zitadel\Model\Userv2betaTypeQuery|null $typeQuery typeQuery
     *
     * @return self
     */
    public function setTypeQuery($typeQuery)
    {
        if (is_null($typeQuery)) {
            throw new \InvalidArgumentException('non-nullable typeQuery cannot be null');
        }
        $this->container['typeQuery'] = $typeQuery;

        return $this;
    }

    /**
     * Gets loginNameQuery
     *
     * @return \ArthurHlt\Zitadel\Model\Userv2betaLoginNameQuery|null
     */
    public function getLoginNameQuery()
    {
        return $this->container['loginNameQuery'];
    }

    /**
     * Sets loginNameQuery
     *
     * @param \ArthurHlt\Zitadel\Model\Userv2betaLoginNameQuery|null $loginNameQuery loginNameQuery
     *
     * @return self
     */
    public function setLoginNameQuery($loginNameQuery)
    {
        if (is_null($loginNameQuery)) {
            throw new \InvalidArgumentException('non-nullable loginNameQuery cannot be null');
        }
        $this->container['loginNameQuery'] = $loginNameQuery;

        return $this;
    }

    /**
     * Gets inUserIdsQuery
     *
     * @return \ArthurHlt\Zitadel\Model\Userv2betaInUserIDQuery|null
     */
    public function getInUserIdsQuery()
    {
        return $this->container['inUserIdsQuery'];
    }

    /**
     * Sets inUserIdsQuery
     *
     * @param \ArthurHlt\Zitadel\Model\Userv2betaInUserIDQuery|null $inUserIdsQuery inUserIdsQuery
     *
     * @return self
     */
    public function setInUserIdsQuery($inUserIdsQuery)
    {
        if (is_null($inUserIdsQuery)) {
            throw new \InvalidArgumentException('non-nullable inUserIdsQuery cannot be null');
        }
        $this->container['inUserIdsQuery'] = $inUserIdsQuery;

        return $this;
    }

    /**
     * Gets orQuery
     *
     * @return \ArthurHlt\Zitadel\Model\Userv2betaOrQuery|null
     */
    public function getOrQuery()
    {
        return $this->container['orQuery'];
    }

    /**
     * Sets orQuery
     *
     * @param \ArthurHlt\Zitadel\Model\Userv2betaOrQuery|null $orQuery orQuery
     *
     * @return self
     */
    public function setOrQuery($orQuery)
    {
        if (is_null($orQuery)) {
            throw new \InvalidArgumentException('non-nullable orQuery cannot be null');
        }
        $this->container['orQuery'] = $orQuery;

        return $this;
    }

    /**
     * Gets andQuery
     *
     * @return \ArthurHlt\Zitadel\Model\Userv2betaAndQuery|null
     */
    public function getAndQuery()
    {
        return $this->container['andQuery'];
    }

    /**
     * Sets andQuery
     *
     * @param \ArthurHlt\Zitadel\Model\Userv2betaAndQuery|null $andQuery andQuery
     *
     * @return self
     */
    public function setAndQuery($andQuery)
    {
        if (is_null($andQuery)) {
            throw new \InvalidArgumentException('non-nullable andQuery cannot be null');
        }
        $this->container['andQuery'] = $andQuery;

        return $this;
    }

    /**
     * Gets notQuery
     *
     * @return \ArthurHlt\Zitadel\Model\Userv2betaNotQuery|null
     */
    public function getNotQuery()
    {
        return $this->container['notQuery'];
    }

    /**
     * Sets notQuery
     *
     * @param \ArthurHlt\Zitadel\Model\Userv2betaNotQuery|null $notQuery notQuery
     *
     * @return self
     */
    public function setNotQuery($notQuery)
    {
        if (is_null($notQuery)) {
            throw new \InvalidArgumentException('non-nullable notQuery cannot be null');
        }
        $this->container['notQuery'] = $notQuery;

        return $this;
    }

    /**
     * Gets inUserEmailsQuery
     *
     * @return \ArthurHlt\Zitadel\Model\Userv2betaInUserEmailsQuery|null
     */
    public function getInUserEmailsQuery()
    {
        return $this->container['inUserEmailsQuery'];
    }

    /**
     * Sets inUserEmailsQuery
     *
     * @param \ArthurHlt\Zitadel\Model\Userv2betaInUserEmailsQuery|null $inUserEmailsQuery inUserEmailsQuery
     *
     * @return self
     */
    public function setInUserEmailsQuery($inUserEmailsQuery)
    {
        if (is_null($inUserEmailsQuery)) {
            throw new \InvalidArgumentException('non-nullable inUserEmailsQuery cannot be null');
        }
        $this->container['inUserEmailsQuery'] = $inUserEmailsQuery;

        return $this;
    }

    /**
     * Gets organizationIdQuery
     *
     * @return \ArthurHlt\Zitadel\Model\Userv2betaOrganizationIdQuery|null
     */
    public function getOrganizationIdQuery()
    {
        return $this->container['organizationIdQuery'];
    }

    /**
     * Sets organizationIdQuery
     *
     * @param \ArthurHlt\Zitadel\Model\Userv2betaOrganizationIdQuery|null $organizationIdQuery organizationIdQuery
     *
     * @return self
     */
    public function setOrganizationIdQuery($organizationIdQuery)
    {
        if (is_null($organizationIdQuery)) {
            throw new \InvalidArgumentException('non-nullable organizationIdQuery cannot be null');
        }
        $this->container['organizationIdQuery'] = $organizationIdQuery;

        return $this;
    }

    /**
     * Gets phoneQuery
     *
     * @return \ArthurHlt\Zitadel\Model\Userv2betaPhoneQuery|null
     */
    public function getPhoneQuery()
    {
        return $this->container['phoneQuery'];
    }

    /**
     * Sets phoneQuery
     *
     * @param \ArthurHlt\Zitadel\Model\Userv2betaPhoneQuery|null $phoneQuery phoneQuery
     *
     * @return self
     */
    public function setPhoneQuery($phoneQuery)
    {
        if (is_null($phoneQuery)) {
            throw new \InvalidArgumentException('non-nullable phoneQuery cannot be null');
        }
        $this->container['phoneQuery'] = $phoneQuery;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


