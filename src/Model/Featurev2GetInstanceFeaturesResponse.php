<?php
/**
 * Featurev2GetInstanceFeaturesResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ArthurHlt\Zitadel\Model;

use \ArrayAccess;
use \ArthurHlt\Zitadel\ObjectSerializer;

/**
 * Featurev2GetInstanceFeaturesResponse Class Doc Comment
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Featurev2GetInstanceFeaturesResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'featurev2GetInstanceFeaturesResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'details' => '\ArthurHlt\Zitadel\Model\Objectv2Details',
        'loginDefaultOrg' => '\ArthurHlt\Zitadel\Model\Featurev2FeatureFlag',
        'oidcTriggerIntrospectionProjections' => '\ArthurHlt\Zitadel\Model\Featurev2FeatureFlag',
        'oidcLegacyIntrospection' => '\ArthurHlt\Zitadel\Model\Featurev2FeatureFlag',
        'userSchema' => '\ArthurHlt\Zitadel\Model\Featurev2FeatureFlag',
        'oidcTokenExchange' => '\ArthurHlt\Zitadel\Model\Featurev2FeatureFlag',
        'actions' => '\ArthurHlt\Zitadel\Model\Featurev2FeatureFlag',
        'improvedPerformance' => '\ArthurHlt\Zitadel\Model\Featurev2ImprovedPerformanceFeatureFlag',
        'webKey' => '\ArthurHlt\Zitadel\Model\Featurev2FeatureFlag',
        'debugOidcParentError' => '\ArthurHlt\Zitadel\Model\Featurev2FeatureFlag',
        'oidcSingleV1SessionTermination' => '\ArthurHlt\Zitadel\Model\Featurev2FeatureFlag',
        'disableUserTokenEvent' => '\ArthurHlt\Zitadel\Model\Featurev2FeatureFlag',
        'enableBackChannelLogout' => '\ArthurHlt\Zitadel\Model\Featurev2FeatureFlag',
        'loginV2' => '\ArthurHlt\Zitadel\Model\V2LoginV2FeatureFlag',
        'permissionCheckV2' => '\ArthurHlt\Zitadel\Model\Featurev2FeatureFlag',
        'consoleUseV2UserApi' => '\ArthurHlt\Zitadel\Model\Featurev2FeatureFlag'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'details' => null,
        'loginDefaultOrg' => null,
        'oidcTriggerIntrospectionProjections' => null,
        'oidcLegacyIntrospection' => null,
        'userSchema' => null,
        'oidcTokenExchange' => null,
        'actions' => null,
        'improvedPerformance' => null,
        'webKey' => null,
        'debugOidcParentError' => null,
        'oidcSingleV1SessionTermination' => null,
        'disableUserTokenEvent' => null,
        'enableBackChannelLogout' => null,
        'loginV2' => null,
        'permissionCheckV2' => null,
        'consoleUseV2UserApi' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'details' => false,
        'loginDefaultOrg' => false,
        'oidcTriggerIntrospectionProjections' => false,
        'oidcLegacyIntrospection' => false,
        'userSchema' => false,
        'oidcTokenExchange' => false,
        'actions' => false,
        'improvedPerformance' => false,
        'webKey' => false,
        'debugOidcParentError' => false,
        'oidcSingleV1SessionTermination' => false,
        'disableUserTokenEvent' => false,
        'enableBackChannelLogout' => false,
        'loginV2' => false,
        'permissionCheckV2' => false,
        'consoleUseV2UserApi' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'details' => 'details',
        'loginDefaultOrg' => 'loginDefaultOrg',
        'oidcTriggerIntrospectionProjections' => 'oidcTriggerIntrospectionProjections',
        'oidcLegacyIntrospection' => 'oidcLegacyIntrospection',
        'userSchema' => 'userSchema',
        'oidcTokenExchange' => 'oidcTokenExchange',
        'actions' => 'actions',
        'improvedPerformance' => 'improvedPerformance',
        'webKey' => 'webKey',
        'debugOidcParentError' => 'debugOidcParentError',
        'oidcSingleV1SessionTermination' => 'oidcSingleV1SessionTermination',
        'disableUserTokenEvent' => 'disableUserTokenEvent',
        'enableBackChannelLogout' => 'enableBackChannelLogout',
        'loginV2' => 'loginV2',
        'permissionCheckV2' => 'permissionCheckV2',
        'consoleUseV2UserApi' => 'consoleUseV2UserApi'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'details' => 'setDetails',
        'loginDefaultOrg' => 'setLoginDefaultOrg',
        'oidcTriggerIntrospectionProjections' => 'setOidcTriggerIntrospectionProjections',
        'oidcLegacyIntrospection' => 'setOidcLegacyIntrospection',
        'userSchema' => 'setUserSchema',
        'oidcTokenExchange' => 'setOidcTokenExchange',
        'actions' => 'setActions',
        'improvedPerformance' => 'setImprovedPerformance',
        'webKey' => 'setWebKey',
        'debugOidcParentError' => 'setDebugOidcParentError',
        'oidcSingleV1SessionTermination' => 'setOidcSingleV1SessionTermination',
        'disableUserTokenEvent' => 'setDisableUserTokenEvent',
        'enableBackChannelLogout' => 'setEnableBackChannelLogout',
        'loginV2' => 'setLoginV2',
        'permissionCheckV2' => 'setPermissionCheckV2',
        'consoleUseV2UserApi' => 'setConsoleUseV2UserApi'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'details' => 'getDetails',
        'loginDefaultOrg' => 'getLoginDefaultOrg',
        'oidcTriggerIntrospectionProjections' => 'getOidcTriggerIntrospectionProjections',
        'oidcLegacyIntrospection' => 'getOidcLegacyIntrospection',
        'userSchema' => 'getUserSchema',
        'oidcTokenExchange' => 'getOidcTokenExchange',
        'actions' => 'getActions',
        'improvedPerformance' => 'getImprovedPerformance',
        'webKey' => 'getWebKey',
        'debugOidcParentError' => 'getDebugOidcParentError',
        'oidcSingleV1SessionTermination' => 'getOidcSingleV1SessionTermination',
        'disableUserTokenEvent' => 'getDisableUserTokenEvent',
        'enableBackChannelLogout' => 'getEnableBackChannelLogout',
        'loginV2' => 'getLoginV2',
        'permissionCheckV2' => 'getPermissionCheckV2',
        'consoleUseV2UserApi' => 'getConsoleUseV2UserApi'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('details', $data ?? [], null);
        $this->setIfExists('loginDefaultOrg', $data ?? [], null);
        $this->setIfExists('oidcTriggerIntrospectionProjections', $data ?? [], null);
        $this->setIfExists('oidcLegacyIntrospection', $data ?? [], null);
        $this->setIfExists('userSchema', $data ?? [], null);
        $this->setIfExists('oidcTokenExchange', $data ?? [], null);
        $this->setIfExists('actions', $data ?? [], null);
        $this->setIfExists('improvedPerformance', $data ?? [], null);
        $this->setIfExists('webKey', $data ?? [], null);
        $this->setIfExists('debugOidcParentError', $data ?? [], null);
        $this->setIfExists('oidcSingleV1SessionTermination', $data ?? [], null);
        $this->setIfExists('disableUserTokenEvent', $data ?? [], null);
        $this->setIfExists('enableBackChannelLogout', $data ?? [], null);
        $this->setIfExists('loginV2', $data ?? [], null);
        $this->setIfExists('permissionCheckV2', $data ?? [], null);
        $this->setIfExists('consoleUseV2UserApi', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets details
     *
     * @return \ArthurHlt\Zitadel\Model\Objectv2Details|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \ArthurHlt\Zitadel\Model\Objectv2Details|null $details details
     *
     * @return self
     */
    public function setDetails($details)
    {
        if (is_null($details)) {
            throw new \InvalidArgumentException('non-nullable details cannot be null');
        }
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets loginDefaultOrg
     *
     * @return \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null
     */
    public function getLoginDefaultOrg()
    {
        return $this->container['loginDefaultOrg'];
    }

    /**
     * Sets loginDefaultOrg
     *
     * @param \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null $loginDefaultOrg loginDefaultOrg
     *
     * @return self
     */
    public function setLoginDefaultOrg($loginDefaultOrg)
    {
        if (is_null($loginDefaultOrg)) {
            throw new \InvalidArgumentException('non-nullable loginDefaultOrg cannot be null');
        }
        $this->container['loginDefaultOrg'] = $loginDefaultOrg;

        return $this;
    }

    /**
     * Gets oidcTriggerIntrospectionProjections
     *
     * @return \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null
     */
    public function getOidcTriggerIntrospectionProjections()
    {
        return $this->container['oidcTriggerIntrospectionProjections'];
    }

    /**
     * Sets oidcTriggerIntrospectionProjections
     *
     * @param \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null $oidcTriggerIntrospectionProjections oidcTriggerIntrospectionProjections
     *
     * @return self
     */
    public function setOidcTriggerIntrospectionProjections($oidcTriggerIntrospectionProjections)
    {
        if (is_null($oidcTriggerIntrospectionProjections)) {
            throw new \InvalidArgumentException('non-nullable oidcTriggerIntrospectionProjections cannot be null');
        }
        $this->container['oidcTriggerIntrospectionProjections'] = $oidcTriggerIntrospectionProjections;

        return $this;
    }

    /**
     * Gets oidcLegacyIntrospection
     *
     * @return \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null
     */
    public function getOidcLegacyIntrospection()
    {
        return $this->container['oidcLegacyIntrospection'];
    }

    /**
     * Sets oidcLegacyIntrospection
     *
     * @param \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null $oidcLegacyIntrospection oidcLegacyIntrospection
     *
     * @return self
     */
    public function setOidcLegacyIntrospection($oidcLegacyIntrospection)
    {
        if (is_null($oidcLegacyIntrospection)) {
            throw new \InvalidArgumentException('non-nullable oidcLegacyIntrospection cannot be null');
        }
        $this->container['oidcLegacyIntrospection'] = $oidcLegacyIntrospection;

        return $this;
    }

    /**
     * Gets userSchema
     *
     * @return \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null
     */
    public function getUserSchema()
    {
        return $this->container['userSchema'];
    }

    /**
     * Sets userSchema
     *
     * @param \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null $userSchema userSchema
     *
     * @return self
     */
    public function setUserSchema($userSchema)
    {
        if (is_null($userSchema)) {
            throw new \InvalidArgumentException('non-nullable userSchema cannot be null');
        }
        $this->container['userSchema'] = $userSchema;

        return $this;
    }

    /**
     * Gets oidcTokenExchange
     *
     * @return \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null
     */
    public function getOidcTokenExchange()
    {
        return $this->container['oidcTokenExchange'];
    }

    /**
     * Sets oidcTokenExchange
     *
     * @param \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null $oidcTokenExchange oidcTokenExchange
     *
     * @return self
     */
    public function setOidcTokenExchange($oidcTokenExchange)
    {
        if (is_null($oidcTokenExchange)) {
            throw new \InvalidArgumentException('non-nullable oidcTokenExchange cannot be null');
        }
        $this->container['oidcTokenExchange'] = $oidcTokenExchange;

        return $this;
    }

    /**
     * Gets actions
     *
     * @return \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     *
     * @param \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null $actions actions
     *
     * @return self
     */
    public function setActions($actions)
    {
        if (is_null($actions)) {
            throw new \InvalidArgumentException('non-nullable actions cannot be null');
        }
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets improvedPerformance
     *
     * @return \ArthurHlt\Zitadel\Model\Featurev2ImprovedPerformanceFeatureFlag|null
     */
    public function getImprovedPerformance()
    {
        return $this->container['improvedPerformance'];
    }

    /**
     * Sets improvedPerformance
     *
     * @param \ArthurHlt\Zitadel\Model\Featurev2ImprovedPerformanceFeatureFlag|null $improvedPerformance improvedPerformance
     *
     * @return self
     */
    public function setImprovedPerformance($improvedPerformance)
    {
        if (is_null($improvedPerformance)) {
            throw new \InvalidArgumentException('non-nullable improvedPerformance cannot be null');
        }
        $this->container['improvedPerformance'] = $improvedPerformance;

        return $this;
    }

    /**
     * Gets webKey
     *
     * @return \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null
     */
    public function getWebKey()
    {
        return $this->container['webKey'];
    }

    /**
     * Sets webKey
     *
     * @param \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null $webKey webKey
     *
     * @return self
     */
    public function setWebKey($webKey)
    {
        if (is_null($webKey)) {
            throw new \InvalidArgumentException('non-nullable webKey cannot be null');
        }
        $this->container['webKey'] = $webKey;

        return $this;
    }

    /**
     * Gets debugOidcParentError
     *
     * @return \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null
     */
    public function getDebugOidcParentError()
    {
        return $this->container['debugOidcParentError'];
    }

    /**
     * Sets debugOidcParentError
     *
     * @param \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null $debugOidcParentError debugOidcParentError
     *
     * @return self
     */
    public function setDebugOidcParentError($debugOidcParentError)
    {
        if (is_null($debugOidcParentError)) {
            throw new \InvalidArgumentException('non-nullable debugOidcParentError cannot be null');
        }
        $this->container['debugOidcParentError'] = $debugOidcParentError;

        return $this;
    }

    /**
     * Gets oidcSingleV1SessionTermination
     *
     * @return \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null
     */
    public function getOidcSingleV1SessionTermination()
    {
        return $this->container['oidcSingleV1SessionTermination'];
    }

    /**
     * Sets oidcSingleV1SessionTermination
     *
     * @param \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null $oidcSingleV1SessionTermination oidcSingleV1SessionTermination
     *
     * @return self
     */
    public function setOidcSingleV1SessionTermination($oidcSingleV1SessionTermination)
    {
        if (is_null($oidcSingleV1SessionTermination)) {
            throw new \InvalidArgumentException('non-nullable oidcSingleV1SessionTermination cannot be null');
        }
        $this->container['oidcSingleV1SessionTermination'] = $oidcSingleV1SessionTermination;

        return $this;
    }

    /**
     * Gets disableUserTokenEvent
     *
     * @return \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null
     */
    public function getDisableUserTokenEvent()
    {
        return $this->container['disableUserTokenEvent'];
    }

    /**
     * Sets disableUserTokenEvent
     *
     * @param \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null $disableUserTokenEvent disableUserTokenEvent
     *
     * @return self
     */
    public function setDisableUserTokenEvent($disableUserTokenEvent)
    {
        if (is_null($disableUserTokenEvent)) {
            throw new \InvalidArgumentException('non-nullable disableUserTokenEvent cannot be null');
        }
        $this->container['disableUserTokenEvent'] = $disableUserTokenEvent;

        return $this;
    }

    /**
     * Gets enableBackChannelLogout
     *
     * @return \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null
     */
    public function getEnableBackChannelLogout()
    {
        return $this->container['enableBackChannelLogout'];
    }

    /**
     * Sets enableBackChannelLogout
     *
     * @param \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null $enableBackChannelLogout enableBackChannelLogout
     *
     * @return self
     */
    public function setEnableBackChannelLogout($enableBackChannelLogout)
    {
        if (is_null($enableBackChannelLogout)) {
            throw new \InvalidArgumentException('non-nullable enableBackChannelLogout cannot be null');
        }
        $this->container['enableBackChannelLogout'] = $enableBackChannelLogout;

        return $this;
    }

    /**
     * Gets loginV2
     *
     * @return \ArthurHlt\Zitadel\Model\V2LoginV2FeatureFlag|null
     */
    public function getLoginV2()
    {
        return $this->container['loginV2'];
    }

    /**
     * Sets loginV2
     *
     * @param \ArthurHlt\Zitadel\Model\V2LoginV2FeatureFlag|null $loginV2 loginV2
     *
     * @return self
     */
    public function setLoginV2($loginV2)
    {
        if (is_null($loginV2)) {
            throw new \InvalidArgumentException('non-nullable loginV2 cannot be null');
        }
        $this->container['loginV2'] = $loginV2;

        return $this;
    }

    /**
     * Gets permissionCheckV2
     *
     * @return \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null
     */
    public function getPermissionCheckV2()
    {
        return $this->container['permissionCheckV2'];
    }

    /**
     * Sets permissionCheckV2
     *
     * @param \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null $permissionCheckV2 permissionCheckV2
     *
     * @return self
     */
    public function setPermissionCheckV2($permissionCheckV2)
    {
        if (is_null($permissionCheckV2)) {
            throw new \InvalidArgumentException('non-nullable permissionCheckV2 cannot be null');
        }
        $this->container['permissionCheckV2'] = $permissionCheckV2;

        return $this;
    }

    /**
     * Gets consoleUseV2UserApi
     *
     * @return \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null
     */
    public function getConsoleUseV2UserApi()
    {
        return $this->container['consoleUseV2UserApi'];
    }

    /**
     * Sets consoleUseV2UserApi
     *
     * @param \ArthurHlt\Zitadel\Model\Featurev2FeatureFlag|null $consoleUseV2UserApi consoleUseV2UserApi
     *
     * @return self
     */
    public function setConsoleUseV2UserApi($consoleUseV2UserApi)
    {
        if (is_null($consoleUseV2UserApi)) {
            throw new \InvalidArgumentException('non-nullable consoleUseV2UserApi cannot be null');
        }
        $this->container['consoleUseV2UserApi'] = $consoleUseV2UserApi;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


