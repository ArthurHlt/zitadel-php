<?php
/**
 * Zitadelauthv1UserGrant
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ArthurHlt\Zitadel\Model;

use \ArrayAccess;
use \ArthurHlt\Zitadel\ObjectSerializer;

/**
 * Zitadelauthv1UserGrant Class Doc Comment
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Zitadelauthv1UserGrant implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'zitadelauthv1UserGrant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'orgId' => 'string',
        'projectId' => 'string',
        'userId' => 'string',
        'roles' => 'string[]',
        'orgName' => 'string',
        'grantId' => 'string',
        'details' => '\ArthurHlt\Zitadel\Model\V1ObjectDetails',
        'orgDomain' => 'string',
        'projectName' => 'string',
        'projectGrantId' => 'string',
        'roleKeys' => 'string[]',
        'userType' => '\ArthurHlt\Zitadel\Model\Userv1Type',
        'state' => '\ArthurHlt\Zitadel\Model\V1UserGrantState'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'orgId' => null,
        'projectId' => null,
        'userId' => null,
        'roles' => null,
        'orgName' => null,
        'grantId' => null,
        'details' => null,
        'orgDomain' => null,
        'projectName' => null,
        'projectGrantId' => null,
        'roleKeys' => null,
        'userType' => null,
        'state' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'orgId' => false,
        'projectId' => false,
        'userId' => false,
        'roles' => false,
        'orgName' => false,
        'grantId' => false,
        'details' => false,
        'orgDomain' => false,
        'projectName' => false,
        'projectGrantId' => false,
        'roleKeys' => false,
        'userType' => false,
        'state' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orgId' => 'orgId',
        'projectId' => 'projectId',
        'userId' => 'userId',
        'roles' => 'roles',
        'orgName' => 'orgName',
        'grantId' => 'grantId',
        'details' => 'details',
        'orgDomain' => 'orgDomain',
        'projectName' => 'projectName',
        'projectGrantId' => 'projectGrantId',
        'roleKeys' => 'roleKeys',
        'userType' => 'userType',
        'state' => 'state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'orgId' => 'setOrgId',
        'projectId' => 'setProjectId',
        'userId' => 'setUserId',
        'roles' => 'setRoles',
        'orgName' => 'setOrgName',
        'grantId' => 'setGrantId',
        'details' => 'setDetails',
        'orgDomain' => 'setOrgDomain',
        'projectName' => 'setProjectName',
        'projectGrantId' => 'setProjectGrantId',
        'roleKeys' => 'setRoleKeys',
        'userType' => 'setUserType',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'orgId' => 'getOrgId',
        'projectId' => 'getProjectId',
        'userId' => 'getUserId',
        'roles' => 'getRoles',
        'orgName' => 'getOrgName',
        'grantId' => 'getGrantId',
        'details' => 'getDetails',
        'orgDomain' => 'getOrgDomain',
        'projectName' => 'getProjectName',
        'projectGrantId' => 'getProjectGrantId',
        'roleKeys' => 'getRoleKeys',
        'userType' => 'getUserType',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('orgId', $data ?? [], null);
        $this->setIfExists('projectId', $data ?? [], null);
        $this->setIfExists('userId', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('orgName', $data ?? [], null);
        $this->setIfExists('grantId', $data ?? [], null);
        $this->setIfExists('details', $data ?? [], null);
        $this->setIfExists('orgDomain', $data ?? [], null);
        $this->setIfExists('projectName', $data ?? [], null);
        $this->setIfExists('projectGrantId', $data ?? [], null);
        $this->setIfExists('roleKeys', $data ?? [], null);
        $this->setIfExists('userType', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets orgId
     *
     * @return string|null
     */
    public function getOrgId()
    {
        return $this->container['orgId'];
    }

    /**
     * Sets orgId
     *
     * @param string|null $orgId orgId
     *
     * @return self
     */
    public function setOrgId($orgId)
    {
        if (is_null($orgId)) {
            throw new \InvalidArgumentException('non-nullable orgId cannot be null');
        }
        $this->container['orgId'] = $orgId;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return string|null
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param string|null $projectId projectId
     *
     * @return self
     */
    public function setProjectId($projectId)
    {
        if (is_null($projectId)) {
            throw new \InvalidArgumentException('non-nullable projectId cannot be null');
        }
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param string|null $userId userId
     *
     * @return self
     */
    public function setUserId($userId)
    {
        if (is_null($userId)) {
            throw new \InvalidArgumentException('non-nullable userId cannot be null');
        }
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return string[]|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param string[]|null $roles roles
     *
     * @return self
     */
    public function setRoles($roles)
    {
        if (is_null($roles)) {
            throw new \InvalidArgumentException('non-nullable roles cannot be null');
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets orgName
     *
     * @return string|null
     */
    public function getOrgName()
    {
        return $this->container['orgName'];
    }

    /**
     * Sets orgName
     *
     * @param string|null $orgName orgName
     *
     * @return self
     */
    public function setOrgName($orgName)
    {
        if (is_null($orgName)) {
            throw new \InvalidArgumentException('non-nullable orgName cannot be null');
        }
        $this->container['orgName'] = $orgName;

        return $this;
    }

    /**
     * Gets grantId
     *
     * @return string|null
     */
    public function getGrantId()
    {
        return $this->container['grantId'];
    }

    /**
     * Sets grantId
     *
     * @param string|null $grantId grantId
     *
     * @return self
     */
    public function setGrantId($grantId)
    {
        if (is_null($grantId)) {
            throw new \InvalidArgumentException('non-nullable grantId cannot be null');
        }
        $this->container['grantId'] = $grantId;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \ArthurHlt\Zitadel\Model\V1ObjectDetails|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \ArthurHlt\Zitadel\Model\V1ObjectDetails|null $details details
     *
     * @return self
     */
    public function setDetails($details)
    {
        if (is_null($details)) {
            throw new \InvalidArgumentException('non-nullable details cannot be null');
        }
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets orgDomain
     *
     * @return string|null
     */
    public function getOrgDomain()
    {
        return $this->container['orgDomain'];
    }

    /**
     * Sets orgDomain
     *
     * @param string|null $orgDomain orgDomain
     *
     * @return self
     */
    public function setOrgDomain($orgDomain)
    {
        if (is_null($orgDomain)) {
            throw new \InvalidArgumentException('non-nullable orgDomain cannot be null');
        }
        $this->container['orgDomain'] = $orgDomain;

        return $this;
    }

    /**
     * Gets projectName
     *
     * @return string|null
     */
    public function getProjectName()
    {
        return $this->container['projectName'];
    }

    /**
     * Sets projectName
     *
     * @param string|null $projectName projectName
     *
     * @return self
     */
    public function setProjectName($projectName)
    {
        if (is_null($projectName)) {
            throw new \InvalidArgumentException('non-nullable projectName cannot be null');
        }
        $this->container['projectName'] = $projectName;

        return $this;
    }

    /**
     * Gets projectGrantId
     *
     * @return string|null
     */
    public function getProjectGrantId()
    {
        return $this->container['projectGrantId'];
    }

    /**
     * Sets projectGrantId
     *
     * @param string|null $projectGrantId projectGrantId
     *
     * @return self
     */
    public function setProjectGrantId($projectGrantId)
    {
        if (is_null($projectGrantId)) {
            throw new \InvalidArgumentException('non-nullable projectGrantId cannot be null');
        }
        $this->container['projectGrantId'] = $projectGrantId;

        return $this;
    }

    /**
     * Gets roleKeys
     *
     * @return string[]|null
     */
    public function getRoleKeys()
    {
        return $this->container['roleKeys'];
    }

    /**
     * Sets roleKeys
     *
     * @param string[]|null $roleKeys roleKeys
     *
     * @return self
     */
    public function setRoleKeys($roleKeys)
    {
        if (is_null($roleKeys)) {
            throw new \InvalidArgumentException('non-nullable roleKeys cannot be null');
        }
        $this->container['roleKeys'] = $roleKeys;

        return $this;
    }

    /**
     * Gets userType
     *
     * @return \ArthurHlt\Zitadel\Model\Userv1Type|null
     */
    public function getUserType()
    {
        return $this->container['userType'];
    }

    /**
     * Sets userType
     *
     * @param \ArthurHlt\Zitadel\Model\Userv1Type|null $userType userType
     *
     * @return self
     */
    public function setUserType($userType)
    {
        if (is_null($userType)) {
            throw new \InvalidArgumentException('non-nullable userType cannot be null');
        }
        $this->container['userType'] = $userType;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \ArthurHlt\Zitadel\Model\V1UserGrantState|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \ArthurHlt\Zitadel\Model\V1UserGrantState|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


