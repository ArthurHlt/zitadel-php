<?php
/**
 * V1ImportDataSuccessOrg
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ArthurHlt\Zitadel\Model;

use \ArrayAccess;
use \ArthurHlt\Zitadel\ObjectSerializer;

/**
 * V1ImportDataSuccessOrg Class Doc Comment
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V1ImportDataSuccessOrg implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'v1ImportDataSuccessOrg';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'orgId' => 'string',
        'projectIds' => 'string[]',
        'projectRoles' => 'string[]',
        'oidcAppIds' => 'string[]',
        'apiAppIds' => 'string[]',
        'humanUserIds' => 'string[]',
        'machineUserIds' => 'string[]',
        'actionIds' => 'string[]',
        'triggerActions' => '\ArthurHlt\Zitadel\Model\Zitadelmanagementv1SetTriggerActionsRequest[]',
        'projectGrants' => '\ArthurHlt\Zitadel\Model\V1ImportDataSuccessProjectGrant[]',
        'userGrants' => '\ArthurHlt\Zitadel\Model\V1ImportDataSuccessUserGrant[]',
        'orgMembers' => 'string[]',
        'projectMembers' => '\ArthurHlt\Zitadel\Model\V1ImportDataSuccessProjectMember[]',
        'projectGrantMembers' => '\ArthurHlt\Zitadel\Model\V1ImportDataSuccessProjectGrantMember[]',
        'oidcIpds' => 'string[]',
        'jwtIdps' => 'string[]',
        'idpLinks' => 'string[]',
        'userLinks' => '\ArthurHlt\Zitadel\Model\V1ImportDataSuccessUserLinks[]',
        'userMetadata' => '\ArthurHlt\Zitadel\Model\V1ImportDataSuccessUserMetadata[]',
        'domains' => 'string[]',
        'appKeys' => 'string[]',
        'machineKeys' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'orgId' => null,
        'projectIds' => null,
        'projectRoles' => null,
        'oidcAppIds' => null,
        'apiAppIds' => null,
        'humanUserIds' => null,
        'machineUserIds' => null,
        'actionIds' => null,
        'triggerActions' => null,
        'projectGrants' => null,
        'userGrants' => null,
        'orgMembers' => null,
        'projectMembers' => null,
        'projectGrantMembers' => null,
        'oidcIpds' => null,
        'jwtIdps' => null,
        'idpLinks' => null,
        'userLinks' => null,
        'userMetadata' => null,
        'domains' => null,
        'appKeys' => null,
        'machineKeys' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'orgId' => false,
        'projectIds' => false,
        'projectRoles' => false,
        'oidcAppIds' => false,
        'apiAppIds' => false,
        'humanUserIds' => false,
        'machineUserIds' => false,
        'actionIds' => false,
        'triggerActions' => false,
        'projectGrants' => false,
        'userGrants' => false,
        'orgMembers' => false,
        'projectMembers' => false,
        'projectGrantMembers' => false,
        'oidcIpds' => false,
        'jwtIdps' => false,
        'idpLinks' => false,
        'userLinks' => false,
        'userMetadata' => false,
        'domains' => false,
        'appKeys' => false,
        'machineKeys' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orgId' => 'orgId',
        'projectIds' => 'projectIds',
        'projectRoles' => 'projectRoles',
        'oidcAppIds' => 'oidcAppIds',
        'apiAppIds' => 'apiAppIds',
        'humanUserIds' => 'humanUserIds',
        'machineUserIds' => 'machineUserIds',
        'actionIds' => 'actionIds',
        'triggerActions' => 'triggerActions',
        'projectGrants' => 'projectGrants',
        'userGrants' => 'userGrants',
        'orgMembers' => 'orgMembers',
        'projectMembers' => 'projectMembers',
        'projectGrantMembers' => 'projectGrantMembers',
        'oidcIpds' => 'oidcIpds',
        'jwtIdps' => 'jwtIdps',
        'idpLinks' => 'idpLinks',
        'userLinks' => 'userLinks',
        'userMetadata' => 'userMetadata',
        'domains' => 'domains',
        'appKeys' => 'appKeys',
        'machineKeys' => 'machineKeys'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'orgId' => 'setOrgId',
        'projectIds' => 'setProjectIds',
        'projectRoles' => 'setProjectRoles',
        'oidcAppIds' => 'setOidcAppIds',
        'apiAppIds' => 'setApiAppIds',
        'humanUserIds' => 'setHumanUserIds',
        'machineUserIds' => 'setMachineUserIds',
        'actionIds' => 'setActionIds',
        'triggerActions' => 'setTriggerActions',
        'projectGrants' => 'setProjectGrants',
        'userGrants' => 'setUserGrants',
        'orgMembers' => 'setOrgMembers',
        'projectMembers' => 'setProjectMembers',
        'projectGrantMembers' => 'setProjectGrantMembers',
        'oidcIpds' => 'setOidcIpds',
        'jwtIdps' => 'setJwtIdps',
        'idpLinks' => 'setIdpLinks',
        'userLinks' => 'setUserLinks',
        'userMetadata' => 'setUserMetadata',
        'domains' => 'setDomains',
        'appKeys' => 'setAppKeys',
        'machineKeys' => 'setMachineKeys'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'orgId' => 'getOrgId',
        'projectIds' => 'getProjectIds',
        'projectRoles' => 'getProjectRoles',
        'oidcAppIds' => 'getOidcAppIds',
        'apiAppIds' => 'getApiAppIds',
        'humanUserIds' => 'getHumanUserIds',
        'machineUserIds' => 'getMachineUserIds',
        'actionIds' => 'getActionIds',
        'triggerActions' => 'getTriggerActions',
        'projectGrants' => 'getProjectGrants',
        'userGrants' => 'getUserGrants',
        'orgMembers' => 'getOrgMembers',
        'projectMembers' => 'getProjectMembers',
        'projectGrantMembers' => 'getProjectGrantMembers',
        'oidcIpds' => 'getOidcIpds',
        'jwtIdps' => 'getJwtIdps',
        'idpLinks' => 'getIdpLinks',
        'userLinks' => 'getUserLinks',
        'userMetadata' => 'getUserMetadata',
        'domains' => 'getDomains',
        'appKeys' => 'getAppKeys',
        'machineKeys' => 'getMachineKeys'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('orgId', $data ?? [], null);
        $this->setIfExists('projectIds', $data ?? [], null);
        $this->setIfExists('projectRoles', $data ?? [], null);
        $this->setIfExists('oidcAppIds', $data ?? [], null);
        $this->setIfExists('apiAppIds', $data ?? [], null);
        $this->setIfExists('humanUserIds', $data ?? [], null);
        $this->setIfExists('machineUserIds', $data ?? [], null);
        $this->setIfExists('actionIds', $data ?? [], null);
        $this->setIfExists('triggerActions', $data ?? [], null);
        $this->setIfExists('projectGrants', $data ?? [], null);
        $this->setIfExists('userGrants', $data ?? [], null);
        $this->setIfExists('orgMembers', $data ?? [], null);
        $this->setIfExists('projectMembers', $data ?? [], null);
        $this->setIfExists('projectGrantMembers', $data ?? [], null);
        $this->setIfExists('oidcIpds', $data ?? [], null);
        $this->setIfExists('jwtIdps', $data ?? [], null);
        $this->setIfExists('idpLinks', $data ?? [], null);
        $this->setIfExists('userLinks', $data ?? [], null);
        $this->setIfExists('userMetadata', $data ?? [], null);
        $this->setIfExists('domains', $data ?? [], null);
        $this->setIfExists('appKeys', $data ?? [], null);
        $this->setIfExists('machineKeys', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets orgId
     *
     * @return string|null
     */
    public function getOrgId()
    {
        return $this->container['orgId'];
    }

    /**
     * Sets orgId
     *
     * @param string|null $orgId orgId
     *
     * @return self
     */
    public function setOrgId($orgId)
    {
        if (is_null($orgId)) {
            throw new \InvalidArgumentException('non-nullable orgId cannot be null');
        }
        $this->container['orgId'] = $orgId;

        return $this;
    }

    /**
     * Gets projectIds
     *
     * @return string[]|null
     */
    public function getProjectIds()
    {
        return $this->container['projectIds'];
    }

    /**
     * Sets projectIds
     *
     * @param string[]|null $projectIds projectIds
     *
     * @return self
     */
    public function setProjectIds($projectIds)
    {
        if (is_null($projectIds)) {
            throw new \InvalidArgumentException('non-nullable projectIds cannot be null');
        }
        $this->container['projectIds'] = $projectIds;

        return $this;
    }

    /**
     * Gets projectRoles
     *
     * @return string[]|null
     */
    public function getProjectRoles()
    {
        return $this->container['projectRoles'];
    }

    /**
     * Sets projectRoles
     *
     * @param string[]|null $projectRoles projectRoles
     *
     * @return self
     */
    public function setProjectRoles($projectRoles)
    {
        if (is_null($projectRoles)) {
            throw new \InvalidArgumentException('non-nullable projectRoles cannot be null');
        }
        $this->container['projectRoles'] = $projectRoles;

        return $this;
    }

    /**
     * Gets oidcAppIds
     *
     * @return string[]|null
     */
    public function getOidcAppIds()
    {
        return $this->container['oidcAppIds'];
    }

    /**
     * Sets oidcAppIds
     *
     * @param string[]|null $oidcAppIds oidcAppIds
     *
     * @return self
     */
    public function setOidcAppIds($oidcAppIds)
    {
        if (is_null($oidcAppIds)) {
            throw new \InvalidArgumentException('non-nullable oidcAppIds cannot be null');
        }
        $this->container['oidcAppIds'] = $oidcAppIds;

        return $this;
    }

    /**
     * Gets apiAppIds
     *
     * @return string[]|null
     */
    public function getApiAppIds()
    {
        return $this->container['apiAppIds'];
    }

    /**
     * Sets apiAppIds
     *
     * @param string[]|null $apiAppIds apiAppIds
     *
     * @return self
     */
    public function setApiAppIds($apiAppIds)
    {
        if (is_null($apiAppIds)) {
            throw new \InvalidArgumentException('non-nullable apiAppIds cannot be null');
        }
        $this->container['apiAppIds'] = $apiAppIds;

        return $this;
    }

    /**
     * Gets humanUserIds
     *
     * @return string[]|null
     */
    public function getHumanUserIds()
    {
        return $this->container['humanUserIds'];
    }

    /**
     * Sets humanUserIds
     *
     * @param string[]|null $humanUserIds humanUserIds
     *
     * @return self
     */
    public function setHumanUserIds($humanUserIds)
    {
        if (is_null($humanUserIds)) {
            throw new \InvalidArgumentException('non-nullable humanUserIds cannot be null');
        }
        $this->container['humanUserIds'] = $humanUserIds;

        return $this;
    }

    /**
     * Gets machineUserIds
     *
     * @return string[]|null
     */
    public function getMachineUserIds()
    {
        return $this->container['machineUserIds'];
    }

    /**
     * Sets machineUserIds
     *
     * @param string[]|null $machineUserIds machineUserIds
     *
     * @return self
     */
    public function setMachineUserIds($machineUserIds)
    {
        if (is_null($machineUserIds)) {
            throw new \InvalidArgumentException('non-nullable machineUserIds cannot be null');
        }
        $this->container['machineUserIds'] = $machineUserIds;

        return $this;
    }

    /**
     * Gets actionIds
     *
     * @return string[]|null
     */
    public function getActionIds()
    {
        return $this->container['actionIds'];
    }

    /**
     * Sets actionIds
     *
     * @param string[]|null $actionIds actionIds
     *
     * @return self
     */
    public function setActionIds($actionIds)
    {
        if (is_null($actionIds)) {
            throw new \InvalidArgumentException('non-nullable actionIds cannot be null');
        }
        $this->container['actionIds'] = $actionIds;

        return $this;
    }

    /**
     * Gets triggerActions
     *
     * @return \ArthurHlt\Zitadel\Model\Zitadelmanagementv1SetTriggerActionsRequest[]|null
     */
    public function getTriggerActions()
    {
        return $this->container['triggerActions'];
    }

    /**
     * Sets triggerActions
     *
     * @param \ArthurHlt\Zitadel\Model\Zitadelmanagementv1SetTriggerActionsRequest[]|null $triggerActions triggerActions
     *
     * @return self
     */
    public function setTriggerActions($triggerActions)
    {
        if (is_null($triggerActions)) {
            throw new \InvalidArgumentException('non-nullable triggerActions cannot be null');
        }
        $this->container['triggerActions'] = $triggerActions;

        return $this;
    }

    /**
     * Gets projectGrants
     *
     * @return \ArthurHlt\Zitadel\Model\V1ImportDataSuccessProjectGrant[]|null
     */
    public function getProjectGrants()
    {
        return $this->container['projectGrants'];
    }

    /**
     * Sets projectGrants
     *
     * @param \ArthurHlt\Zitadel\Model\V1ImportDataSuccessProjectGrant[]|null $projectGrants projectGrants
     *
     * @return self
     */
    public function setProjectGrants($projectGrants)
    {
        if (is_null($projectGrants)) {
            throw new \InvalidArgumentException('non-nullable projectGrants cannot be null');
        }
        $this->container['projectGrants'] = $projectGrants;

        return $this;
    }

    /**
     * Gets userGrants
     *
     * @return \ArthurHlt\Zitadel\Model\V1ImportDataSuccessUserGrant[]|null
     */
    public function getUserGrants()
    {
        return $this->container['userGrants'];
    }

    /**
     * Sets userGrants
     *
     * @param \ArthurHlt\Zitadel\Model\V1ImportDataSuccessUserGrant[]|null $userGrants userGrants
     *
     * @return self
     */
    public function setUserGrants($userGrants)
    {
        if (is_null($userGrants)) {
            throw new \InvalidArgumentException('non-nullable userGrants cannot be null');
        }
        $this->container['userGrants'] = $userGrants;

        return $this;
    }

    /**
     * Gets orgMembers
     *
     * @return string[]|null
     */
    public function getOrgMembers()
    {
        return $this->container['orgMembers'];
    }

    /**
     * Sets orgMembers
     *
     * @param string[]|null $orgMembers orgMembers
     *
     * @return self
     */
    public function setOrgMembers($orgMembers)
    {
        if (is_null($orgMembers)) {
            throw new \InvalidArgumentException('non-nullable orgMembers cannot be null');
        }
        $this->container['orgMembers'] = $orgMembers;

        return $this;
    }

    /**
     * Gets projectMembers
     *
     * @return \ArthurHlt\Zitadel\Model\V1ImportDataSuccessProjectMember[]|null
     */
    public function getProjectMembers()
    {
        return $this->container['projectMembers'];
    }

    /**
     * Sets projectMembers
     *
     * @param \ArthurHlt\Zitadel\Model\V1ImportDataSuccessProjectMember[]|null $projectMembers projectMembers
     *
     * @return self
     */
    public function setProjectMembers($projectMembers)
    {
        if (is_null($projectMembers)) {
            throw new \InvalidArgumentException('non-nullable projectMembers cannot be null');
        }
        $this->container['projectMembers'] = $projectMembers;

        return $this;
    }

    /**
     * Gets projectGrantMembers
     *
     * @return \ArthurHlt\Zitadel\Model\V1ImportDataSuccessProjectGrantMember[]|null
     */
    public function getProjectGrantMembers()
    {
        return $this->container['projectGrantMembers'];
    }

    /**
     * Sets projectGrantMembers
     *
     * @param \ArthurHlt\Zitadel\Model\V1ImportDataSuccessProjectGrantMember[]|null $projectGrantMembers projectGrantMembers
     *
     * @return self
     */
    public function setProjectGrantMembers($projectGrantMembers)
    {
        if (is_null($projectGrantMembers)) {
            throw new \InvalidArgumentException('non-nullable projectGrantMembers cannot be null');
        }
        $this->container['projectGrantMembers'] = $projectGrantMembers;

        return $this;
    }

    /**
     * Gets oidcIpds
     *
     * @return string[]|null
     */
    public function getOidcIpds()
    {
        return $this->container['oidcIpds'];
    }

    /**
     * Sets oidcIpds
     *
     * @param string[]|null $oidcIpds oidcIpds
     *
     * @return self
     */
    public function setOidcIpds($oidcIpds)
    {
        if (is_null($oidcIpds)) {
            throw new \InvalidArgumentException('non-nullable oidcIpds cannot be null');
        }
        $this->container['oidcIpds'] = $oidcIpds;

        return $this;
    }

    /**
     * Gets jwtIdps
     *
     * @return string[]|null
     */
    public function getJwtIdps()
    {
        return $this->container['jwtIdps'];
    }

    /**
     * Sets jwtIdps
     *
     * @param string[]|null $jwtIdps jwtIdps
     *
     * @return self
     */
    public function setJwtIdps($jwtIdps)
    {
        if (is_null($jwtIdps)) {
            throw new \InvalidArgumentException('non-nullable jwtIdps cannot be null');
        }
        $this->container['jwtIdps'] = $jwtIdps;

        return $this;
    }

    /**
     * Gets idpLinks
     *
     * @return string[]|null
     */
    public function getIdpLinks()
    {
        return $this->container['idpLinks'];
    }

    /**
     * Sets idpLinks
     *
     * @param string[]|null $idpLinks idpLinks
     *
     * @return self
     */
    public function setIdpLinks($idpLinks)
    {
        if (is_null($idpLinks)) {
            throw new \InvalidArgumentException('non-nullable idpLinks cannot be null');
        }
        $this->container['idpLinks'] = $idpLinks;

        return $this;
    }

    /**
     * Gets userLinks
     *
     * @return \ArthurHlt\Zitadel\Model\V1ImportDataSuccessUserLinks[]|null
     */
    public function getUserLinks()
    {
        return $this->container['userLinks'];
    }

    /**
     * Sets userLinks
     *
     * @param \ArthurHlt\Zitadel\Model\V1ImportDataSuccessUserLinks[]|null $userLinks userLinks
     *
     * @return self
     */
    public function setUserLinks($userLinks)
    {
        if (is_null($userLinks)) {
            throw new \InvalidArgumentException('non-nullable userLinks cannot be null');
        }
        $this->container['userLinks'] = $userLinks;

        return $this;
    }

    /**
     * Gets userMetadata
     *
     * @return \ArthurHlt\Zitadel\Model\V1ImportDataSuccessUserMetadata[]|null
     */
    public function getUserMetadata()
    {
        return $this->container['userMetadata'];
    }

    /**
     * Sets userMetadata
     *
     * @param \ArthurHlt\Zitadel\Model\V1ImportDataSuccessUserMetadata[]|null $userMetadata userMetadata
     *
     * @return self
     */
    public function setUserMetadata($userMetadata)
    {
        if (is_null($userMetadata)) {
            throw new \InvalidArgumentException('non-nullable userMetadata cannot be null');
        }
        $this->container['userMetadata'] = $userMetadata;

        return $this;
    }

    /**
     * Gets domains
     *
     * @return string[]|null
     */
    public function getDomains()
    {
        return $this->container['domains'];
    }

    /**
     * Sets domains
     *
     * @param string[]|null $domains domains
     *
     * @return self
     */
    public function setDomains($domains)
    {
        if (is_null($domains)) {
            throw new \InvalidArgumentException('non-nullable domains cannot be null');
        }
        $this->container['domains'] = $domains;

        return $this;
    }

    /**
     * Gets appKeys
     *
     * @return string[]|null
     */
    public function getAppKeys()
    {
        return $this->container['appKeys'];
    }

    /**
     * Sets appKeys
     *
     * @param string[]|null $appKeys appKeys
     *
     * @return self
     */
    public function setAppKeys($appKeys)
    {
        if (is_null($appKeys)) {
            throw new \InvalidArgumentException('non-nullable appKeys cannot be null');
        }
        $this->container['appKeys'] = $appKeys;

        return $this;
    }

    /**
     * Gets machineKeys
     *
     * @return string[]|null
     */
    public function getMachineKeys()
    {
        return $this->container['machineKeys'];
    }

    /**
     * Sets machineKeys
     *
     * @param string[]|null $machineKeys machineKeys
     *
     * @return self
     */
    public function setMachineKeys($machineKeys)
    {
        if (is_null($machineKeys)) {
            throw new \InvalidArgumentException('non-nullable machineKeys cannot be null');
        }
        $this->container['machineKeys'] = $machineKeys;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


