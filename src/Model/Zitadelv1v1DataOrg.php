<?php
/**
 * Zitadelv1v1DataOrg
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ArthurHlt\Zitadel\Model;

use \ArrayAccess;
use \ArthurHlt\Zitadel\ObjectSerializer;

/**
 * Zitadelv1v1DataOrg Class Doc Comment
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Zitadelv1v1DataOrg implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'zitadelv1v1DataOrg';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'orgId' => 'string',
        'org' => '\ArthurHlt\Zitadel\Model\V1AddOrgRequest',
        'iamPolicy' => '\ArthurHlt\Zitadel\Model\Zitadelv1v1AddCustomOrgIAMPolicyRequest',
        'labelPolicy' => '\ArthurHlt\Zitadel\Model\V1AddCustomLabelPolicyRequest',
        'lockoutPolicy' => '\ArthurHlt\Zitadel\Model\V1AddCustomLockoutPolicyRequest',
        'loginPolicy' => '\ArthurHlt\Zitadel\Model\V1AddCustomLoginPolicyRequest',
        'passwordComplexityPolicy' => '\ArthurHlt\Zitadel\Model\V1AddCustomPasswordComplexityPolicyRequest',
        'privacyPolicy' => '\ArthurHlt\Zitadel\Model\V1AddCustomPrivacyPolicyRequest',
        'projects' => '\ArthurHlt\Zitadel\Model\V1DataProject[]',
        'projectRoles' => '\ArthurHlt\Zitadel\Model\V1AddProjectRoleRequest[]',
        'apiApps' => '\ArthurHlt\Zitadel\Model\V1DataAPIApplication[]',
        'oidcApps' => '\ArthurHlt\Zitadel\Model\V1DataOIDCApplication[]',
        'humanUsers' => '\ArthurHlt\Zitadel\Model\V1DataHumanUser[]',
        'machineUsers' => '\ArthurHlt\Zitadel\Model\V1DataMachineUser[]',
        'triggerActions' => '\ArthurHlt\Zitadel\Model\Zitadelv1v1SetTriggerActionsRequest[]',
        'actions' => '\ArthurHlt\Zitadel\Model\V1DataAction[]',
        'projectGrants' => '\ArthurHlt\Zitadel\Model\V1DataProjectGrant[]',
        'userGrants' => '\ArthurHlt\Zitadel\Model\V1AddUserGrantRequest[]',
        'orgMembers' => '\ArthurHlt\Zitadel\Model\V1AddOrgMemberRequest[]',
        'projectMembers' => '\ArthurHlt\Zitadel\Model\V1AddProjectMemberRequest[]',
        'projectGrantMembers' => '\ArthurHlt\Zitadel\Model\V1AddProjectGrantMemberRequest[]',
        'userMetadata' => '\ArthurHlt\Zitadel\Model\V1SetUserMetadataRequest[]',
        'loginTexts' => '\ArthurHlt\Zitadel\Model\Zitadelmanagementv1SetCustomLoginTextsRequest[]',
        'initMessages' => '\ArthurHlt\Zitadel\Model\V1SetCustomInitMessageTextRequest[]',
        'passwordResetMessages' => '\ArthurHlt\Zitadel\Model\V1SetCustomPasswordResetMessageTextRequest[]',
        'verifyEmailMessages' => '\ArthurHlt\Zitadel\Model\V1SetCustomVerifyEmailMessageTextRequest[]',
        'verifyPhoneMessages' => '\ArthurHlt\Zitadel\Model\V1SetCustomVerifyPhoneMessageTextRequest[]',
        'domainClaimedMessages' => '\ArthurHlt\Zitadel\Model\V1SetCustomDomainClaimedMessageTextRequest[]',
        'passwordlessRegistrationMessages' => '\ArthurHlt\Zitadel\Model\V1SetCustomPasswordlessRegistrationMessageTextRequest[]',
        'oidcIdps' => '\ArthurHlt\Zitadel\Model\V1DataOIDCIDP[]',
        'jwtIdps' => '\ArthurHlt\Zitadel\Model\V1DataJWTIDP[]',
        'secondFactors' => '\ArthurHlt\Zitadel\Model\Zitadelmanagementv1AddSecondFactorToLoginPolicyRequest[]',
        'multiFactors' => '\ArthurHlt\Zitadel\Model\Zitadelmanagementv1AddMultiFactorToLoginPolicyRequest[]',
        'idps' => '\ArthurHlt\Zitadel\Model\Zitadelmanagementv1AddIDPToLoginPolicyRequest[]',
        'userLinks' => '\ArthurHlt\Zitadel\Model\V1IDPUserLink[]',
        'domains' => '\ArthurHlt\Zitadel\Model\Zitadelorgv1Domain[]',
        'appKeys' => '\ArthurHlt\Zitadel\Model\V1DataAppKey[]',
        'machineKeys' => '\ArthurHlt\Zitadel\Model\V1DataMachineKey[]',
        'inviteUserMessages' => '\ArthurHlt\Zitadel\Model\V1SetCustomInviteUserMessageTextRequest[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'orgId' => null,
        'org' => null,
        'iamPolicy' => null,
        'labelPolicy' => null,
        'lockoutPolicy' => null,
        'loginPolicy' => null,
        'passwordComplexityPolicy' => null,
        'privacyPolicy' => null,
        'projects' => null,
        'projectRoles' => null,
        'apiApps' => null,
        'oidcApps' => null,
        'humanUsers' => null,
        'machineUsers' => null,
        'triggerActions' => null,
        'actions' => null,
        'projectGrants' => null,
        'userGrants' => null,
        'orgMembers' => null,
        'projectMembers' => null,
        'projectGrantMembers' => null,
        'userMetadata' => null,
        'loginTexts' => null,
        'initMessages' => null,
        'passwordResetMessages' => null,
        'verifyEmailMessages' => null,
        'verifyPhoneMessages' => null,
        'domainClaimedMessages' => null,
        'passwordlessRegistrationMessages' => null,
        'oidcIdps' => null,
        'jwtIdps' => null,
        'secondFactors' => null,
        'multiFactors' => null,
        'idps' => null,
        'userLinks' => null,
        'domains' => null,
        'appKeys' => null,
        'machineKeys' => null,
        'inviteUserMessages' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'orgId' => false,
        'org' => false,
        'iamPolicy' => false,
        'labelPolicy' => false,
        'lockoutPolicy' => false,
        'loginPolicy' => false,
        'passwordComplexityPolicy' => false,
        'privacyPolicy' => false,
        'projects' => false,
        'projectRoles' => false,
        'apiApps' => false,
        'oidcApps' => false,
        'humanUsers' => false,
        'machineUsers' => false,
        'triggerActions' => false,
        'actions' => false,
        'projectGrants' => false,
        'userGrants' => false,
        'orgMembers' => false,
        'projectMembers' => false,
        'projectGrantMembers' => false,
        'userMetadata' => false,
        'loginTexts' => false,
        'initMessages' => false,
        'passwordResetMessages' => false,
        'verifyEmailMessages' => false,
        'verifyPhoneMessages' => false,
        'domainClaimedMessages' => false,
        'passwordlessRegistrationMessages' => false,
        'oidcIdps' => false,
        'jwtIdps' => false,
        'secondFactors' => false,
        'multiFactors' => false,
        'idps' => false,
        'userLinks' => false,
        'domains' => false,
        'appKeys' => false,
        'machineKeys' => false,
        'inviteUserMessages' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orgId' => 'orgId',
        'org' => 'org',
        'iamPolicy' => 'iamPolicy',
        'labelPolicy' => 'labelPolicy',
        'lockoutPolicy' => 'lockoutPolicy',
        'loginPolicy' => 'loginPolicy',
        'passwordComplexityPolicy' => 'passwordComplexityPolicy',
        'privacyPolicy' => 'privacyPolicy',
        'projects' => 'projects',
        'projectRoles' => 'projectRoles',
        'apiApps' => 'apiApps',
        'oidcApps' => 'oidcApps',
        'humanUsers' => 'humanUsers',
        'machineUsers' => 'machineUsers',
        'triggerActions' => 'triggerActions',
        'actions' => 'actions',
        'projectGrants' => 'projectGrants',
        'userGrants' => 'userGrants',
        'orgMembers' => 'orgMembers',
        'projectMembers' => 'projectMembers',
        'projectGrantMembers' => 'projectGrantMembers',
        'userMetadata' => 'userMetadata',
        'loginTexts' => 'loginTexts',
        'initMessages' => 'initMessages',
        'passwordResetMessages' => 'passwordResetMessages',
        'verifyEmailMessages' => 'verifyEmailMessages',
        'verifyPhoneMessages' => 'verifyPhoneMessages',
        'domainClaimedMessages' => 'domainClaimedMessages',
        'passwordlessRegistrationMessages' => 'passwordlessRegistrationMessages',
        'oidcIdps' => 'oidcIdps',
        'jwtIdps' => 'jwtIdps',
        'secondFactors' => 'secondFactors',
        'multiFactors' => 'multiFactors',
        'idps' => 'idps',
        'userLinks' => 'userLinks',
        'domains' => 'domains',
        'appKeys' => 'appKeys',
        'machineKeys' => 'machineKeys',
        'inviteUserMessages' => 'inviteUserMessages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'orgId' => 'setOrgId',
        'org' => 'setOrg',
        'iamPolicy' => 'setIamPolicy',
        'labelPolicy' => 'setLabelPolicy',
        'lockoutPolicy' => 'setLockoutPolicy',
        'loginPolicy' => 'setLoginPolicy',
        'passwordComplexityPolicy' => 'setPasswordComplexityPolicy',
        'privacyPolicy' => 'setPrivacyPolicy',
        'projects' => 'setProjects',
        'projectRoles' => 'setProjectRoles',
        'apiApps' => 'setApiApps',
        'oidcApps' => 'setOidcApps',
        'humanUsers' => 'setHumanUsers',
        'machineUsers' => 'setMachineUsers',
        'triggerActions' => 'setTriggerActions',
        'actions' => 'setActions',
        'projectGrants' => 'setProjectGrants',
        'userGrants' => 'setUserGrants',
        'orgMembers' => 'setOrgMembers',
        'projectMembers' => 'setProjectMembers',
        'projectGrantMembers' => 'setProjectGrantMembers',
        'userMetadata' => 'setUserMetadata',
        'loginTexts' => 'setLoginTexts',
        'initMessages' => 'setInitMessages',
        'passwordResetMessages' => 'setPasswordResetMessages',
        'verifyEmailMessages' => 'setVerifyEmailMessages',
        'verifyPhoneMessages' => 'setVerifyPhoneMessages',
        'domainClaimedMessages' => 'setDomainClaimedMessages',
        'passwordlessRegistrationMessages' => 'setPasswordlessRegistrationMessages',
        'oidcIdps' => 'setOidcIdps',
        'jwtIdps' => 'setJwtIdps',
        'secondFactors' => 'setSecondFactors',
        'multiFactors' => 'setMultiFactors',
        'idps' => 'setIdps',
        'userLinks' => 'setUserLinks',
        'domains' => 'setDomains',
        'appKeys' => 'setAppKeys',
        'machineKeys' => 'setMachineKeys',
        'inviteUserMessages' => 'setInviteUserMessages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'orgId' => 'getOrgId',
        'org' => 'getOrg',
        'iamPolicy' => 'getIamPolicy',
        'labelPolicy' => 'getLabelPolicy',
        'lockoutPolicy' => 'getLockoutPolicy',
        'loginPolicy' => 'getLoginPolicy',
        'passwordComplexityPolicy' => 'getPasswordComplexityPolicy',
        'privacyPolicy' => 'getPrivacyPolicy',
        'projects' => 'getProjects',
        'projectRoles' => 'getProjectRoles',
        'apiApps' => 'getApiApps',
        'oidcApps' => 'getOidcApps',
        'humanUsers' => 'getHumanUsers',
        'machineUsers' => 'getMachineUsers',
        'triggerActions' => 'getTriggerActions',
        'actions' => 'getActions',
        'projectGrants' => 'getProjectGrants',
        'userGrants' => 'getUserGrants',
        'orgMembers' => 'getOrgMembers',
        'projectMembers' => 'getProjectMembers',
        'projectGrantMembers' => 'getProjectGrantMembers',
        'userMetadata' => 'getUserMetadata',
        'loginTexts' => 'getLoginTexts',
        'initMessages' => 'getInitMessages',
        'passwordResetMessages' => 'getPasswordResetMessages',
        'verifyEmailMessages' => 'getVerifyEmailMessages',
        'verifyPhoneMessages' => 'getVerifyPhoneMessages',
        'domainClaimedMessages' => 'getDomainClaimedMessages',
        'passwordlessRegistrationMessages' => 'getPasswordlessRegistrationMessages',
        'oidcIdps' => 'getOidcIdps',
        'jwtIdps' => 'getJwtIdps',
        'secondFactors' => 'getSecondFactors',
        'multiFactors' => 'getMultiFactors',
        'idps' => 'getIdps',
        'userLinks' => 'getUserLinks',
        'domains' => 'getDomains',
        'appKeys' => 'getAppKeys',
        'machineKeys' => 'getMachineKeys',
        'inviteUserMessages' => 'getInviteUserMessages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('orgId', $data ?? [], null);
        $this->setIfExists('org', $data ?? [], null);
        $this->setIfExists('iamPolicy', $data ?? [], null);
        $this->setIfExists('labelPolicy', $data ?? [], null);
        $this->setIfExists('lockoutPolicy', $data ?? [], null);
        $this->setIfExists('loginPolicy', $data ?? [], null);
        $this->setIfExists('passwordComplexityPolicy', $data ?? [], null);
        $this->setIfExists('privacyPolicy', $data ?? [], null);
        $this->setIfExists('projects', $data ?? [], null);
        $this->setIfExists('projectRoles', $data ?? [], null);
        $this->setIfExists('apiApps', $data ?? [], null);
        $this->setIfExists('oidcApps', $data ?? [], null);
        $this->setIfExists('humanUsers', $data ?? [], null);
        $this->setIfExists('machineUsers', $data ?? [], null);
        $this->setIfExists('triggerActions', $data ?? [], null);
        $this->setIfExists('actions', $data ?? [], null);
        $this->setIfExists('projectGrants', $data ?? [], null);
        $this->setIfExists('userGrants', $data ?? [], null);
        $this->setIfExists('orgMembers', $data ?? [], null);
        $this->setIfExists('projectMembers', $data ?? [], null);
        $this->setIfExists('projectGrantMembers', $data ?? [], null);
        $this->setIfExists('userMetadata', $data ?? [], null);
        $this->setIfExists('loginTexts', $data ?? [], null);
        $this->setIfExists('initMessages', $data ?? [], null);
        $this->setIfExists('passwordResetMessages', $data ?? [], null);
        $this->setIfExists('verifyEmailMessages', $data ?? [], null);
        $this->setIfExists('verifyPhoneMessages', $data ?? [], null);
        $this->setIfExists('domainClaimedMessages', $data ?? [], null);
        $this->setIfExists('passwordlessRegistrationMessages', $data ?? [], null);
        $this->setIfExists('oidcIdps', $data ?? [], null);
        $this->setIfExists('jwtIdps', $data ?? [], null);
        $this->setIfExists('secondFactors', $data ?? [], null);
        $this->setIfExists('multiFactors', $data ?? [], null);
        $this->setIfExists('idps', $data ?? [], null);
        $this->setIfExists('userLinks', $data ?? [], null);
        $this->setIfExists('domains', $data ?? [], null);
        $this->setIfExists('appKeys', $data ?? [], null);
        $this->setIfExists('machineKeys', $data ?? [], null);
        $this->setIfExists('inviteUserMessages', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets orgId
     *
     * @return string|null
     */
    public function getOrgId()
    {
        return $this->container['orgId'];
    }

    /**
     * Sets orgId
     *
     * @param string|null $orgId orgId
     *
     * @return self
     */
    public function setOrgId($orgId)
    {
        if (is_null($orgId)) {
            throw new \InvalidArgumentException('non-nullable orgId cannot be null');
        }
        $this->container['orgId'] = $orgId;

        return $this;
    }

    /**
     * Gets org
     *
     * @return \ArthurHlt\Zitadel\Model\V1AddOrgRequest|null
     */
    public function getOrg()
    {
        return $this->container['org'];
    }

    /**
     * Sets org
     *
     * @param \ArthurHlt\Zitadel\Model\V1AddOrgRequest|null $org org
     *
     * @return self
     */
    public function setOrg($org)
    {
        if (is_null($org)) {
            throw new \InvalidArgumentException('non-nullable org cannot be null');
        }
        $this->container['org'] = $org;

        return $this;
    }

    /**
     * Gets iamPolicy
     *
     * @return \ArthurHlt\Zitadel\Model\Zitadelv1v1AddCustomOrgIAMPolicyRequest|null
     */
    public function getIamPolicy()
    {
        return $this->container['iamPolicy'];
    }

    /**
     * Sets iamPolicy
     *
     * @param \ArthurHlt\Zitadel\Model\Zitadelv1v1AddCustomOrgIAMPolicyRequest|null $iamPolicy iamPolicy
     *
     * @return self
     */
    public function setIamPolicy($iamPolicy)
    {
        if (is_null($iamPolicy)) {
            throw new \InvalidArgumentException('non-nullable iamPolicy cannot be null');
        }
        $this->container['iamPolicy'] = $iamPolicy;

        return $this;
    }

    /**
     * Gets labelPolicy
     *
     * @return \ArthurHlt\Zitadel\Model\V1AddCustomLabelPolicyRequest|null
     */
    public function getLabelPolicy()
    {
        return $this->container['labelPolicy'];
    }

    /**
     * Sets labelPolicy
     *
     * @param \ArthurHlt\Zitadel\Model\V1AddCustomLabelPolicyRequest|null $labelPolicy labelPolicy
     *
     * @return self
     */
    public function setLabelPolicy($labelPolicy)
    {
        if (is_null($labelPolicy)) {
            throw new \InvalidArgumentException('non-nullable labelPolicy cannot be null');
        }
        $this->container['labelPolicy'] = $labelPolicy;

        return $this;
    }

    /**
     * Gets lockoutPolicy
     *
     * @return \ArthurHlt\Zitadel\Model\V1AddCustomLockoutPolicyRequest|null
     */
    public function getLockoutPolicy()
    {
        return $this->container['lockoutPolicy'];
    }

    /**
     * Sets lockoutPolicy
     *
     * @param \ArthurHlt\Zitadel\Model\V1AddCustomLockoutPolicyRequest|null $lockoutPolicy lockoutPolicy
     *
     * @return self
     */
    public function setLockoutPolicy($lockoutPolicy)
    {
        if (is_null($lockoutPolicy)) {
            throw new \InvalidArgumentException('non-nullable lockoutPolicy cannot be null');
        }
        $this->container['lockoutPolicy'] = $lockoutPolicy;

        return $this;
    }

    /**
     * Gets loginPolicy
     *
     * @return \ArthurHlt\Zitadel\Model\V1AddCustomLoginPolicyRequest|null
     */
    public function getLoginPolicy()
    {
        return $this->container['loginPolicy'];
    }

    /**
     * Sets loginPolicy
     *
     * @param \ArthurHlt\Zitadel\Model\V1AddCustomLoginPolicyRequest|null $loginPolicy loginPolicy
     *
     * @return self
     */
    public function setLoginPolicy($loginPolicy)
    {
        if (is_null($loginPolicy)) {
            throw new \InvalidArgumentException('non-nullable loginPolicy cannot be null');
        }
        $this->container['loginPolicy'] = $loginPolicy;

        return $this;
    }

    /**
     * Gets passwordComplexityPolicy
     *
     * @return \ArthurHlt\Zitadel\Model\V1AddCustomPasswordComplexityPolicyRequest|null
     */
    public function getPasswordComplexityPolicy()
    {
        return $this->container['passwordComplexityPolicy'];
    }

    /**
     * Sets passwordComplexityPolicy
     *
     * @param \ArthurHlt\Zitadel\Model\V1AddCustomPasswordComplexityPolicyRequest|null $passwordComplexityPolicy passwordComplexityPolicy
     *
     * @return self
     */
    public function setPasswordComplexityPolicy($passwordComplexityPolicy)
    {
        if (is_null($passwordComplexityPolicy)) {
            throw new \InvalidArgumentException('non-nullable passwordComplexityPolicy cannot be null');
        }
        $this->container['passwordComplexityPolicy'] = $passwordComplexityPolicy;

        return $this;
    }

    /**
     * Gets privacyPolicy
     *
     * @return \ArthurHlt\Zitadel\Model\V1AddCustomPrivacyPolicyRequest|null
     */
    public function getPrivacyPolicy()
    {
        return $this->container['privacyPolicy'];
    }

    /**
     * Sets privacyPolicy
     *
     * @param \ArthurHlt\Zitadel\Model\V1AddCustomPrivacyPolicyRequest|null $privacyPolicy privacyPolicy
     *
     * @return self
     */
    public function setPrivacyPolicy($privacyPolicy)
    {
        if (is_null($privacyPolicy)) {
            throw new \InvalidArgumentException('non-nullable privacyPolicy cannot be null');
        }
        $this->container['privacyPolicy'] = $privacyPolicy;

        return $this;
    }

    /**
     * Gets projects
     *
     * @return \ArthurHlt\Zitadel\Model\V1DataProject[]|null
     */
    public function getProjects()
    {
        return $this->container['projects'];
    }

    /**
     * Sets projects
     *
     * @param \ArthurHlt\Zitadel\Model\V1DataProject[]|null $projects projects
     *
     * @return self
     */
    public function setProjects($projects)
    {
        if (is_null($projects)) {
            throw new \InvalidArgumentException('non-nullable projects cannot be null');
        }
        $this->container['projects'] = $projects;

        return $this;
    }

    /**
     * Gets projectRoles
     *
     * @return \ArthurHlt\Zitadel\Model\V1AddProjectRoleRequest[]|null
     */
    public function getProjectRoles()
    {
        return $this->container['projectRoles'];
    }

    /**
     * Sets projectRoles
     *
     * @param \ArthurHlt\Zitadel\Model\V1AddProjectRoleRequest[]|null $projectRoles projectRoles
     *
     * @return self
     */
    public function setProjectRoles($projectRoles)
    {
        if (is_null($projectRoles)) {
            throw new \InvalidArgumentException('non-nullable projectRoles cannot be null');
        }
        $this->container['projectRoles'] = $projectRoles;

        return $this;
    }

    /**
     * Gets apiApps
     *
     * @return \ArthurHlt\Zitadel\Model\V1DataAPIApplication[]|null
     */
    public function getApiApps()
    {
        return $this->container['apiApps'];
    }

    /**
     * Sets apiApps
     *
     * @param \ArthurHlt\Zitadel\Model\V1DataAPIApplication[]|null $apiApps apiApps
     *
     * @return self
     */
    public function setApiApps($apiApps)
    {
        if (is_null($apiApps)) {
            throw new \InvalidArgumentException('non-nullable apiApps cannot be null');
        }
        $this->container['apiApps'] = $apiApps;

        return $this;
    }

    /**
     * Gets oidcApps
     *
     * @return \ArthurHlt\Zitadel\Model\V1DataOIDCApplication[]|null
     */
    public function getOidcApps()
    {
        return $this->container['oidcApps'];
    }

    /**
     * Sets oidcApps
     *
     * @param \ArthurHlt\Zitadel\Model\V1DataOIDCApplication[]|null $oidcApps oidcApps
     *
     * @return self
     */
    public function setOidcApps($oidcApps)
    {
        if (is_null($oidcApps)) {
            throw new \InvalidArgumentException('non-nullable oidcApps cannot be null');
        }
        $this->container['oidcApps'] = $oidcApps;

        return $this;
    }

    /**
     * Gets humanUsers
     *
     * @return \ArthurHlt\Zitadel\Model\V1DataHumanUser[]|null
     */
    public function getHumanUsers()
    {
        return $this->container['humanUsers'];
    }

    /**
     * Sets humanUsers
     *
     * @param \ArthurHlt\Zitadel\Model\V1DataHumanUser[]|null $humanUsers humanUsers
     *
     * @return self
     */
    public function setHumanUsers($humanUsers)
    {
        if (is_null($humanUsers)) {
            throw new \InvalidArgumentException('non-nullable humanUsers cannot be null');
        }
        $this->container['humanUsers'] = $humanUsers;

        return $this;
    }

    /**
     * Gets machineUsers
     *
     * @return \ArthurHlt\Zitadel\Model\V1DataMachineUser[]|null
     */
    public function getMachineUsers()
    {
        return $this->container['machineUsers'];
    }

    /**
     * Sets machineUsers
     *
     * @param \ArthurHlt\Zitadel\Model\V1DataMachineUser[]|null $machineUsers machineUsers
     *
     * @return self
     */
    public function setMachineUsers($machineUsers)
    {
        if (is_null($machineUsers)) {
            throw new \InvalidArgumentException('non-nullable machineUsers cannot be null');
        }
        $this->container['machineUsers'] = $machineUsers;

        return $this;
    }

    /**
     * Gets triggerActions
     *
     * @return \ArthurHlt\Zitadel\Model\Zitadelv1v1SetTriggerActionsRequest[]|null
     */
    public function getTriggerActions()
    {
        return $this->container['triggerActions'];
    }

    /**
     * Sets triggerActions
     *
     * @param \ArthurHlt\Zitadel\Model\Zitadelv1v1SetTriggerActionsRequest[]|null $triggerActions triggerActions
     *
     * @return self
     */
    public function setTriggerActions($triggerActions)
    {
        if (is_null($triggerActions)) {
            throw new \InvalidArgumentException('non-nullable triggerActions cannot be null');
        }
        $this->container['triggerActions'] = $triggerActions;

        return $this;
    }

    /**
     * Gets actions
     *
     * @return \ArthurHlt\Zitadel\Model\V1DataAction[]|null
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     *
     * @param \ArthurHlt\Zitadel\Model\V1DataAction[]|null $actions actions
     *
     * @return self
     */
    public function setActions($actions)
    {
        if (is_null($actions)) {
            throw new \InvalidArgumentException('non-nullable actions cannot be null');
        }
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets projectGrants
     *
     * @return \ArthurHlt\Zitadel\Model\V1DataProjectGrant[]|null
     */
    public function getProjectGrants()
    {
        return $this->container['projectGrants'];
    }

    /**
     * Sets projectGrants
     *
     * @param \ArthurHlt\Zitadel\Model\V1DataProjectGrant[]|null $projectGrants projectGrants
     *
     * @return self
     */
    public function setProjectGrants($projectGrants)
    {
        if (is_null($projectGrants)) {
            throw new \InvalidArgumentException('non-nullable projectGrants cannot be null');
        }
        $this->container['projectGrants'] = $projectGrants;

        return $this;
    }

    /**
     * Gets userGrants
     *
     * @return \ArthurHlt\Zitadel\Model\V1AddUserGrantRequest[]|null
     */
    public function getUserGrants()
    {
        return $this->container['userGrants'];
    }

    /**
     * Sets userGrants
     *
     * @param \ArthurHlt\Zitadel\Model\V1AddUserGrantRequest[]|null $userGrants userGrants
     *
     * @return self
     */
    public function setUserGrants($userGrants)
    {
        if (is_null($userGrants)) {
            throw new \InvalidArgumentException('non-nullable userGrants cannot be null');
        }
        $this->container['userGrants'] = $userGrants;

        return $this;
    }

    /**
     * Gets orgMembers
     *
     * @return \ArthurHlt\Zitadel\Model\V1AddOrgMemberRequest[]|null
     */
    public function getOrgMembers()
    {
        return $this->container['orgMembers'];
    }

    /**
     * Sets orgMembers
     *
     * @param \ArthurHlt\Zitadel\Model\V1AddOrgMemberRequest[]|null $orgMembers orgMembers
     *
     * @return self
     */
    public function setOrgMembers($orgMembers)
    {
        if (is_null($orgMembers)) {
            throw new \InvalidArgumentException('non-nullable orgMembers cannot be null');
        }
        $this->container['orgMembers'] = $orgMembers;

        return $this;
    }

    /**
     * Gets projectMembers
     *
     * @return \ArthurHlt\Zitadel\Model\V1AddProjectMemberRequest[]|null
     */
    public function getProjectMembers()
    {
        return $this->container['projectMembers'];
    }

    /**
     * Sets projectMembers
     *
     * @param \ArthurHlt\Zitadel\Model\V1AddProjectMemberRequest[]|null $projectMembers projectMembers
     *
     * @return self
     */
    public function setProjectMembers($projectMembers)
    {
        if (is_null($projectMembers)) {
            throw new \InvalidArgumentException('non-nullable projectMembers cannot be null');
        }
        $this->container['projectMembers'] = $projectMembers;

        return $this;
    }

    /**
     * Gets projectGrantMembers
     *
     * @return \ArthurHlt\Zitadel\Model\V1AddProjectGrantMemberRequest[]|null
     */
    public function getProjectGrantMembers()
    {
        return $this->container['projectGrantMembers'];
    }

    /**
     * Sets projectGrantMembers
     *
     * @param \ArthurHlt\Zitadel\Model\V1AddProjectGrantMemberRequest[]|null $projectGrantMembers projectGrantMembers
     *
     * @return self
     */
    public function setProjectGrantMembers($projectGrantMembers)
    {
        if (is_null($projectGrantMembers)) {
            throw new \InvalidArgumentException('non-nullable projectGrantMembers cannot be null');
        }
        $this->container['projectGrantMembers'] = $projectGrantMembers;

        return $this;
    }

    /**
     * Gets userMetadata
     *
     * @return \ArthurHlt\Zitadel\Model\V1SetUserMetadataRequest[]|null
     */
    public function getUserMetadata()
    {
        return $this->container['userMetadata'];
    }

    /**
     * Sets userMetadata
     *
     * @param \ArthurHlt\Zitadel\Model\V1SetUserMetadataRequest[]|null $userMetadata userMetadata
     *
     * @return self
     */
    public function setUserMetadata($userMetadata)
    {
        if (is_null($userMetadata)) {
            throw new \InvalidArgumentException('non-nullable userMetadata cannot be null');
        }
        $this->container['userMetadata'] = $userMetadata;

        return $this;
    }

    /**
     * Gets loginTexts
     *
     * @return \ArthurHlt\Zitadel\Model\Zitadelmanagementv1SetCustomLoginTextsRequest[]|null
     */
    public function getLoginTexts()
    {
        return $this->container['loginTexts'];
    }

    /**
     * Sets loginTexts
     *
     * @param \ArthurHlt\Zitadel\Model\Zitadelmanagementv1SetCustomLoginTextsRequest[]|null $loginTexts loginTexts
     *
     * @return self
     */
    public function setLoginTexts($loginTexts)
    {
        if (is_null($loginTexts)) {
            throw new \InvalidArgumentException('non-nullable loginTexts cannot be null');
        }
        $this->container['loginTexts'] = $loginTexts;

        return $this;
    }

    /**
     * Gets initMessages
     *
     * @return \ArthurHlt\Zitadel\Model\V1SetCustomInitMessageTextRequest[]|null
     */
    public function getInitMessages()
    {
        return $this->container['initMessages'];
    }

    /**
     * Sets initMessages
     *
     * @param \ArthurHlt\Zitadel\Model\V1SetCustomInitMessageTextRequest[]|null $initMessages initMessages
     *
     * @return self
     */
    public function setInitMessages($initMessages)
    {
        if (is_null($initMessages)) {
            throw new \InvalidArgumentException('non-nullable initMessages cannot be null');
        }
        $this->container['initMessages'] = $initMessages;

        return $this;
    }

    /**
     * Gets passwordResetMessages
     *
     * @return \ArthurHlt\Zitadel\Model\V1SetCustomPasswordResetMessageTextRequest[]|null
     */
    public function getPasswordResetMessages()
    {
        return $this->container['passwordResetMessages'];
    }

    /**
     * Sets passwordResetMessages
     *
     * @param \ArthurHlt\Zitadel\Model\V1SetCustomPasswordResetMessageTextRequest[]|null $passwordResetMessages passwordResetMessages
     *
     * @return self
     */
    public function setPasswordResetMessages($passwordResetMessages)
    {
        if (is_null($passwordResetMessages)) {
            throw new \InvalidArgumentException('non-nullable passwordResetMessages cannot be null');
        }
        $this->container['passwordResetMessages'] = $passwordResetMessages;

        return $this;
    }

    /**
     * Gets verifyEmailMessages
     *
     * @return \ArthurHlt\Zitadel\Model\V1SetCustomVerifyEmailMessageTextRequest[]|null
     */
    public function getVerifyEmailMessages()
    {
        return $this->container['verifyEmailMessages'];
    }

    /**
     * Sets verifyEmailMessages
     *
     * @param \ArthurHlt\Zitadel\Model\V1SetCustomVerifyEmailMessageTextRequest[]|null $verifyEmailMessages verifyEmailMessages
     *
     * @return self
     */
    public function setVerifyEmailMessages($verifyEmailMessages)
    {
        if (is_null($verifyEmailMessages)) {
            throw new \InvalidArgumentException('non-nullable verifyEmailMessages cannot be null');
        }
        $this->container['verifyEmailMessages'] = $verifyEmailMessages;

        return $this;
    }

    /**
     * Gets verifyPhoneMessages
     *
     * @return \ArthurHlt\Zitadel\Model\V1SetCustomVerifyPhoneMessageTextRequest[]|null
     */
    public function getVerifyPhoneMessages()
    {
        return $this->container['verifyPhoneMessages'];
    }

    /**
     * Sets verifyPhoneMessages
     *
     * @param \ArthurHlt\Zitadel\Model\V1SetCustomVerifyPhoneMessageTextRequest[]|null $verifyPhoneMessages verifyPhoneMessages
     *
     * @return self
     */
    public function setVerifyPhoneMessages($verifyPhoneMessages)
    {
        if (is_null($verifyPhoneMessages)) {
            throw new \InvalidArgumentException('non-nullable verifyPhoneMessages cannot be null');
        }
        $this->container['verifyPhoneMessages'] = $verifyPhoneMessages;

        return $this;
    }

    /**
     * Gets domainClaimedMessages
     *
     * @return \ArthurHlt\Zitadel\Model\V1SetCustomDomainClaimedMessageTextRequest[]|null
     */
    public function getDomainClaimedMessages()
    {
        return $this->container['domainClaimedMessages'];
    }

    /**
     * Sets domainClaimedMessages
     *
     * @param \ArthurHlt\Zitadel\Model\V1SetCustomDomainClaimedMessageTextRequest[]|null $domainClaimedMessages domainClaimedMessages
     *
     * @return self
     */
    public function setDomainClaimedMessages($domainClaimedMessages)
    {
        if (is_null($domainClaimedMessages)) {
            throw new \InvalidArgumentException('non-nullable domainClaimedMessages cannot be null');
        }
        $this->container['domainClaimedMessages'] = $domainClaimedMessages;

        return $this;
    }

    /**
     * Gets passwordlessRegistrationMessages
     *
     * @return \ArthurHlt\Zitadel\Model\V1SetCustomPasswordlessRegistrationMessageTextRequest[]|null
     */
    public function getPasswordlessRegistrationMessages()
    {
        return $this->container['passwordlessRegistrationMessages'];
    }

    /**
     * Sets passwordlessRegistrationMessages
     *
     * @param \ArthurHlt\Zitadel\Model\V1SetCustomPasswordlessRegistrationMessageTextRequest[]|null $passwordlessRegistrationMessages passwordlessRegistrationMessages
     *
     * @return self
     */
    public function setPasswordlessRegistrationMessages($passwordlessRegistrationMessages)
    {
        if (is_null($passwordlessRegistrationMessages)) {
            throw new \InvalidArgumentException('non-nullable passwordlessRegistrationMessages cannot be null');
        }
        $this->container['passwordlessRegistrationMessages'] = $passwordlessRegistrationMessages;

        return $this;
    }

    /**
     * Gets oidcIdps
     *
     * @return \ArthurHlt\Zitadel\Model\V1DataOIDCIDP[]|null
     */
    public function getOidcIdps()
    {
        return $this->container['oidcIdps'];
    }

    /**
     * Sets oidcIdps
     *
     * @param \ArthurHlt\Zitadel\Model\V1DataOIDCIDP[]|null $oidcIdps oidcIdps
     *
     * @return self
     */
    public function setOidcIdps($oidcIdps)
    {
        if (is_null($oidcIdps)) {
            throw new \InvalidArgumentException('non-nullable oidcIdps cannot be null');
        }
        $this->container['oidcIdps'] = $oidcIdps;

        return $this;
    }

    /**
     * Gets jwtIdps
     *
     * @return \ArthurHlt\Zitadel\Model\V1DataJWTIDP[]|null
     */
    public function getJwtIdps()
    {
        return $this->container['jwtIdps'];
    }

    /**
     * Sets jwtIdps
     *
     * @param \ArthurHlt\Zitadel\Model\V1DataJWTIDP[]|null $jwtIdps jwtIdps
     *
     * @return self
     */
    public function setJwtIdps($jwtIdps)
    {
        if (is_null($jwtIdps)) {
            throw new \InvalidArgumentException('non-nullable jwtIdps cannot be null');
        }
        $this->container['jwtIdps'] = $jwtIdps;

        return $this;
    }

    /**
     * Gets secondFactors
     *
     * @return \ArthurHlt\Zitadel\Model\Zitadelmanagementv1AddSecondFactorToLoginPolicyRequest[]|null
     */
    public function getSecondFactors()
    {
        return $this->container['secondFactors'];
    }

    /**
     * Sets secondFactors
     *
     * @param \ArthurHlt\Zitadel\Model\Zitadelmanagementv1AddSecondFactorToLoginPolicyRequest[]|null $secondFactors secondFactors
     *
     * @return self
     */
    public function setSecondFactors($secondFactors)
    {
        if (is_null($secondFactors)) {
            throw new \InvalidArgumentException('non-nullable secondFactors cannot be null');
        }
        $this->container['secondFactors'] = $secondFactors;

        return $this;
    }

    /**
     * Gets multiFactors
     *
     * @return \ArthurHlt\Zitadel\Model\Zitadelmanagementv1AddMultiFactorToLoginPolicyRequest[]|null
     */
    public function getMultiFactors()
    {
        return $this->container['multiFactors'];
    }

    /**
     * Sets multiFactors
     *
     * @param \ArthurHlt\Zitadel\Model\Zitadelmanagementv1AddMultiFactorToLoginPolicyRequest[]|null $multiFactors multiFactors
     *
     * @return self
     */
    public function setMultiFactors($multiFactors)
    {
        if (is_null($multiFactors)) {
            throw new \InvalidArgumentException('non-nullable multiFactors cannot be null');
        }
        $this->container['multiFactors'] = $multiFactors;

        return $this;
    }

    /**
     * Gets idps
     *
     * @return \ArthurHlt\Zitadel\Model\Zitadelmanagementv1AddIDPToLoginPolicyRequest[]|null
     */
    public function getIdps()
    {
        return $this->container['idps'];
    }

    /**
     * Sets idps
     *
     * @param \ArthurHlt\Zitadel\Model\Zitadelmanagementv1AddIDPToLoginPolicyRequest[]|null $idps idps
     *
     * @return self
     */
    public function setIdps($idps)
    {
        if (is_null($idps)) {
            throw new \InvalidArgumentException('non-nullable idps cannot be null');
        }
        $this->container['idps'] = $idps;

        return $this;
    }

    /**
     * Gets userLinks
     *
     * @return \ArthurHlt\Zitadel\Model\V1IDPUserLink[]|null
     */
    public function getUserLinks()
    {
        return $this->container['userLinks'];
    }

    /**
     * Sets userLinks
     *
     * @param \ArthurHlt\Zitadel\Model\V1IDPUserLink[]|null $userLinks userLinks
     *
     * @return self
     */
    public function setUserLinks($userLinks)
    {
        if (is_null($userLinks)) {
            throw new \InvalidArgumentException('non-nullable userLinks cannot be null');
        }
        $this->container['userLinks'] = $userLinks;

        return $this;
    }

    /**
     * Gets domains
     *
     * @return \ArthurHlt\Zitadel\Model\Zitadelorgv1Domain[]|null
     */
    public function getDomains()
    {
        return $this->container['domains'];
    }

    /**
     * Sets domains
     *
     * @param \ArthurHlt\Zitadel\Model\Zitadelorgv1Domain[]|null $domains domains
     *
     * @return self
     */
    public function setDomains($domains)
    {
        if (is_null($domains)) {
            throw new \InvalidArgumentException('non-nullable domains cannot be null');
        }
        $this->container['domains'] = $domains;

        return $this;
    }

    /**
     * Gets appKeys
     *
     * @return \ArthurHlt\Zitadel\Model\V1DataAppKey[]|null
     */
    public function getAppKeys()
    {
        return $this->container['appKeys'];
    }

    /**
     * Sets appKeys
     *
     * @param \ArthurHlt\Zitadel\Model\V1DataAppKey[]|null $appKeys appKeys
     *
     * @return self
     */
    public function setAppKeys($appKeys)
    {
        if (is_null($appKeys)) {
            throw new \InvalidArgumentException('non-nullable appKeys cannot be null');
        }
        $this->container['appKeys'] = $appKeys;

        return $this;
    }

    /**
     * Gets machineKeys
     *
     * @return \ArthurHlt\Zitadel\Model\V1DataMachineKey[]|null
     */
    public function getMachineKeys()
    {
        return $this->container['machineKeys'];
    }

    /**
     * Sets machineKeys
     *
     * @param \ArthurHlt\Zitadel\Model\V1DataMachineKey[]|null $machineKeys machineKeys
     *
     * @return self
     */
    public function setMachineKeys($machineKeys)
    {
        if (is_null($machineKeys)) {
            throw new \InvalidArgumentException('non-nullable machineKeys cannot be null');
        }
        $this->container['machineKeys'] = $machineKeys;

        return $this;
    }

    /**
     * Gets inviteUserMessages
     *
     * @return \ArthurHlt\Zitadel\Model\V1SetCustomInviteUserMessageTextRequest[]|null
     */
    public function getInviteUserMessages()
    {
        return $this->container['inviteUserMessages'];
    }

    /**
     * Sets inviteUserMessages
     *
     * @param \ArthurHlt\Zitadel\Model\V1SetCustomInviteUserMessageTextRequest[]|null $inviteUserMessages inviteUserMessages
     *
     * @return self
     */
    public function setInviteUserMessages($inviteUserMessages)
    {
        if (is_null($inviteUserMessages)) {
            throw new \InvalidArgumentException('non-nullable inviteUserMessages cannot be null');
        }
        $this->container['inviteUserMessages'] = $inviteUserMessages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


