<?php
/**
 * V1LoginCustomText
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ArthurHlt\Zitadel\Model;

use \ArrayAccess;
use \ArthurHlt\Zitadel\ObjectSerializer;

/**
 * V1LoginCustomText Class Doc Comment
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V1LoginCustomText implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'v1LoginCustomText';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'details' => '\ArthurHlt\Zitadel\Model\V1ObjectDetails',
        'selectAccountText' => '\ArthurHlt\Zitadel\Model\V1SelectAccountScreenText',
        'loginText' => '\ArthurHlt\Zitadel\Model\V1LoginScreenText',
        'passwordText' => '\ArthurHlt\Zitadel\Model\V1PasswordScreenText',
        'usernameChangeText' => '\ArthurHlt\Zitadel\Model\V1UsernameChangeScreenText',
        'usernameChangeDoneText' => '\ArthurHlt\Zitadel\Model\V1UsernameChangeDoneScreenText',
        'initPasswordText' => '\ArthurHlt\Zitadel\Model\V1InitPasswordScreenText',
        'initPasswordDoneText' => '\ArthurHlt\Zitadel\Model\V1InitPasswordDoneScreenText',
        'emailVerificationText' => '\ArthurHlt\Zitadel\Model\V1EmailVerificationScreenText',
        'emailVerificationDoneText' => '\ArthurHlt\Zitadel\Model\V1EmailVerificationDoneScreenText',
        'initializeUserText' => '\ArthurHlt\Zitadel\Model\V1InitializeUserScreenText',
        'initializeDoneText' => '\ArthurHlt\Zitadel\Model\V1InitializeUserDoneScreenText',
        'initMfaPromptText' => '\ArthurHlt\Zitadel\Model\V1InitMFAPromptScreenText',
        'initMfaOtpText' => '\ArthurHlt\Zitadel\Model\V1InitMFAOTPScreenText',
        'initMfaU2fText' => '\ArthurHlt\Zitadel\Model\V1InitMFAU2FScreenText',
        'initMfaDoneText' => '\ArthurHlt\Zitadel\Model\V1InitMFADoneScreenText',
        'mfaProvidersText' => '\ArthurHlt\Zitadel\Model\V1MFAProvidersText',
        'verifyMfaOtpText' => '\ArthurHlt\Zitadel\Model\V1VerifyMFAOTPScreenText',
        'verifyMfaU2fText' => '\ArthurHlt\Zitadel\Model\V1VerifyMFAU2FScreenText',
        'passwordlessText' => '\ArthurHlt\Zitadel\Model\V1PasswordlessScreenText',
        'passwordChangeText' => '\ArthurHlt\Zitadel\Model\V1PasswordChangeScreenText',
        'passwordChangeDoneText' => '\ArthurHlt\Zitadel\Model\V1PasswordChangeDoneScreenText',
        'passwordResetDoneText' => '\ArthurHlt\Zitadel\Model\V1PasswordResetDoneScreenText',
        'registrationOptionText' => '\ArthurHlt\Zitadel\Model\V1RegistrationOptionScreenText',
        'registrationUserText' => '\ArthurHlt\Zitadel\Model\V1RegistrationUserScreenText',
        'registrationOrgText' => '\ArthurHlt\Zitadel\Model\V1RegistrationOrgScreenText',
        'linkingUserDoneText' => '\ArthurHlt\Zitadel\Model\V1LinkingUserDoneScreenText',
        'externalUserNotFoundText' => '\ArthurHlt\Zitadel\Model\V1ExternalUserNotFoundScreenText',
        'successLoginText' => '\ArthurHlt\Zitadel\Model\V1SuccessLoginScreenText',
        'logoutText' => '\ArthurHlt\Zitadel\Model\V1LogoutDoneScreenText',
        'footerText' => '\ArthurHlt\Zitadel\Model\V1FooterText',
        'passwordlessPromptText' => '\ArthurHlt\Zitadel\Model\V1PasswordlessPromptScreenText',
        'passwordlessRegistrationText' => '\ArthurHlt\Zitadel\Model\V1PasswordlessRegistrationScreenText',
        'passwordlessRegistrationDoneText' => '\ArthurHlt\Zitadel\Model\V1PasswordlessRegistrationDoneScreenText',
        'externalRegistrationUserOverviewText' => '\ArthurHlt\Zitadel\Model\V1ExternalRegistrationUserOverviewScreenText',
        'isDefault' => 'bool',
        'linkingUserPromptText' => '\ArthurHlt\Zitadel\Model\V1LinkingUserPromptScreenText'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'details' => null,
        'selectAccountText' => null,
        'loginText' => null,
        'passwordText' => null,
        'usernameChangeText' => null,
        'usernameChangeDoneText' => null,
        'initPasswordText' => null,
        'initPasswordDoneText' => null,
        'emailVerificationText' => null,
        'emailVerificationDoneText' => null,
        'initializeUserText' => null,
        'initializeDoneText' => null,
        'initMfaPromptText' => null,
        'initMfaOtpText' => null,
        'initMfaU2fText' => null,
        'initMfaDoneText' => null,
        'mfaProvidersText' => null,
        'verifyMfaOtpText' => null,
        'verifyMfaU2fText' => null,
        'passwordlessText' => null,
        'passwordChangeText' => null,
        'passwordChangeDoneText' => null,
        'passwordResetDoneText' => null,
        'registrationOptionText' => null,
        'registrationUserText' => null,
        'registrationOrgText' => null,
        'linkingUserDoneText' => null,
        'externalUserNotFoundText' => null,
        'successLoginText' => null,
        'logoutText' => null,
        'footerText' => null,
        'passwordlessPromptText' => null,
        'passwordlessRegistrationText' => null,
        'passwordlessRegistrationDoneText' => null,
        'externalRegistrationUserOverviewText' => null,
        'isDefault' => null,
        'linkingUserPromptText' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'details' => false,
        'selectAccountText' => false,
        'loginText' => false,
        'passwordText' => false,
        'usernameChangeText' => false,
        'usernameChangeDoneText' => false,
        'initPasswordText' => false,
        'initPasswordDoneText' => false,
        'emailVerificationText' => false,
        'emailVerificationDoneText' => false,
        'initializeUserText' => false,
        'initializeDoneText' => false,
        'initMfaPromptText' => false,
        'initMfaOtpText' => false,
        'initMfaU2fText' => false,
        'initMfaDoneText' => false,
        'mfaProvidersText' => false,
        'verifyMfaOtpText' => false,
        'verifyMfaU2fText' => false,
        'passwordlessText' => false,
        'passwordChangeText' => false,
        'passwordChangeDoneText' => false,
        'passwordResetDoneText' => false,
        'registrationOptionText' => false,
        'registrationUserText' => false,
        'registrationOrgText' => false,
        'linkingUserDoneText' => false,
        'externalUserNotFoundText' => false,
        'successLoginText' => false,
        'logoutText' => false,
        'footerText' => false,
        'passwordlessPromptText' => false,
        'passwordlessRegistrationText' => false,
        'passwordlessRegistrationDoneText' => false,
        'externalRegistrationUserOverviewText' => false,
        'isDefault' => false,
        'linkingUserPromptText' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'details' => 'details',
        'selectAccountText' => 'selectAccountText',
        'loginText' => 'loginText',
        'passwordText' => 'passwordText',
        'usernameChangeText' => 'usernameChangeText',
        'usernameChangeDoneText' => 'usernameChangeDoneText',
        'initPasswordText' => 'initPasswordText',
        'initPasswordDoneText' => 'initPasswordDoneText',
        'emailVerificationText' => 'emailVerificationText',
        'emailVerificationDoneText' => 'emailVerificationDoneText',
        'initializeUserText' => 'initializeUserText',
        'initializeDoneText' => 'initializeDoneText',
        'initMfaPromptText' => 'initMfaPromptText',
        'initMfaOtpText' => 'initMfaOtpText',
        'initMfaU2fText' => 'initMfaU2fText',
        'initMfaDoneText' => 'initMfaDoneText',
        'mfaProvidersText' => 'mfaProvidersText',
        'verifyMfaOtpText' => 'verifyMfaOtpText',
        'verifyMfaU2fText' => 'verifyMfaU2fText',
        'passwordlessText' => 'passwordlessText',
        'passwordChangeText' => 'passwordChangeText',
        'passwordChangeDoneText' => 'passwordChangeDoneText',
        'passwordResetDoneText' => 'passwordResetDoneText',
        'registrationOptionText' => 'registrationOptionText',
        'registrationUserText' => 'registrationUserText',
        'registrationOrgText' => 'registrationOrgText',
        'linkingUserDoneText' => 'linkingUserDoneText',
        'externalUserNotFoundText' => 'externalUserNotFoundText',
        'successLoginText' => 'successLoginText',
        'logoutText' => 'logoutText',
        'footerText' => 'footerText',
        'passwordlessPromptText' => 'passwordlessPromptText',
        'passwordlessRegistrationText' => 'passwordlessRegistrationText',
        'passwordlessRegistrationDoneText' => 'passwordlessRegistrationDoneText',
        'externalRegistrationUserOverviewText' => 'externalRegistrationUserOverviewText',
        'isDefault' => 'isDefault',
        'linkingUserPromptText' => 'linkingUserPromptText'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'details' => 'setDetails',
        'selectAccountText' => 'setSelectAccountText',
        'loginText' => 'setLoginText',
        'passwordText' => 'setPasswordText',
        'usernameChangeText' => 'setUsernameChangeText',
        'usernameChangeDoneText' => 'setUsernameChangeDoneText',
        'initPasswordText' => 'setInitPasswordText',
        'initPasswordDoneText' => 'setInitPasswordDoneText',
        'emailVerificationText' => 'setEmailVerificationText',
        'emailVerificationDoneText' => 'setEmailVerificationDoneText',
        'initializeUserText' => 'setInitializeUserText',
        'initializeDoneText' => 'setInitializeDoneText',
        'initMfaPromptText' => 'setInitMfaPromptText',
        'initMfaOtpText' => 'setInitMfaOtpText',
        'initMfaU2fText' => 'setInitMfaU2fText',
        'initMfaDoneText' => 'setInitMfaDoneText',
        'mfaProvidersText' => 'setMfaProvidersText',
        'verifyMfaOtpText' => 'setVerifyMfaOtpText',
        'verifyMfaU2fText' => 'setVerifyMfaU2fText',
        'passwordlessText' => 'setPasswordlessText',
        'passwordChangeText' => 'setPasswordChangeText',
        'passwordChangeDoneText' => 'setPasswordChangeDoneText',
        'passwordResetDoneText' => 'setPasswordResetDoneText',
        'registrationOptionText' => 'setRegistrationOptionText',
        'registrationUserText' => 'setRegistrationUserText',
        'registrationOrgText' => 'setRegistrationOrgText',
        'linkingUserDoneText' => 'setLinkingUserDoneText',
        'externalUserNotFoundText' => 'setExternalUserNotFoundText',
        'successLoginText' => 'setSuccessLoginText',
        'logoutText' => 'setLogoutText',
        'footerText' => 'setFooterText',
        'passwordlessPromptText' => 'setPasswordlessPromptText',
        'passwordlessRegistrationText' => 'setPasswordlessRegistrationText',
        'passwordlessRegistrationDoneText' => 'setPasswordlessRegistrationDoneText',
        'externalRegistrationUserOverviewText' => 'setExternalRegistrationUserOverviewText',
        'isDefault' => 'setIsDefault',
        'linkingUserPromptText' => 'setLinkingUserPromptText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'details' => 'getDetails',
        'selectAccountText' => 'getSelectAccountText',
        'loginText' => 'getLoginText',
        'passwordText' => 'getPasswordText',
        'usernameChangeText' => 'getUsernameChangeText',
        'usernameChangeDoneText' => 'getUsernameChangeDoneText',
        'initPasswordText' => 'getInitPasswordText',
        'initPasswordDoneText' => 'getInitPasswordDoneText',
        'emailVerificationText' => 'getEmailVerificationText',
        'emailVerificationDoneText' => 'getEmailVerificationDoneText',
        'initializeUserText' => 'getInitializeUserText',
        'initializeDoneText' => 'getInitializeDoneText',
        'initMfaPromptText' => 'getInitMfaPromptText',
        'initMfaOtpText' => 'getInitMfaOtpText',
        'initMfaU2fText' => 'getInitMfaU2fText',
        'initMfaDoneText' => 'getInitMfaDoneText',
        'mfaProvidersText' => 'getMfaProvidersText',
        'verifyMfaOtpText' => 'getVerifyMfaOtpText',
        'verifyMfaU2fText' => 'getVerifyMfaU2fText',
        'passwordlessText' => 'getPasswordlessText',
        'passwordChangeText' => 'getPasswordChangeText',
        'passwordChangeDoneText' => 'getPasswordChangeDoneText',
        'passwordResetDoneText' => 'getPasswordResetDoneText',
        'registrationOptionText' => 'getRegistrationOptionText',
        'registrationUserText' => 'getRegistrationUserText',
        'registrationOrgText' => 'getRegistrationOrgText',
        'linkingUserDoneText' => 'getLinkingUserDoneText',
        'externalUserNotFoundText' => 'getExternalUserNotFoundText',
        'successLoginText' => 'getSuccessLoginText',
        'logoutText' => 'getLogoutText',
        'footerText' => 'getFooterText',
        'passwordlessPromptText' => 'getPasswordlessPromptText',
        'passwordlessRegistrationText' => 'getPasswordlessRegistrationText',
        'passwordlessRegistrationDoneText' => 'getPasswordlessRegistrationDoneText',
        'externalRegistrationUserOverviewText' => 'getExternalRegistrationUserOverviewText',
        'isDefault' => 'getIsDefault',
        'linkingUserPromptText' => 'getLinkingUserPromptText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('details', $data ?? [], null);
        $this->setIfExists('selectAccountText', $data ?? [], null);
        $this->setIfExists('loginText', $data ?? [], null);
        $this->setIfExists('passwordText', $data ?? [], null);
        $this->setIfExists('usernameChangeText', $data ?? [], null);
        $this->setIfExists('usernameChangeDoneText', $data ?? [], null);
        $this->setIfExists('initPasswordText', $data ?? [], null);
        $this->setIfExists('initPasswordDoneText', $data ?? [], null);
        $this->setIfExists('emailVerificationText', $data ?? [], null);
        $this->setIfExists('emailVerificationDoneText', $data ?? [], null);
        $this->setIfExists('initializeUserText', $data ?? [], null);
        $this->setIfExists('initializeDoneText', $data ?? [], null);
        $this->setIfExists('initMfaPromptText', $data ?? [], null);
        $this->setIfExists('initMfaOtpText', $data ?? [], null);
        $this->setIfExists('initMfaU2fText', $data ?? [], null);
        $this->setIfExists('initMfaDoneText', $data ?? [], null);
        $this->setIfExists('mfaProvidersText', $data ?? [], null);
        $this->setIfExists('verifyMfaOtpText', $data ?? [], null);
        $this->setIfExists('verifyMfaU2fText', $data ?? [], null);
        $this->setIfExists('passwordlessText', $data ?? [], null);
        $this->setIfExists('passwordChangeText', $data ?? [], null);
        $this->setIfExists('passwordChangeDoneText', $data ?? [], null);
        $this->setIfExists('passwordResetDoneText', $data ?? [], null);
        $this->setIfExists('registrationOptionText', $data ?? [], null);
        $this->setIfExists('registrationUserText', $data ?? [], null);
        $this->setIfExists('registrationOrgText', $data ?? [], null);
        $this->setIfExists('linkingUserDoneText', $data ?? [], null);
        $this->setIfExists('externalUserNotFoundText', $data ?? [], null);
        $this->setIfExists('successLoginText', $data ?? [], null);
        $this->setIfExists('logoutText', $data ?? [], null);
        $this->setIfExists('footerText', $data ?? [], null);
        $this->setIfExists('passwordlessPromptText', $data ?? [], null);
        $this->setIfExists('passwordlessRegistrationText', $data ?? [], null);
        $this->setIfExists('passwordlessRegistrationDoneText', $data ?? [], null);
        $this->setIfExists('externalRegistrationUserOverviewText', $data ?? [], null);
        $this->setIfExists('isDefault', $data ?? [], null);
        $this->setIfExists('linkingUserPromptText', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets details
     *
     * @return \ArthurHlt\Zitadel\Model\V1ObjectDetails|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \ArthurHlt\Zitadel\Model\V1ObjectDetails|null $details details
     *
     * @return self
     */
    public function setDetails($details)
    {
        if (is_null($details)) {
            throw new \InvalidArgumentException('non-nullable details cannot be null');
        }
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets selectAccountText
     *
     * @return \ArthurHlt\Zitadel\Model\V1SelectAccountScreenText|null
     */
    public function getSelectAccountText()
    {
        return $this->container['selectAccountText'];
    }

    /**
     * Sets selectAccountText
     *
     * @param \ArthurHlt\Zitadel\Model\V1SelectAccountScreenText|null $selectAccountText selectAccountText
     *
     * @return self
     */
    public function setSelectAccountText($selectAccountText)
    {
        if (is_null($selectAccountText)) {
            throw new \InvalidArgumentException('non-nullable selectAccountText cannot be null');
        }
        $this->container['selectAccountText'] = $selectAccountText;

        return $this;
    }

    /**
     * Gets loginText
     *
     * @return \ArthurHlt\Zitadel\Model\V1LoginScreenText|null
     */
    public function getLoginText()
    {
        return $this->container['loginText'];
    }

    /**
     * Sets loginText
     *
     * @param \ArthurHlt\Zitadel\Model\V1LoginScreenText|null $loginText loginText
     *
     * @return self
     */
    public function setLoginText($loginText)
    {
        if (is_null($loginText)) {
            throw new \InvalidArgumentException('non-nullable loginText cannot be null');
        }
        $this->container['loginText'] = $loginText;

        return $this;
    }

    /**
     * Gets passwordText
     *
     * @return \ArthurHlt\Zitadel\Model\V1PasswordScreenText|null
     */
    public function getPasswordText()
    {
        return $this->container['passwordText'];
    }

    /**
     * Sets passwordText
     *
     * @param \ArthurHlt\Zitadel\Model\V1PasswordScreenText|null $passwordText passwordText
     *
     * @return self
     */
    public function setPasswordText($passwordText)
    {
        if (is_null($passwordText)) {
            throw new \InvalidArgumentException('non-nullable passwordText cannot be null');
        }
        $this->container['passwordText'] = $passwordText;

        return $this;
    }

    /**
     * Gets usernameChangeText
     *
     * @return \ArthurHlt\Zitadel\Model\V1UsernameChangeScreenText|null
     */
    public function getUsernameChangeText()
    {
        return $this->container['usernameChangeText'];
    }

    /**
     * Sets usernameChangeText
     *
     * @param \ArthurHlt\Zitadel\Model\V1UsernameChangeScreenText|null $usernameChangeText usernameChangeText
     *
     * @return self
     */
    public function setUsernameChangeText($usernameChangeText)
    {
        if (is_null($usernameChangeText)) {
            throw new \InvalidArgumentException('non-nullable usernameChangeText cannot be null');
        }
        $this->container['usernameChangeText'] = $usernameChangeText;

        return $this;
    }

    /**
     * Gets usernameChangeDoneText
     *
     * @return \ArthurHlt\Zitadel\Model\V1UsernameChangeDoneScreenText|null
     */
    public function getUsernameChangeDoneText()
    {
        return $this->container['usernameChangeDoneText'];
    }

    /**
     * Sets usernameChangeDoneText
     *
     * @param \ArthurHlt\Zitadel\Model\V1UsernameChangeDoneScreenText|null $usernameChangeDoneText usernameChangeDoneText
     *
     * @return self
     */
    public function setUsernameChangeDoneText($usernameChangeDoneText)
    {
        if (is_null($usernameChangeDoneText)) {
            throw new \InvalidArgumentException('non-nullable usernameChangeDoneText cannot be null');
        }
        $this->container['usernameChangeDoneText'] = $usernameChangeDoneText;

        return $this;
    }

    /**
     * Gets initPasswordText
     *
     * @return \ArthurHlt\Zitadel\Model\V1InitPasswordScreenText|null
     */
    public function getInitPasswordText()
    {
        return $this->container['initPasswordText'];
    }

    /**
     * Sets initPasswordText
     *
     * @param \ArthurHlt\Zitadel\Model\V1InitPasswordScreenText|null $initPasswordText initPasswordText
     *
     * @return self
     */
    public function setInitPasswordText($initPasswordText)
    {
        if (is_null($initPasswordText)) {
            throw new \InvalidArgumentException('non-nullable initPasswordText cannot be null');
        }
        $this->container['initPasswordText'] = $initPasswordText;

        return $this;
    }

    /**
     * Gets initPasswordDoneText
     *
     * @return \ArthurHlt\Zitadel\Model\V1InitPasswordDoneScreenText|null
     */
    public function getInitPasswordDoneText()
    {
        return $this->container['initPasswordDoneText'];
    }

    /**
     * Sets initPasswordDoneText
     *
     * @param \ArthurHlt\Zitadel\Model\V1InitPasswordDoneScreenText|null $initPasswordDoneText initPasswordDoneText
     *
     * @return self
     */
    public function setInitPasswordDoneText($initPasswordDoneText)
    {
        if (is_null($initPasswordDoneText)) {
            throw new \InvalidArgumentException('non-nullable initPasswordDoneText cannot be null');
        }
        $this->container['initPasswordDoneText'] = $initPasswordDoneText;

        return $this;
    }

    /**
     * Gets emailVerificationText
     *
     * @return \ArthurHlt\Zitadel\Model\V1EmailVerificationScreenText|null
     */
    public function getEmailVerificationText()
    {
        return $this->container['emailVerificationText'];
    }

    /**
     * Sets emailVerificationText
     *
     * @param \ArthurHlt\Zitadel\Model\V1EmailVerificationScreenText|null $emailVerificationText emailVerificationText
     *
     * @return self
     */
    public function setEmailVerificationText($emailVerificationText)
    {
        if (is_null($emailVerificationText)) {
            throw new \InvalidArgumentException('non-nullable emailVerificationText cannot be null');
        }
        $this->container['emailVerificationText'] = $emailVerificationText;

        return $this;
    }

    /**
     * Gets emailVerificationDoneText
     *
     * @return \ArthurHlt\Zitadel\Model\V1EmailVerificationDoneScreenText|null
     */
    public function getEmailVerificationDoneText()
    {
        return $this->container['emailVerificationDoneText'];
    }

    /**
     * Sets emailVerificationDoneText
     *
     * @param \ArthurHlt\Zitadel\Model\V1EmailVerificationDoneScreenText|null $emailVerificationDoneText emailVerificationDoneText
     *
     * @return self
     */
    public function setEmailVerificationDoneText($emailVerificationDoneText)
    {
        if (is_null($emailVerificationDoneText)) {
            throw new \InvalidArgumentException('non-nullable emailVerificationDoneText cannot be null');
        }
        $this->container['emailVerificationDoneText'] = $emailVerificationDoneText;

        return $this;
    }

    /**
     * Gets initializeUserText
     *
     * @return \ArthurHlt\Zitadel\Model\V1InitializeUserScreenText|null
     */
    public function getInitializeUserText()
    {
        return $this->container['initializeUserText'];
    }

    /**
     * Sets initializeUserText
     *
     * @param \ArthurHlt\Zitadel\Model\V1InitializeUserScreenText|null $initializeUserText initializeUserText
     *
     * @return self
     */
    public function setInitializeUserText($initializeUserText)
    {
        if (is_null($initializeUserText)) {
            throw new \InvalidArgumentException('non-nullable initializeUserText cannot be null');
        }
        $this->container['initializeUserText'] = $initializeUserText;

        return $this;
    }

    /**
     * Gets initializeDoneText
     *
     * @return \ArthurHlt\Zitadel\Model\V1InitializeUserDoneScreenText|null
     */
    public function getInitializeDoneText()
    {
        return $this->container['initializeDoneText'];
    }

    /**
     * Sets initializeDoneText
     *
     * @param \ArthurHlt\Zitadel\Model\V1InitializeUserDoneScreenText|null $initializeDoneText initializeDoneText
     *
     * @return self
     */
    public function setInitializeDoneText($initializeDoneText)
    {
        if (is_null($initializeDoneText)) {
            throw new \InvalidArgumentException('non-nullable initializeDoneText cannot be null');
        }
        $this->container['initializeDoneText'] = $initializeDoneText;

        return $this;
    }

    /**
     * Gets initMfaPromptText
     *
     * @return \ArthurHlt\Zitadel\Model\V1InitMFAPromptScreenText|null
     */
    public function getInitMfaPromptText()
    {
        return $this->container['initMfaPromptText'];
    }

    /**
     * Sets initMfaPromptText
     *
     * @param \ArthurHlt\Zitadel\Model\V1InitMFAPromptScreenText|null $initMfaPromptText initMfaPromptText
     *
     * @return self
     */
    public function setInitMfaPromptText($initMfaPromptText)
    {
        if (is_null($initMfaPromptText)) {
            throw new \InvalidArgumentException('non-nullable initMfaPromptText cannot be null');
        }
        $this->container['initMfaPromptText'] = $initMfaPromptText;

        return $this;
    }

    /**
     * Gets initMfaOtpText
     *
     * @return \ArthurHlt\Zitadel\Model\V1InitMFAOTPScreenText|null
     */
    public function getInitMfaOtpText()
    {
        return $this->container['initMfaOtpText'];
    }

    /**
     * Sets initMfaOtpText
     *
     * @param \ArthurHlt\Zitadel\Model\V1InitMFAOTPScreenText|null $initMfaOtpText initMfaOtpText
     *
     * @return self
     */
    public function setInitMfaOtpText($initMfaOtpText)
    {
        if (is_null($initMfaOtpText)) {
            throw new \InvalidArgumentException('non-nullable initMfaOtpText cannot be null');
        }
        $this->container['initMfaOtpText'] = $initMfaOtpText;

        return $this;
    }

    /**
     * Gets initMfaU2fText
     *
     * @return \ArthurHlt\Zitadel\Model\V1InitMFAU2FScreenText|null
     */
    public function getInitMfaU2fText()
    {
        return $this->container['initMfaU2fText'];
    }

    /**
     * Sets initMfaU2fText
     *
     * @param \ArthurHlt\Zitadel\Model\V1InitMFAU2FScreenText|null $initMfaU2fText initMfaU2fText
     *
     * @return self
     */
    public function setInitMfaU2fText($initMfaU2fText)
    {
        if (is_null($initMfaU2fText)) {
            throw new \InvalidArgumentException('non-nullable initMfaU2fText cannot be null');
        }
        $this->container['initMfaU2fText'] = $initMfaU2fText;

        return $this;
    }

    /**
     * Gets initMfaDoneText
     *
     * @return \ArthurHlt\Zitadel\Model\V1InitMFADoneScreenText|null
     */
    public function getInitMfaDoneText()
    {
        return $this->container['initMfaDoneText'];
    }

    /**
     * Sets initMfaDoneText
     *
     * @param \ArthurHlt\Zitadel\Model\V1InitMFADoneScreenText|null $initMfaDoneText initMfaDoneText
     *
     * @return self
     */
    public function setInitMfaDoneText($initMfaDoneText)
    {
        if (is_null($initMfaDoneText)) {
            throw new \InvalidArgumentException('non-nullable initMfaDoneText cannot be null');
        }
        $this->container['initMfaDoneText'] = $initMfaDoneText;

        return $this;
    }

    /**
     * Gets mfaProvidersText
     *
     * @return \ArthurHlt\Zitadel\Model\V1MFAProvidersText|null
     */
    public function getMfaProvidersText()
    {
        return $this->container['mfaProvidersText'];
    }

    /**
     * Sets mfaProvidersText
     *
     * @param \ArthurHlt\Zitadel\Model\V1MFAProvidersText|null $mfaProvidersText mfaProvidersText
     *
     * @return self
     */
    public function setMfaProvidersText($mfaProvidersText)
    {
        if (is_null($mfaProvidersText)) {
            throw new \InvalidArgumentException('non-nullable mfaProvidersText cannot be null');
        }
        $this->container['mfaProvidersText'] = $mfaProvidersText;

        return $this;
    }

    /**
     * Gets verifyMfaOtpText
     *
     * @return \ArthurHlt\Zitadel\Model\V1VerifyMFAOTPScreenText|null
     */
    public function getVerifyMfaOtpText()
    {
        return $this->container['verifyMfaOtpText'];
    }

    /**
     * Sets verifyMfaOtpText
     *
     * @param \ArthurHlt\Zitadel\Model\V1VerifyMFAOTPScreenText|null $verifyMfaOtpText verifyMfaOtpText
     *
     * @return self
     */
    public function setVerifyMfaOtpText($verifyMfaOtpText)
    {
        if (is_null($verifyMfaOtpText)) {
            throw new \InvalidArgumentException('non-nullable verifyMfaOtpText cannot be null');
        }
        $this->container['verifyMfaOtpText'] = $verifyMfaOtpText;

        return $this;
    }

    /**
     * Gets verifyMfaU2fText
     *
     * @return \ArthurHlt\Zitadel\Model\V1VerifyMFAU2FScreenText|null
     */
    public function getVerifyMfaU2fText()
    {
        return $this->container['verifyMfaU2fText'];
    }

    /**
     * Sets verifyMfaU2fText
     *
     * @param \ArthurHlt\Zitadel\Model\V1VerifyMFAU2FScreenText|null $verifyMfaU2fText verifyMfaU2fText
     *
     * @return self
     */
    public function setVerifyMfaU2fText($verifyMfaU2fText)
    {
        if (is_null($verifyMfaU2fText)) {
            throw new \InvalidArgumentException('non-nullable verifyMfaU2fText cannot be null');
        }
        $this->container['verifyMfaU2fText'] = $verifyMfaU2fText;

        return $this;
    }

    /**
     * Gets passwordlessText
     *
     * @return \ArthurHlt\Zitadel\Model\V1PasswordlessScreenText|null
     */
    public function getPasswordlessText()
    {
        return $this->container['passwordlessText'];
    }

    /**
     * Sets passwordlessText
     *
     * @param \ArthurHlt\Zitadel\Model\V1PasswordlessScreenText|null $passwordlessText passwordlessText
     *
     * @return self
     */
    public function setPasswordlessText($passwordlessText)
    {
        if (is_null($passwordlessText)) {
            throw new \InvalidArgumentException('non-nullable passwordlessText cannot be null');
        }
        $this->container['passwordlessText'] = $passwordlessText;

        return $this;
    }

    /**
     * Gets passwordChangeText
     *
     * @return \ArthurHlt\Zitadel\Model\V1PasswordChangeScreenText|null
     */
    public function getPasswordChangeText()
    {
        return $this->container['passwordChangeText'];
    }

    /**
     * Sets passwordChangeText
     *
     * @param \ArthurHlt\Zitadel\Model\V1PasswordChangeScreenText|null $passwordChangeText passwordChangeText
     *
     * @return self
     */
    public function setPasswordChangeText($passwordChangeText)
    {
        if (is_null($passwordChangeText)) {
            throw new \InvalidArgumentException('non-nullable passwordChangeText cannot be null');
        }
        $this->container['passwordChangeText'] = $passwordChangeText;

        return $this;
    }

    /**
     * Gets passwordChangeDoneText
     *
     * @return \ArthurHlt\Zitadel\Model\V1PasswordChangeDoneScreenText|null
     */
    public function getPasswordChangeDoneText()
    {
        return $this->container['passwordChangeDoneText'];
    }

    /**
     * Sets passwordChangeDoneText
     *
     * @param \ArthurHlt\Zitadel\Model\V1PasswordChangeDoneScreenText|null $passwordChangeDoneText passwordChangeDoneText
     *
     * @return self
     */
    public function setPasswordChangeDoneText($passwordChangeDoneText)
    {
        if (is_null($passwordChangeDoneText)) {
            throw new \InvalidArgumentException('non-nullable passwordChangeDoneText cannot be null');
        }
        $this->container['passwordChangeDoneText'] = $passwordChangeDoneText;

        return $this;
    }

    /**
     * Gets passwordResetDoneText
     *
     * @return \ArthurHlt\Zitadel\Model\V1PasswordResetDoneScreenText|null
     */
    public function getPasswordResetDoneText()
    {
        return $this->container['passwordResetDoneText'];
    }

    /**
     * Sets passwordResetDoneText
     *
     * @param \ArthurHlt\Zitadel\Model\V1PasswordResetDoneScreenText|null $passwordResetDoneText passwordResetDoneText
     *
     * @return self
     */
    public function setPasswordResetDoneText($passwordResetDoneText)
    {
        if (is_null($passwordResetDoneText)) {
            throw new \InvalidArgumentException('non-nullable passwordResetDoneText cannot be null');
        }
        $this->container['passwordResetDoneText'] = $passwordResetDoneText;

        return $this;
    }

    /**
     * Gets registrationOptionText
     *
     * @return \ArthurHlt\Zitadel\Model\V1RegistrationOptionScreenText|null
     */
    public function getRegistrationOptionText()
    {
        return $this->container['registrationOptionText'];
    }

    /**
     * Sets registrationOptionText
     *
     * @param \ArthurHlt\Zitadel\Model\V1RegistrationOptionScreenText|null $registrationOptionText registrationOptionText
     *
     * @return self
     */
    public function setRegistrationOptionText($registrationOptionText)
    {
        if (is_null($registrationOptionText)) {
            throw new \InvalidArgumentException('non-nullable registrationOptionText cannot be null');
        }
        $this->container['registrationOptionText'] = $registrationOptionText;

        return $this;
    }

    /**
     * Gets registrationUserText
     *
     * @return \ArthurHlt\Zitadel\Model\V1RegistrationUserScreenText|null
     */
    public function getRegistrationUserText()
    {
        return $this->container['registrationUserText'];
    }

    /**
     * Sets registrationUserText
     *
     * @param \ArthurHlt\Zitadel\Model\V1RegistrationUserScreenText|null $registrationUserText registrationUserText
     *
     * @return self
     */
    public function setRegistrationUserText($registrationUserText)
    {
        if (is_null($registrationUserText)) {
            throw new \InvalidArgumentException('non-nullable registrationUserText cannot be null');
        }
        $this->container['registrationUserText'] = $registrationUserText;

        return $this;
    }

    /**
     * Gets registrationOrgText
     *
     * @return \ArthurHlt\Zitadel\Model\V1RegistrationOrgScreenText|null
     */
    public function getRegistrationOrgText()
    {
        return $this->container['registrationOrgText'];
    }

    /**
     * Sets registrationOrgText
     *
     * @param \ArthurHlt\Zitadel\Model\V1RegistrationOrgScreenText|null $registrationOrgText registrationOrgText
     *
     * @return self
     */
    public function setRegistrationOrgText($registrationOrgText)
    {
        if (is_null($registrationOrgText)) {
            throw new \InvalidArgumentException('non-nullable registrationOrgText cannot be null');
        }
        $this->container['registrationOrgText'] = $registrationOrgText;

        return $this;
    }

    /**
     * Gets linkingUserDoneText
     *
     * @return \ArthurHlt\Zitadel\Model\V1LinkingUserDoneScreenText|null
     */
    public function getLinkingUserDoneText()
    {
        return $this->container['linkingUserDoneText'];
    }

    /**
     * Sets linkingUserDoneText
     *
     * @param \ArthurHlt\Zitadel\Model\V1LinkingUserDoneScreenText|null $linkingUserDoneText linkingUserDoneText
     *
     * @return self
     */
    public function setLinkingUserDoneText($linkingUserDoneText)
    {
        if (is_null($linkingUserDoneText)) {
            throw new \InvalidArgumentException('non-nullable linkingUserDoneText cannot be null');
        }
        $this->container['linkingUserDoneText'] = $linkingUserDoneText;

        return $this;
    }

    /**
     * Gets externalUserNotFoundText
     *
     * @return \ArthurHlt\Zitadel\Model\V1ExternalUserNotFoundScreenText|null
     */
    public function getExternalUserNotFoundText()
    {
        return $this->container['externalUserNotFoundText'];
    }

    /**
     * Sets externalUserNotFoundText
     *
     * @param \ArthurHlt\Zitadel\Model\V1ExternalUserNotFoundScreenText|null $externalUserNotFoundText externalUserNotFoundText
     *
     * @return self
     */
    public function setExternalUserNotFoundText($externalUserNotFoundText)
    {
        if (is_null($externalUserNotFoundText)) {
            throw new \InvalidArgumentException('non-nullable externalUserNotFoundText cannot be null');
        }
        $this->container['externalUserNotFoundText'] = $externalUserNotFoundText;

        return $this;
    }

    /**
     * Gets successLoginText
     *
     * @return \ArthurHlt\Zitadel\Model\V1SuccessLoginScreenText|null
     */
    public function getSuccessLoginText()
    {
        return $this->container['successLoginText'];
    }

    /**
     * Sets successLoginText
     *
     * @param \ArthurHlt\Zitadel\Model\V1SuccessLoginScreenText|null $successLoginText successLoginText
     *
     * @return self
     */
    public function setSuccessLoginText($successLoginText)
    {
        if (is_null($successLoginText)) {
            throw new \InvalidArgumentException('non-nullable successLoginText cannot be null');
        }
        $this->container['successLoginText'] = $successLoginText;

        return $this;
    }

    /**
     * Gets logoutText
     *
     * @return \ArthurHlt\Zitadel\Model\V1LogoutDoneScreenText|null
     */
    public function getLogoutText()
    {
        return $this->container['logoutText'];
    }

    /**
     * Sets logoutText
     *
     * @param \ArthurHlt\Zitadel\Model\V1LogoutDoneScreenText|null $logoutText logoutText
     *
     * @return self
     */
    public function setLogoutText($logoutText)
    {
        if (is_null($logoutText)) {
            throw new \InvalidArgumentException('non-nullable logoutText cannot be null');
        }
        $this->container['logoutText'] = $logoutText;

        return $this;
    }

    /**
     * Gets footerText
     *
     * @return \ArthurHlt\Zitadel\Model\V1FooterText|null
     */
    public function getFooterText()
    {
        return $this->container['footerText'];
    }

    /**
     * Sets footerText
     *
     * @param \ArthurHlt\Zitadel\Model\V1FooterText|null $footerText footerText
     *
     * @return self
     */
    public function setFooterText($footerText)
    {
        if (is_null($footerText)) {
            throw new \InvalidArgumentException('non-nullable footerText cannot be null');
        }
        $this->container['footerText'] = $footerText;

        return $this;
    }

    /**
     * Gets passwordlessPromptText
     *
     * @return \ArthurHlt\Zitadel\Model\V1PasswordlessPromptScreenText|null
     */
    public function getPasswordlessPromptText()
    {
        return $this->container['passwordlessPromptText'];
    }

    /**
     * Sets passwordlessPromptText
     *
     * @param \ArthurHlt\Zitadel\Model\V1PasswordlessPromptScreenText|null $passwordlessPromptText passwordlessPromptText
     *
     * @return self
     */
    public function setPasswordlessPromptText($passwordlessPromptText)
    {
        if (is_null($passwordlessPromptText)) {
            throw new \InvalidArgumentException('non-nullable passwordlessPromptText cannot be null');
        }
        $this->container['passwordlessPromptText'] = $passwordlessPromptText;

        return $this;
    }

    /**
     * Gets passwordlessRegistrationText
     *
     * @return \ArthurHlt\Zitadel\Model\V1PasswordlessRegistrationScreenText|null
     */
    public function getPasswordlessRegistrationText()
    {
        return $this->container['passwordlessRegistrationText'];
    }

    /**
     * Sets passwordlessRegistrationText
     *
     * @param \ArthurHlt\Zitadel\Model\V1PasswordlessRegistrationScreenText|null $passwordlessRegistrationText passwordlessRegistrationText
     *
     * @return self
     */
    public function setPasswordlessRegistrationText($passwordlessRegistrationText)
    {
        if (is_null($passwordlessRegistrationText)) {
            throw new \InvalidArgumentException('non-nullable passwordlessRegistrationText cannot be null');
        }
        $this->container['passwordlessRegistrationText'] = $passwordlessRegistrationText;

        return $this;
    }

    /**
     * Gets passwordlessRegistrationDoneText
     *
     * @return \ArthurHlt\Zitadel\Model\V1PasswordlessRegistrationDoneScreenText|null
     */
    public function getPasswordlessRegistrationDoneText()
    {
        return $this->container['passwordlessRegistrationDoneText'];
    }

    /**
     * Sets passwordlessRegistrationDoneText
     *
     * @param \ArthurHlt\Zitadel\Model\V1PasswordlessRegistrationDoneScreenText|null $passwordlessRegistrationDoneText passwordlessRegistrationDoneText
     *
     * @return self
     */
    public function setPasswordlessRegistrationDoneText($passwordlessRegistrationDoneText)
    {
        if (is_null($passwordlessRegistrationDoneText)) {
            throw new \InvalidArgumentException('non-nullable passwordlessRegistrationDoneText cannot be null');
        }
        $this->container['passwordlessRegistrationDoneText'] = $passwordlessRegistrationDoneText;

        return $this;
    }

    /**
     * Gets externalRegistrationUserOverviewText
     *
     * @return \ArthurHlt\Zitadel\Model\V1ExternalRegistrationUserOverviewScreenText|null
     */
    public function getExternalRegistrationUserOverviewText()
    {
        return $this->container['externalRegistrationUserOverviewText'];
    }

    /**
     * Sets externalRegistrationUserOverviewText
     *
     * @param \ArthurHlt\Zitadel\Model\V1ExternalRegistrationUserOverviewScreenText|null $externalRegistrationUserOverviewText externalRegistrationUserOverviewText
     *
     * @return self
     */
    public function setExternalRegistrationUserOverviewText($externalRegistrationUserOverviewText)
    {
        if (is_null($externalRegistrationUserOverviewText)) {
            throw new \InvalidArgumentException('non-nullable externalRegistrationUserOverviewText cannot be null');
        }
        $this->container['externalRegistrationUserOverviewText'] = $externalRegistrationUserOverviewText;

        return $this;
    }

    /**
     * Gets isDefault
     *
     * @return bool|null
     */
    public function getIsDefault()
    {
        return $this->container['isDefault'];
    }

    /**
     * Sets isDefault
     *
     * @param bool|null $isDefault isDefault
     *
     * @return self
     */
    public function setIsDefault($isDefault)
    {
        if (is_null($isDefault)) {
            throw new \InvalidArgumentException('non-nullable isDefault cannot be null');
        }
        $this->container['isDefault'] = $isDefault;

        return $this;
    }

    /**
     * Gets linkingUserPromptText
     *
     * @return \ArthurHlt\Zitadel\Model\V1LinkingUserPromptScreenText|null
     */
    public function getLinkingUserPromptText()
    {
        return $this->container['linkingUserPromptText'];
    }

    /**
     * Sets linkingUserPromptText
     *
     * @param \ArthurHlt\Zitadel\Model\V1LinkingUserPromptScreenText|null $linkingUserPromptText linkingUserPromptText
     *
     * @return self
     */
    public function setLinkingUserPromptText($linkingUserPromptText)
    {
        if (is_null($linkingUserPromptText)) {
            throw new \InvalidArgumentException('non-nullable linkingUserPromptText cannot be null');
        }
        $this->container['linkingUserPromptText'] = $linkingUserPromptText;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


