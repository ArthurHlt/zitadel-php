<?php
/**
 * V1AddCustomPrivacyPolicyRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ArthurHlt\Zitadel\Model;

use \ArrayAccess;
use \ArthurHlt\Zitadel\ObjectSerializer;

/**
 * V1AddCustomPrivacyPolicyRequest Class Doc Comment
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V1AddCustomPrivacyPolicyRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'v1AddCustomPrivacyPolicyRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tosLink' => 'string',
        'privacyLink' => 'string',
        'helpLink' => 'string',
        'supportEmail' => 'string',
        'docsLink' => 'string',
        'customLink' => 'string',
        'customLinkText' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'tosLink' => null,
        'privacyLink' => null,
        'helpLink' => null,
        'supportEmail' => null,
        'docsLink' => null,
        'customLink' => null,
        'customLinkText' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'tosLink' => false,
        'privacyLink' => false,
        'helpLink' => false,
        'supportEmail' => false,
        'docsLink' => false,
        'customLink' => false,
        'customLinkText' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tosLink' => 'tosLink',
        'privacyLink' => 'privacyLink',
        'helpLink' => 'helpLink',
        'supportEmail' => 'supportEmail',
        'docsLink' => 'docsLink',
        'customLink' => 'customLink',
        'customLinkText' => 'customLinkText'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tosLink' => 'setTosLink',
        'privacyLink' => 'setPrivacyLink',
        'helpLink' => 'setHelpLink',
        'supportEmail' => 'setSupportEmail',
        'docsLink' => 'setDocsLink',
        'customLink' => 'setCustomLink',
        'customLinkText' => 'setCustomLinkText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tosLink' => 'getTosLink',
        'privacyLink' => 'getPrivacyLink',
        'helpLink' => 'getHelpLink',
        'supportEmail' => 'getSupportEmail',
        'docsLink' => 'getDocsLink',
        'customLink' => 'getCustomLink',
        'customLinkText' => 'getCustomLinkText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('tosLink', $data ?? [], null);
        $this->setIfExists('privacyLink', $data ?? [], null);
        $this->setIfExists('helpLink', $data ?? [], null);
        $this->setIfExists('supportEmail', $data ?? [], null);
        $this->setIfExists('docsLink', $data ?? [], null);
        $this->setIfExists('customLink', $data ?? [], null);
        $this->setIfExists('customLinkText', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tosLink
     *
     * @return string|null
     */
    public function getTosLink()
    {
        return $this->container['tosLink'];
    }

    /**
     * Sets tosLink
     *
     * @param string|null $tosLink If registration is enabled, the user has to accept the TOS. Variable {{.Lang}} can be set to have different links based on the language.
     *
     * @return self
     */
    public function setTosLink($tosLink)
    {
        if (is_null($tosLink)) {
            throw new \InvalidArgumentException('non-nullable tosLink cannot be null');
        }
        $this->container['tosLink'] = $tosLink;

        return $this;
    }

    /**
     * Gets privacyLink
     *
     * @return string|null
     */
    public function getPrivacyLink()
    {
        return $this->container['privacyLink'];
    }

    /**
     * Sets privacyLink
     *
     * @param string|null $privacyLink If registration is enabled, the user has to accept the privacy terms. Variable {{.Lang}} can be set to have different links based on the language.
     *
     * @return self
     */
    public function setPrivacyLink($privacyLink)
    {
        if (is_null($privacyLink)) {
            throw new \InvalidArgumentException('non-nullable privacyLink cannot be null');
        }
        $this->container['privacyLink'] = $privacyLink;

        return $this;
    }

    /**
     * Gets helpLink
     *
     * @return string|null
     */
    public function getHelpLink()
    {
        return $this->container['helpLink'];
    }

    /**
     * Sets helpLink
     *
     * @param string|null $helpLink Variable {{.Lang}} can be set to have different links based on the language.
     *
     * @return self
     */
    public function setHelpLink($helpLink)
    {
        if (is_null($helpLink)) {
            throw new \InvalidArgumentException('non-nullable helpLink cannot be null');
        }
        $this->container['helpLink'] = $helpLink;

        return $this;
    }

    /**
     * Gets supportEmail
     *
     * @return string|null
     */
    public function getSupportEmail()
    {
        return $this->container['supportEmail'];
    }

    /**
     * Sets supportEmail
     *
     * @param string|null $supportEmail help / support email address.
     *
     * @return self
     */
    public function setSupportEmail($supportEmail)
    {
        if (is_null($supportEmail)) {
            throw new \InvalidArgumentException('non-nullable supportEmail cannot be null');
        }
        $this->container['supportEmail'] = $supportEmail;

        return $this;
    }

    /**
     * Gets docsLink
     *
     * @return string|null
     */
    public function getDocsLink()
    {
        return $this->container['docsLink'];
    }

    /**
     * Sets docsLink
     *
     * @param string|null $docsLink Link to documentation to be shown in the console.
     *
     * @return self
     */
    public function setDocsLink($docsLink)
    {
        if (is_null($docsLink)) {
            throw new \InvalidArgumentException('non-nullable docsLink cannot be null');
        }
        $this->container['docsLink'] = $docsLink;

        return $this;
    }

    /**
     * Gets customLink
     *
     * @return string|null
     */
    public function getCustomLink()
    {
        return $this->container['customLink'];
    }

    /**
     * Sets customLink
     *
     * @param string|null $customLink Link to an external resource that will be available to users in the console.
     *
     * @return self
     */
    public function setCustomLink($customLink)
    {
        if (is_null($customLink)) {
            throw new \InvalidArgumentException('non-nullable customLink cannot be null');
        }
        $this->container['customLink'] = $customLink;

        return $this;
    }

    /**
     * Gets customLinkText
     *
     * @return string|null
     */
    public function getCustomLinkText()
    {
        return $this->container['customLinkText'];
    }

    /**
     * Sets customLinkText
     *
     * @param string|null $customLinkText The button text that would be shown in console pointing to custom link.
     *
     * @return self
     */
    public function setCustomLinkText($customLinkText)
    {
        if (is_null($customLinkText)) {
            throw new \InvalidArgumentException('non-nullable customLinkText cannot be null');
        }
        $this->container['customLinkText'] = $customLinkText;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


