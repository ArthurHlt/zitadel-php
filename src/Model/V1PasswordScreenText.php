<?php
/**
 * V1PasswordScreenText
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ArthurHlt\Zitadel\Model;

use \ArrayAccess;
use \ArthurHlt\Zitadel\ObjectSerializer;

/**
 * V1PasswordScreenText Class Doc Comment
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V1PasswordScreenText implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'v1PasswordScreenText';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'title' => 'string',
        'description' => 'string',
        'passwordLabel' => 'string',
        'resetLinkText' => 'string',
        'backButtonText' => 'string',
        'nextButtonText' => 'string',
        'minLength' => 'string',
        'hasUppercase' => 'string',
        'hasLowercase' => 'string',
        'hasNumber' => 'string',
        'hasSymbol' => 'string',
        'confirmation' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'title' => null,
        'description' => null,
        'passwordLabel' => null,
        'resetLinkText' => null,
        'backButtonText' => null,
        'nextButtonText' => null,
        'minLength' => null,
        'hasUppercase' => null,
        'hasLowercase' => null,
        'hasNumber' => null,
        'hasSymbol' => null,
        'confirmation' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'title' => false,
        'description' => false,
        'passwordLabel' => false,
        'resetLinkText' => false,
        'backButtonText' => false,
        'nextButtonText' => false,
        'minLength' => false,
        'hasUppercase' => false,
        'hasLowercase' => false,
        'hasNumber' => false,
        'hasSymbol' => false,
        'confirmation' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'description' => 'description',
        'passwordLabel' => 'passwordLabel',
        'resetLinkText' => 'resetLinkText',
        'backButtonText' => 'backButtonText',
        'nextButtonText' => 'nextButtonText',
        'minLength' => 'minLength',
        'hasUppercase' => 'hasUppercase',
        'hasLowercase' => 'hasLowercase',
        'hasNumber' => 'hasNumber',
        'hasSymbol' => 'hasSymbol',
        'confirmation' => 'confirmation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'description' => 'setDescription',
        'passwordLabel' => 'setPasswordLabel',
        'resetLinkText' => 'setResetLinkText',
        'backButtonText' => 'setBackButtonText',
        'nextButtonText' => 'setNextButtonText',
        'minLength' => 'setMinLength',
        'hasUppercase' => 'setHasUppercase',
        'hasLowercase' => 'setHasLowercase',
        'hasNumber' => 'setHasNumber',
        'hasSymbol' => 'setHasSymbol',
        'confirmation' => 'setConfirmation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'description' => 'getDescription',
        'passwordLabel' => 'getPasswordLabel',
        'resetLinkText' => 'getResetLinkText',
        'backButtonText' => 'getBackButtonText',
        'nextButtonText' => 'getNextButtonText',
        'minLength' => 'getMinLength',
        'hasUppercase' => 'getHasUppercase',
        'hasLowercase' => 'getHasLowercase',
        'hasNumber' => 'getHasNumber',
        'hasSymbol' => 'getHasSymbol',
        'confirmation' => 'getConfirmation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('passwordLabel', $data ?? [], null);
        $this->setIfExists('resetLinkText', $data ?? [], null);
        $this->setIfExists('backButtonText', $data ?? [], null);
        $this->setIfExists('nextButtonText', $data ?? [], null);
        $this->setIfExists('minLength', $data ?? [], null);
        $this->setIfExists('hasUppercase', $data ?? [], null);
        $this->setIfExists('hasLowercase', $data ?? [], null);
        $this->setIfExists('hasNumber', $data ?? [], null);
        $this->setIfExists('hasSymbol', $data ?? [], null);
        $this->setIfExists('confirmation', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets passwordLabel
     *
     * @return string|null
     */
    public function getPasswordLabel()
    {
        return $this->container['passwordLabel'];
    }

    /**
     * Sets passwordLabel
     *
     * @param string|null $passwordLabel passwordLabel
     *
     * @return self
     */
    public function setPasswordLabel($passwordLabel)
    {
        if (is_null($passwordLabel)) {
            throw new \InvalidArgumentException('non-nullable passwordLabel cannot be null');
        }
        $this->container['passwordLabel'] = $passwordLabel;

        return $this;
    }

    /**
     * Gets resetLinkText
     *
     * @return string|null
     */
    public function getResetLinkText()
    {
        return $this->container['resetLinkText'];
    }

    /**
     * Sets resetLinkText
     *
     * @param string|null $resetLinkText resetLinkText
     *
     * @return self
     */
    public function setResetLinkText($resetLinkText)
    {
        if (is_null($resetLinkText)) {
            throw new \InvalidArgumentException('non-nullable resetLinkText cannot be null');
        }
        $this->container['resetLinkText'] = $resetLinkText;

        return $this;
    }

    /**
     * Gets backButtonText
     *
     * @return string|null
     */
    public function getBackButtonText()
    {
        return $this->container['backButtonText'];
    }

    /**
     * Sets backButtonText
     *
     * @param string|null $backButtonText backButtonText
     *
     * @return self
     */
    public function setBackButtonText($backButtonText)
    {
        if (is_null($backButtonText)) {
            throw new \InvalidArgumentException('non-nullable backButtonText cannot be null');
        }
        $this->container['backButtonText'] = $backButtonText;

        return $this;
    }

    /**
     * Gets nextButtonText
     *
     * @return string|null
     */
    public function getNextButtonText()
    {
        return $this->container['nextButtonText'];
    }

    /**
     * Sets nextButtonText
     *
     * @param string|null $nextButtonText nextButtonText
     *
     * @return self
     */
    public function setNextButtonText($nextButtonText)
    {
        if (is_null($nextButtonText)) {
            throw new \InvalidArgumentException('non-nullable nextButtonText cannot be null');
        }
        $this->container['nextButtonText'] = $nextButtonText;

        return $this;
    }

    /**
     * Gets minLength
     *
     * @return string|null
     */
    public function getMinLength()
    {
        return $this->container['minLength'];
    }

    /**
     * Sets minLength
     *
     * @param string|null $minLength minLength
     *
     * @return self
     */
    public function setMinLength($minLength)
    {
        if (is_null($minLength)) {
            throw new \InvalidArgumentException('non-nullable minLength cannot be null');
        }
        $this->container['minLength'] = $minLength;

        return $this;
    }

    /**
     * Gets hasUppercase
     *
     * @return string|null
     */
    public function getHasUppercase()
    {
        return $this->container['hasUppercase'];
    }

    /**
     * Sets hasUppercase
     *
     * @param string|null $hasUppercase hasUppercase
     *
     * @return self
     */
    public function setHasUppercase($hasUppercase)
    {
        if (is_null($hasUppercase)) {
            throw new \InvalidArgumentException('non-nullable hasUppercase cannot be null');
        }
        $this->container['hasUppercase'] = $hasUppercase;

        return $this;
    }

    /**
     * Gets hasLowercase
     *
     * @return string|null
     */
    public function getHasLowercase()
    {
        return $this->container['hasLowercase'];
    }

    /**
     * Sets hasLowercase
     *
     * @param string|null $hasLowercase hasLowercase
     *
     * @return self
     */
    public function setHasLowercase($hasLowercase)
    {
        if (is_null($hasLowercase)) {
            throw new \InvalidArgumentException('non-nullable hasLowercase cannot be null');
        }
        $this->container['hasLowercase'] = $hasLowercase;

        return $this;
    }

    /**
     * Gets hasNumber
     *
     * @return string|null
     */
    public function getHasNumber()
    {
        return $this->container['hasNumber'];
    }

    /**
     * Sets hasNumber
     *
     * @param string|null $hasNumber hasNumber
     *
     * @return self
     */
    public function setHasNumber($hasNumber)
    {
        if (is_null($hasNumber)) {
            throw new \InvalidArgumentException('non-nullable hasNumber cannot be null');
        }
        $this->container['hasNumber'] = $hasNumber;

        return $this;
    }

    /**
     * Gets hasSymbol
     *
     * @return string|null
     */
    public function getHasSymbol()
    {
        return $this->container['hasSymbol'];
    }

    /**
     * Sets hasSymbol
     *
     * @param string|null $hasSymbol hasSymbol
     *
     * @return self
     */
    public function setHasSymbol($hasSymbol)
    {
        if (is_null($hasSymbol)) {
            throw new \InvalidArgumentException('non-nullable hasSymbol cannot be null');
        }
        $this->container['hasSymbol'] = $hasSymbol;

        return $this;
    }

    /**
     * Gets confirmation
     *
     * @return string|null
     */
    public function getConfirmation()
    {
        return $this->container['confirmation'];
    }

    /**
     * Sets confirmation
     *
     * @param string|null $confirmation confirmation
     *
     * @return self
     */
    public function setConfirmation($confirmation)
    {
        if (is_null($confirmation)) {
            throw new \InvalidArgumentException('non-nullable confirmation cannot be null');
        }
        $this->container['confirmation'] = $confirmation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


