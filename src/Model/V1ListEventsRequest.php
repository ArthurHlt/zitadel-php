<?php
/**
 * V1ListEventsRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ArthurHlt\Zitadel\Model;

use \ArrayAccess;
use \ArthurHlt\Zitadel\ObjectSerializer;

/**
 * V1ListEventsRequest Class Doc Comment
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V1ListEventsRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'v1ListEventsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sequence' => 'string',
        'limit' => 'int',
        'asc' => 'bool',
        'editorUserId' => 'string',
        'eventTypes' => 'string[]',
        'aggregateId' => 'string',
        'aggregateTypes' => 'string[]',
        'resourceOwner' => 'string',
        'creationDate' => '\DateTime',
        'range' => '\ArthurHlt\Zitadel\Model\ListEventsRequestcreationDateRange',
        'from' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sequence' => 'uint64',
        'limit' => 'int64',
        'asc' => null,
        'editorUserId' => null,
        'eventTypes' => null,
        'aggregateId' => null,
        'aggregateTypes' => null,
        'resourceOwner' => null,
        'creationDate' => 'date-time',
        'range' => null,
        'from' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sequence' => false,
        'limit' => false,
        'asc' => false,
        'editorUserId' => false,
        'eventTypes' => false,
        'aggregateId' => false,
        'aggregateTypes' => false,
        'resourceOwner' => false,
        'creationDate' => false,
        'range' => false,
        'from' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sequence' => 'sequence',
        'limit' => 'limit',
        'asc' => 'asc',
        'editorUserId' => 'editorUserId',
        'eventTypes' => 'eventTypes',
        'aggregateId' => 'aggregateId',
        'aggregateTypes' => 'aggregateTypes',
        'resourceOwner' => 'resourceOwner',
        'creationDate' => 'creationDate',
        'range' => 'range',
        'from' => 'from'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sequence' => 'setSequence',
        'limit' => 'setLimit',
        'asc' => 'setAsc',
        'editorUserId' => 'setEditorUserId',
        'eventTypes' => 'setEventTypes',
        'aggregateId' => 'setAggregateId',
        'aggregateTypes' => 'setAggregateTypes',
        'resourceOwner' => 'setResourceOwner',
        'creationDate' => 'setCreationDate',
        'range' => 'setRange',
        'from' => 'setFrom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sequence' => 'getSequence',
        'limit' => 'getLimit',
        'asc' => 'getAsc',
        'editorUserId' => 'getEditorUserId',
        'eventTypes' => 'getEventTypes',
        'aggregateId' => 'getAggregateId',
        'aggregateTypes' => 'getAggregateTypes',
        'resourceOwner' => 'getResourceOwner',
        'creationDate' => 'getCreationDate',
        'range' => 'getRange',
        'from' => 'getFrom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('sequence', $data ?? [], null);
        $this->setIfExists('limit', $data ?? [], null);
        $this->setIfExists('asc', $data ?? [], null);
        $this->setIfExists('editorUserId', $data ?? [], null);
        $this->setIfExists('eventTypes', $data ?? [], null);
        $this->setIfExists('aggregateId', $data ?? [], null);
        $this->setIfExists('aggregateTypes', $data ?? [], null);
        $this->setIfExists('resourceOwner', $data ?? [], null);
        $this->setIfExists('creationDate', $data ?? [], null);
        $this->setIfExists('range', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sequence
     *
     * @return string|null
     */
    public function getSequence()
    {
        return $this->container['sequence'];
    }

    /**
     * Sets sequence
     *
     * @param string|null $sequence Sequence represents the order of events. It's always counting. If asc is false, the sequence is used as lesser than filter. If asc is true sequence is used as greater than filter. If the sequence is 0 the field is ignored.
     *
     * @return self
     */
    public function setSequence($sequence)
    {
        if (is_null($sequence)) {
            throw new \InvalidArgumentException('non-nullable sequence cannot be null');
        }
        $this->container['sequence'] = $sequence;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int|null
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int|null $limit Maximum amount of events returned.
     *
     * @return self
     */
    public function setLimit($limit)
    {
        if (is_null($limit)) {
            throw new \InvalidArgumentException('non-nullable limit cannot be null');
        }
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets asc
     *
     * @return bool|null
     */
    public function getAsc()
    {
        return $this->container['asc'];
    }

    /**
     * Sets asc
     *
     * @param bool|null $asc default is descending sorting order
     *
     * @return self
     */
    public function setAsc($asc)
    {
        if (is_null($asc)) {
            throw new \InvalidArgumentException('non-nullable asc cannot be null');
        }
        $this->container['asc'] = $asc;

        return $this;
    }

    /**
     * Gets editorUserId
     *
     * @return string|null
     */
    public function getEditorUserId()
    {
        return $this->container['editorUserId'];
    }

    /**
     * Sets editorUserId
     *
     * @param string|null $editorUserId editorUserId
     *
     * @return self
     */
    public function setEditorUserId($editorUserId)
    {
        if (is_null($editorUserId)) {
            throw new \InvalidArgumentException('non-nullable editorUserId cannot be null');
        }
        $this->container['editorUserId'] = $editorUserId;

        return $this;
    }

    /**
     * Gets eventTypes
     *
     * @return string[]|null
     */
    public function getEventTypes()
    {
        return $this->container['eventTypes'];
    }

    /**
     * Sets eventTypes
     *
     * @param string[]|null $eventTypes The types are filtered by 'or' and must match the type exactly.
     *
     * @return self
     */
    public function setEventTypes($eventTypes)
    {
        if (is_null($eventTypes)) {
            throw new \InvalidArgumentException('non-nullable eventTypes cannot be null');
        }
        $this->container['eventTypes'] = $eventTypes;

        return $this;
    }

    /**
     * Gets aggregateId
     *
     * @return string|null
     */
    public function getAggregateId()
    {
        return $this->container['aggregateId'];
    }

    /**
     * Sets aggregateId
     *
     * @param string|null $aggregateId aggregateId
     *
     * @return self
     */
    public function setAggregateId($aggregateId)
    {
        if (is_null($aggregateId)) {
            throw new \InvalidArgumentException('non-nullable aggregateId cannot be null');
        }
        $this->container['aggregateId'] = $aggregateId;

        return $this;
    }

    /**
     * Gets aggregateTypes
     *
     * @return string[]|null
     */
    public function getAggregateTypes()
    {
        return $this->container['aggregateTypes'];
    }

    /**
     * Sets aggregateTypes
     *
     * @param string[]|null $aggregateTypes aggregateTypes
     *
     * @return self
     */
    public function setAggregateTypes($aggregateTypes)
    {
        if (is_null($aggregateTypes)) {
            throw new \InvalidArgumentException('non-nullable aggregateTypes cannot be null');
        }
        $this->container['aggregateTypes'] = $aggregateTypes;

        return $this;
    }

    /**
     * Gets resourceOwner
     *
     * @return string|null
     */
    public function getResourceOwner()
    {
        return $this->container['resourceOwner'];
    }

    /**
     * Sets resourceOwner
     *
     * @param string|null $resourceOwner resourceOwner
     *
     * @return self
     */
    public function setResourceOwner($resourceOwner)
    {
        if (is_null($resourceOwner)) {
            throw new \InvalidArgumentException('non-nullable resourceOwner cannot be null');
        }
        $this->container['resourceOwner'] = $resourceOwner;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime|null $creationDate Use from instead.
     *
     * @return self
     */
    public function setCreationDate($creationDate)
    {
        if (is_null($creationDate)) {
            throw new \InvalidArgumentException('non-nullable creationDate cannot be null');
        }
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets range
     *
     * @return \ArthurHlt\Zitadel\Model\ListEventsRequestcreationDateRange|null
     */
    public function getRange()
    {
        return $this->container['range'];
    }

    /**
     * Sets range
     *
     * @param \ArthurHlt\Zitadel\Model\ListEventsRequestcreationDateRange|null $range range
     *
     * @return self
     */
    public function setRange($range)
    {
        if (is_null($range)) {
            throw new \InvalidArgumentException('non-nullable range cannot be null');
        }
        $this->container['range'] = $range;

        return $this;
    }

    /**
     * Gets from
     *
     * @return \DateTime|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param \DateTime|null $from If asc is false, the events returned are older than the UTC from date. If asc is true, the events returned are younger than from.
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


