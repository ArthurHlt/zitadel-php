<?php
/**
 * UserAuthenticationFactorApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace ArthurHlt\Zitadel\Test\Api;

use \ArthurHlt\Zitadel\Configuration;
use \ArthurHlt\Zitadel\ApiException;
use \ArthurHlt\Zitadel\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * UserAuthenticationFactorApiTest Class Doc Comment
 *
 * @category Class
 * @package  ArthurHlt\Zitadel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserAuthenticationFactorApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for authServiceAddMyAuthFactorOTP
     *
     * Add One-Time Password (OTP).
     *
     */
    public function testAuthServiceAddMyAuthFactorOTP()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authServiceAddMyAuthFactorOTPEmail
     *
     * Add One-Time Password (OTP) Email.
     *
     */
    public function testAuthServiceAddMyAuthFactorOTPEmail()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authServiceAddMyAuthFactorOTPSMS
     *
     * Add One-Time Password (OTP) SMS.
     *
     */
    public function testAuthServiceAddMyAuthFactorOTPSMS()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authServiceAddMyAuthFactorU2F
     *
     * Add Universal Second Factor (U2F).
     *
     */
    public function testAuthServiceAddMyAuthFactorU2F()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authServiceAddMyPasswordless
     *
     * Add passkey.
     *
     */
    public function testAuthServiceAddMyPasswordless()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authServiceAddMyPasswordlessLink
     *
     * Add passkey link.
     *
     */
    public function testAuthServiceAddMyPasswordlessLink()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authServiceListMyAuthFactors
     *
     * List Authentication Factors.
     *
     */
    public function testAuthServiceListMyAuthFactors()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authServiceListMyPasswordless
     *
     * List Passkey.
     *
     */
    public function testAuthServiceListMyPasswordless()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authServiceRemoveMyAuthFactorOTP
     *
     * Remove One-Time Password (OTP).
     *
     */
    public function testAuthServiceRemoveMyAuthFactorOTP()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authServiceRemoveMyAuthFactorOTPEmail
     *
     * Remove One-Time Password (OTP) Email.
     *
     */
    public function testAuthServiceRemoveMyAuthFactorOTPEmail()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authServiceRemoveMyAuthFactorOTPSMS
     *
     * Remove One-Time Password (OTP) SMS.
     *
     */
    public function testAuthServiceRemoveMyAuthFactorOTPSMS()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authServiceRemoveMyAuthFactorU2F
     *
     * Remove Universal Second Factor (U2F).
     *
     */
    public function testAuthServiceRemoveMyAuthFactorU2F()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authServiceRemoveMyPasswordless
     *
     * Remove passkey.
     *
     */
    public function testAuthServiceRemoveMyPasswordless()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authServiceSendMyPasswordlessLink
     *
     * Send passkey link.
     *
     */
    public function testAuthServiceSendMyPasswordlessLink()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authServiceVerifyMyAuthFactorOTP
     *
     * Verify One-Time Password (OTP).
     *
     */
    public function testAuthServiceVerifyMyAuthFactorOTP()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authServiceVerifyMyAuthFactorU2F
     *
     * Add Universal Second Factor (U2F).
     *
     */
    public function testAuthServiceVerifyMyAuthFactorU2F()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authServiceVerifyMyPasswordless
     *
     * Verify passkey.
     *
     */
    public function testAuthServiceVerifyMyPasswordless()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
